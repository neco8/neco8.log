(function (scope) {
    "use strict";
    function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
    }
    function F2(fun) {
        var curried = function (a) {
            return function (b) {
                return fun(a, b);
            };
        };
        curried.a2 = fun;
        return curried;
    }
    function F3(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return fun(a, b, c);
                };
            };
        };
        curried.a3 =
            fun;
        return curried;
    }
    function F4(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return fun(a, b, c, d);
                    };
                };
            };
        };
        curried.a4 = fun;
        return curried;
    }
    function F5(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return fun(a, b, c, d, e);
                        };
                    };
                };
            };
        };
        curried.a5 = fun;
        return curried;
    }
    function F6(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return fun(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        };
        curried.a6 = fun;
        return curried;
    }
    function F7(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) { return fun(a, b, c, d, e, f, g); };
                            };
                        };
                    };
                };
            };
        };
        curried.
            a7 = fun;
        return curried;
    }
    function F8(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return fun(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried.a8 = fun;
        return curried;
    }
    function F9(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return fun(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried
            .a9 = fun;
        return curried;
    }
    function A2(fun, a, b) {
        return fun.a2 ? fun.a2(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
        return fun.a3 ? fun.a3(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
        return fun.a4 ? fun.a4(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
        return fun.a5 ? fun.a5(a, b, c, d, e)
            : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
        return fun.a6 ? fun.a6(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g) {
        return fun.a7 ? fun.a7(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
    }
    function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a8 ? fun.a8(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
    }
    function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a9 ? fun.a9(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
    }
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
        return [value];
    }
    function _JsArray_length(array) {
        return array.length;
    }
    var _JsArray_initialize_fn = function (size, offset, func) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
            result[i] = func(offset + i);
        }
        return result;
    }, _JsArray_initialize = F3(_JsArray_initialize_fn);
    var _JsArray_initializeFromList_fn = function (max, ls) {
        var result = new Array(max);
        for (var i = 0; i < max && ls.b; i++) {
            result[i] = ls.a;
            ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
    }, _JsArray_initializeFromList = F2(_JsArray_initializeFromList_fn);
    var _JsArray_unsafeGet_fn = function (index, array) {
        return array[index];
    }, _JsArray_unsafeGet = F2(_JsArray_unsafeGet_fn);
    var _JsArray_unsafeSet_fn = function (index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[index] = value;
        return result;
    }, _JsArray_unsafeSet = F3(_JsArray_unsafeSet_fn);
    var _JsArray_push_fn = function (value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[length] = value;
        return result;
    }, _JsArray_push = F2(_JsArray_push_fn);
    var _JsArray_foldl_fn = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldl_fn_unwrapped = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldl = F3(_JsArray_foldl_fn);
    var _JsArray_foldr_fn = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldr_fn_unwrapped = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldr = F3(_JsArray_foldr_fn);
    var _JsArray_map_fn = function (func, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(array[i]);
        }
        return result;
    }, _JsArray_map = F2(_JsArray_map_fn);
    var _JsArray_indexedMap_fn = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = A2(func, offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap_fn_unwrapped = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap = F3(_JsArray_indexedMap_fn);
    var _JsArray_slice_fn = function (from, to, array) {
        return array.slice(from, to);
    }, _JsArray_slice = F3(_JsArray_slice_fn);
    var _JsArray_appendN_fn = function (n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) {
            itemsToCopy = source.length;
        }
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for (var i = 0; i < destLen; i++) {
            result[i] = dest[i];
        }
        for (var i = 0; i < itemsToCopy; i++) {
            result[i + destLen] = source[i];
        }
        return result;
    }, _JsArray_appendN = F3(_JsArray_appendN_fn);
    var _Debug_log_fn = function (tag, value) {
        return value;
    }, _Debug_log = F2(_Debug_log_fn);
    var _Debug_log_UNUSED_fn = function (tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
    }, _Debug_log_UNUSED = F2(_Debug_log_UNUSED_fn);
    function _Debug_todo(moduleName, region) {
        return function (message) {
            _Debug_crash(8, moduleName, region, message);
        };
    }
    function _Debug_todoCase(moduleName, region, value) {
        return function (message) {
            _Debug_crash(9, moduleName, region, value, message);
        };
    }
    function _Debug_toString(value) {
        return "<internals>";
    }
    function _Debug_toString_UNUSED(value) {
        return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") {
            return _Debug_internalColor(ansi, "<function>");
        }
        if (typeof value === "boolean") {
            return _Debug_ctorColor(ansi, value ? "True" : "False");
        }
        if (typeof value === "number") {
            return _Debug_numberColor(ansi, value + "");
        }
        if (value instanceof String) {
            return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        }
        if (typeof value === "string") {
            return _Debug_stringColor(ansi, "\"" + _Debug_addSlashes(value, false) + "\"");
        }
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") {
                return _Debug_internalColor(ansi, "<internals>");
            }
            if (tag[0] === "#") {
                var output = [];
                for (var k in value) {
                    if (k === "$")
                        continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") {
                return _Debug_ctorColor(ansi, "Set")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            }
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
                return _Debug_ctorColor(ansi, "Dict")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            }
            if (tag === "Array_elm_builtin") {
                return _Debug_ctorColor(ansi, "Array")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            }
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for (; value.b; value = value.b) {
                    output += "," + _Debug_toAnsiString(ansi, value.a);
                }
                return output + "]";
            }
            var output = "";
            for (var i in value) {
                if (i === "$")
                    continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === "\"" || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) {
            return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        }
        if (typeof File !== "undefined" && value instanceof File) {
            return _Debug_internalColor(ansi, "<" + value.name + ">");
        }
        if (typeof value === "object") {
            var output = [];
            for (var key in value) {
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) {
                return "{}";
            }
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str
            .replace(/\\/g, "\\\\")
            .replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r")
            .replace(/\v/g, "\\v")
            .replace(/\0/g, "\\0");
        if (isChar) {
            return s.replace(/\'/g, "\\'");
        }
        else {
            return s.replace(/\"/g, "\\\"");
        }
    }
    function _Debug_ctorColor(ansi, string) {
        return ansi ? "\u001B[96m" + string + "\u001B[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
        return ansi ? "\u001B[95m" + string + "\u001B[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
        return ansi ? "\u001B[93m" + string + "\u001B[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
        return ansi ? "\u001B[92m" + string + "\u001B[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
        return ansi ? "\u001B[37m" + string + "\u001B[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
        return ansi ? "\u001B[36m" + string + "\u001B[0m" : string;
    }
    function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    function _Debug_crash(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
        switch (identifier) {
            case 0:
                throw new Error("What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById(\"elm-node\")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.");
            case 1:
                throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
            case 2:
                var jsonErrorString = fact1;
                throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
            case 3:
                var portName = fact1;
                throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
            case 4:
                var portName = fact1;
                var problem = fact2;
                throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
            case 5:
                throw new Error("Trying to use `(==)` on functions.\nThere is no way to know if functions are \"the same\" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.");
            case 6:
                var moduleName = fact1;
                throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
            case 8:
                var moduleName = fact1;
                var region = fact2;
                var message = fact3;
                throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
            case 9:
                var moduleName = fact1;
                var region = fact2;
                var value = fact3;
                var message = fact4;
                throw new Error("TODO in module `" + moduleName + "` from the `case` expression "
                    + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    "
                    + _Debug_toString(value).replace("\n", "\n    ")
                    + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
            case 10:
                throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
            case 11:
                throw new Error("Cannot perform mod 0. Division by zero error.");
        }
    }
    function _Debug_regionToString(region) {
        if (region.q.d$ === region.o.d$) {
            return "on line " + region.q.d$;
        }
        return "on lines " + region.q.d$ + " through " + region.o.d$;
    }
    function _Utils_eq(x, y) {
        for (var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) { }
        return isEqual;
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) {
            return true;
        }
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && _Debug_crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        if (x.$ < 0) {
            x = $elm$core$Dict$toList(x);
            y = $elm$core$Dict$toList(y);
        }
        for (var key in x) {
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
                return false;
            }
        }
        return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual_fn = function (a, b) { return !_Utils_eq(a, b); }, _Utils_notEqual = F2(_Utils_notEqual_fn);
    function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") {
            return x === y ? 0 : x < y ? -1 : 1;
        }
        if (typeof x.$ === "undefined") {
            return (ord = _Utils_cmp(x.a, y.a))
                ? ord
                : (ord = _Utils_cmp(x.b, y.b))
                    ? ord
                    : _Utils_cmp(x.c, y.c);
        }
        for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) { }
        return ord || (x.b ? 1 : y.b ? -1 : 0);
    }
    var _Utils_lt_fn = function (a, b) { return _Utils_cmp(a, b) < 0; }, _Utils_lt = F2(_Utils_lt_fn);
    var _Utils_le_fn = function (a, b) { return _Utils_cmp(a, b) < 1; }, _Utils_le = F2(_Utils_le_fn);
    var _Utils_gt_fn = function (a, b) { return _Utils_cmp(a, b) > 0; }, _Utils_gt = F2(_Utils_gt_fn);
    var _Utils_ge_fn = function (a, b) { return _Utils_cmp(a, b) >= 0; }, _Utils_ge = F2(_Utils_ge_fn);
    var _Utils_compare_fn = function (x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    }, _Utils_compare = F2(_Utils_compare_fn);
    var _Utils_Tuple0 = 0;
    var _Utils_Tuple0_UNUSED = { $: "#0" };
    function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
    function _Utils_Tuple2_UNUSED(a, b) { return { $: "#2", a: a, b: b }; }
    function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
    function _Utils_Tuple3_UNUSED(a, b, c) { return { $: "#3", a: a, b: b, c: c }; }
    function _Utils_chr(c) { return c; }
    function _Utils_chr_UNUSED(c) { return new String(c); }
    function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for (var key in oldRecord) {
            newRecord[key] = oldRecord[key];
        }
        for (var key in updatedFields) {
            newRecord[key] = updatedFields[key];
        }
        return newRecord;
    }
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
        if (typeof xs === "string") {
            return xs + ys;
        }
        if (!xs.b) {
            return ys;
        }
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for (var curr = root; xs.b; xs = xs.b) {
            curr = curr.b = _List_Cons(xs.a, ys);
        }
        return root;
    }
    var _List_Nil = { $: 0, a: null, b: null };
    var _List_Nil_UNUSED = { $: "[]" };
    function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
    function _List_Cons_UNUSED(hd, tl) { return { $: "::", a: hd, b: tl }; }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
        var out = _List_Nil;
        for (var i = arr.length; i--;) {
            out = _List_Cons(arr[i], out);
        }
        return out;
    }
    function _List_toArray(xs) {
        for (var out = []; xs.b; xs = xs.b) {
            out.push(xs.a);
        }
        return out;
    }
    var _List_map2_fn = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(A2(f, xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2_fn_unwrapped = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(f(xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2 = F3(_List_map2_fn);
    var _List_map3_fn = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A3(f, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3_fn_unwrapped = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3 = F4(_List_map3_fn);
    var _List_map4_fn = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4_fn_unwrapped = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4 = F5(_List_map4_fn);
    var _List_map5_fn = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5_fn_unwrapped = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5 = F6(_List_map5_fn);
    var _List_sortBy_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            return _Utils_cmp(f(a), f(b));
        }));
    }, _List_sortBy = F2(_List_sortBy_fn);
    var _List_sortWith_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = A2(f, a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith_fn_unwrapped = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = f(a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith = F2(_List_sortWith_fn);
    var _Basics_add_fn = function (a, b) { return a + b; }, _Basics_add = F2(_Basics_add_fn);
    var _Basics_sub_fn = function (a, b) { return a - b; }, _Basics_sub = F2(_Basics_sub_fn);
    var _Basics_mul_fn = function (a, b) { return a * b; }, _Basics_mul = F2(_Basics_mul_fn);
    var _Basics_fdiv_fn = function (a, b) { return a / b; }, _Basics_fdiv = F2(_Basics_fdiv_fn);
    var _Basics_idiv_fn = function (a, b) { return (a / b) | 0; }, _Basics_idiv = F2(_Basics_idiv_fn);
    var _Basics_pow_fn = Math.pow, _Basics_pow = F2(_Basics_pow_fn);
    var _Basics_remainderBy_fn = function (b, a) { return a % b; }, _Basics_remainderBy = F2(_Basics_remainderBy_fn);
    var _Basics_modBy_fn = function (modulus, x) {
        var answer = x % modulus;
        return modulus === 0
            ? _Debug_crash(11)
            :
                ((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
                    ? answer + modulus
                    : answer;
    }, _Basics_modBy = F2(_Basics_modBy_fn);
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2_fn = Math.atan2, _Basics_atan2 = F2(_Basics_atan2_fn);
    function _Basics_toFloat(x) { return x; }
    function _Basics_truncate(n) { return n | 0; }
    function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    function _Basics_not(bool) { return !bool; }
    var _Basics_and_fn = function (a, b) { return a && b; }, _Basics_and = F2(_Basics_and_fn);
    var _Basics_or_fn = function (a, b) { return a || b; }, _Basics_or = F2(_Basics_or_fn);
    var _Basics_xor_fn = function (a, b) { return a !== b; }, _Basics_xor = F2(_Basics_xor_fn);
    var _String_cons_fn = function (chr, str) {
        return chr + str;
    }, _String_cons = F2(_String_cons_fn);
    function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word)
            ? $elm$core$Maybe$Just(55296 <= word && word <= 56319
                ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
                : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1)))
            : $elm$core$Maybe$Nothing;
    }
    var _String_append_fn = function (a, b) {
        return a + b;
    }, _String_append = F2(_String_append_fn);
    function _String_length(str) {
        return str.length;
    }
    var _String_map_fn = function (func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while (i < len) {
            var word = string.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]));
                i += 2;
                continue;
            }
            array[i] = func(_Utils_chr(string[i]));
            i++;
        }
        return array.join("");
    }, _String_map = F2(_String_map_fn);
    var _String_filter_fn = function (isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while (i < len) {
            var char = str[i];
            var word = str.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += str[i];
                i++;
            }
            if (isGood(_Utils_chr(char))) {
                arr.push(char);
            }
        }
        return arr.join("");
    }, _String_filter = F2(_String_filter_fn);
    function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while (i < len) {
            var word = str.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                arr[len - i] = str[i + 1];
                i++;
                arr[len - i] = str[i - 1];
                i++;
            }
            else {
                arr[len - i] = str[i];
                i++;
            }
        }
        return arr.join("");
    }
    var _String_foldl_fn = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldl_fn_unwrapped = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldl = F3(_String_foldl_fn);
    var _String_foldr_fn = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldr_fn_unwrapped = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldr = F3(_String_foldr_fn);
    var _String_split_fn = function (sep, str) {
        return str.split(sep);
    }, _String_split = F2(_String_split_fn);
    var _String_join_fn = function (sep, strs) {
        return strs.join(sep);
    }, _String_join = F2(_String_join_fn);
    var _String_slice_fn = function (start, end, str) {
        return str.slice(start, end);
    }, _String_slice = F3(_String_slice_fn);
    function _String_trim(str) {
        return str.trim();
    }
    function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
        return str.toUpperCase();
    }
    function _String_toLower(str) {
        return str.toLowerCase();
    }
    var _String_any_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (isGood(_Utils_chr(char))) {
                return true;
            }
        }
        return false;
    }, _String_any = F2(_String_any_fn);
    var _String_all_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (!isGood(_Utils_chr(char))) {
                return false;
            }
        }
        return true;
    }, _String_all = F2(_String_all_fn);
    var _String_contains_fn = function (sub, str) {
        return str.indexOf(sub) > -1;
    }, _String_contains = F2(_String_contains_fn);
    var _String_startsWith_fn = function (sub, str) {
        return str.indexOf(sub) === 0;
    }, _String_startsWith = F2(_String_startsWith_fn);
    var _String_endsWith_fn = function (sub, str) {
        return str.length >= sub.length &&
            str.lastIndexOf(sub) === str.length - sub.length;
    }, _String_endsWith = F2(_String_endsWith_fn);
    var _String_indexes_fn = function (sub, str) {
        var subLen = sub.length;
        if (subLen < 1) {
            return _List_Nil;
        }
        var i = 0;
        var is = [];
        while ((i = str.indexOf(sub, i)) > -1) {
            is.push(i);
            i = i + subLen;
        }
        return _List_fromArray(is);
    }, _String_indexes = F2(_String_indexes_fn);
    function _String_fromNumber(number) {
        return number + "";
    }
    function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 43 || code0 == 45 ? 1 : 0;
        for (var i = start; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 48 || 57 < code) {
                return $elm$core$Maybe$Nothing;
            }
            total = 10 * total + code - 48;
        }
        return i == start
            ? $elm$core$Maybe$Nothing
            : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
    }
    function _String_toFloat(s) {
        if (s.length === 0 || /[\sxbo]/.test(s)) {
            return $elm$core$Maybe$Nothing;
        }
        var n = +s;
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
        return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (55296 <= code && code <= 56319) {
            return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
        }
        return code;
    }
    function _Char_fromCode(code) {
        return _Utils_chr((code < 0 || 1114111 < code)
            ? "\uFFFD"
            :
                (code <= 65535)
                    ? String.fromCharCode(code)
                    :
                        (code -= 65536,
                            String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320)));
    }
    function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
    }
    function _Json_succeed(msg) {
        return {
            $: 0,
            a: msg
        };
    }
    function _Json_fail(msg) {
        return {
            $: 1,
            a: msg
        };
    }
    function _Json_decodePrim(decoder) {
        return { $: 2, b: decoder };
    }
    var _Json_decodeInt = _Json_decodePrim(function (value) {
        return (typeof value !== "number")
            ? _Json_expecting("an INT", value)
            :
                (-2147483647 < value && value < 2147483647 && (value | 0) === value)
                    ? $elm$core$Result$Ok(value)
                    :
                        (isFinite(value) && !(value % 1))
                            ? $elm$core$Result$Ok(value)
                            : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function (value) {
        return (typeof value === "boolean")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function (value) {
        return (typeof value === "number")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function (value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function (value) {
        return (typeof value === "string")
            ? $elm$core$Result$Ok(value)
            : (value instanceof String)
                ? $elm$core$Result$Ok(value + "")
                : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
    function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }
    function _Json_decodeNull(value) { return { $: 5, c: value }; }
    var _Json_decodeField_fn = function (field, decoder) {
        return {
            $: 6,
            d: field,
            b: decoder
        };
    }, _Json_decodeField = F2(_Json_decodeField_fn);
    var _Json_decodeIndex_fn = function (index, decoder) {
        return {
            $: 7,
            e: index,
            b: decoder
        };
    }, _Json_decodeIndex = F2(_Json_decodeIndex_fn);
    function _Json_decodeKeyValuePairs(decoder) {
        return {
            $: 8,
            b: decoder
        };
    }
    function _Json_mapMany(f, decoders) {
        return {
            $: 9,
            f: f,
            g: decoders
        };
    }
    var _Json_andThen_fn = function (callback, decoder) {
        return {
            $: 10,
            b: decoder,
            h: callback
        };
    }, _Json_andThen = F2(_Json_andThen_fn);
    function _Json_oneOf(decoders) {
        return {
            $: 11,
            g: decoders
        };
    }
    var _Json_map1_fn = function (f, d1) {
        return _Json_mapMany(f, [d1]);
    }, _Json_map1 = F2(_Json_map1_fn);
    var _Json_map2_fn = function (f, d1, d2) {
        return _Json_mapMany(f, [d1, d2]);
    }, _Json_map2 = F3(_Json_map2_fn);
    var _Json_map3_fn = function (f, d1, d2, d3) {
        return _Json_mapMany(f, [d1, d2, d3]);
    }, _Json_map3 = F4(_Json_map3_fn);
    var _Json_map4_fn = function (f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [d1, d2, d3, d4]);
    }, _Json_map4 = F5(_Json_map4_fn);
    var _Json_map5_fn = function (f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
    }, _Json_map5 = F6(_Json_map5_fn);
    var _Json_map6_fn = function (f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
    }, _Json_map6 = F7(_Json_map6_fn);
    var _Json_map7_fn = function (f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
    }, _Json_map7 = F8(_Json_map7_fn);
    var _Json_map8_fn = function (f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
    }, _Json_map8 = F9(_Json_map8_fn);
    var _Json_runOnString_fn = function (decoder, string) {
        try {
            var value = JSON.parse(string);
            return _Json_runHelp(decoder, value);
        }
        catch (e) {
            return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
    }, _Json_runOnString = F2(_Json_runOnString_fn);
    var _Json_run_fn = function (decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
    }, _Json_run = F2(_Json_run_fn);
    function _Json_runHelp(decoder, value) {
        switch (decoder.$) {
            case 2:
                return decoder.b(value);
            case 5:
                return (value === null)
                    ? $elm$core$Result$Ok(decoder.c)
                    : _Json_expecting("null", value);
            case 3:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("a LIST", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
            case 4:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
            case 6:
                var field = decoder.d;
                if (typeof value !== "object" || value === null || !(field in value)) {
                    return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
                }
                var result = _Json_runHelp(decoder.b, value[field]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(field, result.a));
            case 7:
                var index = decoder.e;
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                if (index >= value.length) {
                    return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
                }
                var result = _Json_runHelp(decoder.b, value[index]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(index, result.a));
            case 8:
                if (typeof value !== "object" || value === null || _Json_isArray(value)) {
                    return _Json_expecting("an OBJECT", value);
                }
                var keyValuePairs = _List_Nil;
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        var result = _Json_runHelp(decoder.b, value[key]);
                        if (!$elm$core$Result$isOk(result)) {
                            return $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(key, result.a));
                        }
                        keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                    }
                }
                return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
            case 9:
                var answer = decoder.f;
                var decoders = decoder.g;
                for (var i = 0; i < decoders.length; i++) {
                    var result = _Json_runHelp(decoders[i], value);
                    if (!$elm$core$Result$isOk(result)) {
                        return result;
                    }
                    answer = answer(result.a);
                }
                return $elm$core$Result$Ok(answer);
            case 10:
                var result = _Json_runHelp(decoder.b, value);
                return (!$elm$core$Result$isOk(result))
                    ? result
                    : _Json_runHelp(decoder.h(result.a), value);
            case 11:
                var errors = _List_Nil;
                for (var temp = decoder.g; temp.b; temp = temp.b) {
                    var result = _Json_runHelp(temp.a, value);
                    if ($elm$core$Result$isOk(result)) {
                        return result;
                    }
                    errors = _List_Cons(result.a, errors);
                }
                return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
            case 1:
                return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn(decoder.a, _Json_wrap(value)));
            case 0:
                return $elm$core$Result$Ok(decoder.a);
        }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for (var i = 0; i < len; i++) {
            var result = _Json_runHelp(decoder, value[i]);
            if (!$elm$core$Result$isOk(result)) {
                return $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(i, result.a));
            }
            array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
        return Array.isArray(value) || (typeof FileList !== "undefined" && value instanceof FileList);
    }
    function _Json_toElmArray(array) {
        return $elm$core$Array$initialize_fn(array.length, function (i) { return array[i]; });
    }
    function _Json_expecting(type, value) {
        return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("Expecting " + type, _Json_wrap(value)));
    }
    function _Json_equality(x, y) {
        if (x === y) {
            return true;
        }
        if (x.$ !== y.$) {
            return false;
        }
        switch (x.$) {
            case 0:
            case 1:
                return x.a === y.a;
            case 2:
                return x.b === y.b;
            case 5:
                return x.c === y.c;
            case 3:
            case 4:
            case 8:
                return _Json_equality(x.b, y.b);
            case 6:
                return x.d === y.d && _Json_equality(x.b, y.b);
            case 7:
                return x.e === y.e && _Json_equality(x.b, y.b);
            case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g);
            case 10:
                return x.h === y.h && _Json_equality(x.b, y.b);
            case 11:
                return _Json_listEquality(x.g, y.g);
        }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) {
            return false;
        }
        for (var i = 0; i < len; i++) {
            if (!_Json_equality(aDecoders[i], bDecoders[i])) {
                return false;
            }
        }
        return true;
    }
    var _Json_encode_fn = function (indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    }, _Json_encode = F2(_Json_encode_fn);
    function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
    function _Json_unwrap_UNUSED(value) { return value.a; }
    function _Json_wrap(value) { return value; }
    function _Json_unwrap(value) { return value; }
    function _Json_emptyArray() { return []; }
    function _Json_emptyObject() { return {}; }
    var _Json_addField_fn = function (key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
    }, _Json_addField = F3(_Json_addField_fn);
    function _Json_addEntry(func) {
        return F2(function (entry, array) {
            array.push(_Json_unwrap(func(entry)));
            return array;
        });
    }
    var _Json_encodeNull = _Json_wrap(null);
    function _Scheduler_succeed(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Scheduler_fail(error) {
        return {
            $: 1,
            a: error
        };
    }
    function _Scheduler_binding(callback) {
        return {
            $: 2,
            b: callback,
            c: null
        };
    }
    var _Scheduler_andThen_fn = function (callback, task) {
        return {
            $: 3,
            b: callback,
            d: task
        };
    }, _Scheduler_andThen = F2(_Scheduler_andThen_fn);
    var _Scheduler_onError_fn = function (callback, task) {
        return {
            $: 4,
            b: callback,
            d: task
        };
    }, _Scheduler_onError = F2(_Scheduler_onError_fn);
    function _Scheduler_receive(callback) {
        return {
            $: 5,
            b: callback
        };
    }
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
        var proc = {
            $: 0,
            e: _Scheduler_guid++,
            f: task,
            g: null,
            h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
    }
    function _Scheduler_spawn(task) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
    }
    function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
    }
    var _Scheduler_send_fn = function (proc, msg) {
        return _Scheduler_binding(function (callback) {
            _Scheduler_rawSend(proc, msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Scheduler_send = F2(_Scheduler_send_fn);
    function _Scheduler_kill(proc) {
        return _Scheduler_binding(function (callback) {
            var task = proc.f;
            if (task.$ === 2 && task.c) {
                task.c();
            }
            proc.f = null;
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) {
            return;
        }
        _Scheduler_working = true;
        while (proc = _Scheduler_queue.shift()) {
            _Scheduler_step(proc);
        }
        _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
        while (proc.f) {
            var rootTag = proc.f.$;
            if (rootTag === 0 || rootTag === 1) {
                while (proc.g && proc.g.$ !== rootTag) {
                    proc.g = proc.g.i;
                }
                if (!proc.g) {
                    return;
                }
                proc.f = proc.g.b(proc.f.a);
                proc.g = proc.g.i;
            }
            else if (rootTag === 2) {
                proc.f.c = proc.f.b(function (newRoot) {
                    proc.f = newRoot;
                    _Scheduler_enqueue(proc);
                });
                return;
            }
            else if (rootTag === 5) {
                if (proc.h.length === 0) {
                    return;
                }
                proc.f = proc.f.b(proc.h.shift());
            }
            else {
                proc.g = {
                    $: rootTag === 3 ? 0 : 1,
                    b: proc.f.b,
                    i: proc.g
                };
                proc.f = proc.f.d;
            }
        }
    }
    function _Process_sleep(time) {
        return _Scheduler_binding(function (callback) {
            var id = setTimeout(function () {
                callback(_Scheduler_succeed(_Utils_Tuple0));
            }, time);
            return function () { clearTimeout(id); };
        });
    }
    var _Platform_worker_fn = function (impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.bL, impl.ba, impl.bV, function () { return function () { }; });
    }, _Platform_worker = F4(_Platform_worker_fn);
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = _Json_run_fn(flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2);
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? { ports: ports } : {};
    }
    var _Platform_preload;
    function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
    }
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        for (var key in _Platform_effectManagers) {
            var manager = _Platform_effectManagers[key];
            if (manager.a) {
                ports = ports || {};
                ports[key] = manager.a(key, sendToApp);
            }
            managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
            b: init,
            c: onEffects,
            d: onSelfMsg,
            e: cmdMap,
            f: subMap
        };
    }
    function _Platform_instantiateManager(info, sendToApp) {
        var router = {
            g: sendToApp,
            h: undefined
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
            return _Scheduler_andThen_fn(loop, _Scheduler_receive(function (msg) {
                var value = msg.a;
                if (msg.$ === 0) {
                    return A3(onSelfMsg, router, value, state);
                }
                return cmdMap && subMap
                    ? A4(onEffects, router, value.i, value.j, state)
                    : A3(onEffects, router, cmdMap ? value.i : value.j, state);
            }));
        }
        return router.h = _Scheduler_rawSpawn(_Scheduler_andThen_fn(loop, info.b));
    }
    var _Platform_sendToApp_fn = function (router, msg) {
        return _Scheduler_binding(function (callback) {
            router.g(msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Platform_sendToApp = F2(_Platform_sendToApp_fn);
    var _Platform_sendToSelf_fn = function (router, msg) {
        return _Scheduler_send_fn(router.h, {
            $: 0,
            a: msg
        });
    }, _Platform_sendToSelf = F2(_Platform_sendToSelf_fn);
    function _Platform_leaf(home) {
        return function (value) {
            return {
                $: 1,
                k: home,
                l: value
            };
        };
    }
    function _Platform_batch(list) {
        return {
            $: 2,
            m: list
        };
    }
    var _Platform_map_fn = function (tagger, bag) {
        return {
            $: 3,
            n: tagger,
            o: bag
        };
    }, _Platform_map = F2(_Platform_map_fn);
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
        if (_Platform_effectsActive)
            return;
        _Platform_effectsActive = true;
        for (var fx; fx = _Platform_effectsQueue.shift();) {
            _Platform_dispatchEffects(fx.p, fx.q, fx.r);
        }
        _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for (var home in managers) {
            _Scheduler_rawSend(managers[home], {
                $: "fx",
                a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
            });
        }
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch (bag.$) {
            case 1:
                var home = bag.k;
                var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
                effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
                return;
            case 2:
                for (var list = bag.m; list.b; list = list.b) {
                    _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
                }
                return;
            case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                    s: bag.n,
                    t: taggers
                });
                return;
        }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
            for (var temp = taggers; temp; temp = temp.t) {
                x = temp.s(x);
            }
            return x;
        }
        var map = isCmd
            ? _Platform_effectManagers[home].e
            : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || { i: _List_Nil, j: _List_Nil };
        isCmd
            ? (effects.i = _List_Cons(newEffect, effects.i))
            : (effects.j = _List_Cons(newEffect, effects.j));
        return effects;
    }
    function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) {
            _Debug_crash(3, name);
        }
    }
    function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            e: _Platform_outgoingPortMap,
            u: converter,
            a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap_fn = function (tagger, value) { return value; }, _Platform_outgoingPortMap = F2(_Platform_outgoingPortMap_fn);
    function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, cmdList, state) {
            for (; cmdList.b; cmdList = cmdList.b) {
                var currentSubs = subs;
                var value = _Json_unwrap(converter(cmdList.a));
                for (var i = 0; i < currentSubs.length; i++) {
                    currentSubs[i](value);
                }
            }
            return init;
        });
        function subscribe(callback) {
            subs.push(callback);
        }
        function unsubscribe(callback) {
            subs = subs.slice();
            var index = subs.indexOf(callback);
            if (index >= 0) {
                subs.splice(index, 1);
            }
        }
        return {
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    }
    function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            f: _Platform_incomingPortMap,
            u: converter,
            a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap_fn = function (tagger, finalTagger) {
        return function (value) {
            return tagger(finalTagger(value));
        };
    }, _Platform_incomingPortMap = F2(_Platform_incomingPortMap_fn);
    function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, subList, state) {
            subs = subList;
            return init;
        });
        function send(incomingValue) {
            var result = _Json_run_fn(converter, _Json_wrap(incomingValue));
            $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
            var value = result.a;
            for (var temp = subs; temp.b; temp = temp.b) {
                sendToApp(temp.a(value));
            }
        }
        return { send: send };
    }
    function _Platform_export(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsProd(scope["Elm"], exports)
            : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsProd(obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6)
                    : _Platform_mergeExportsProd(obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
    function _Platform_export_UNUSED(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports)
            : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6, moduleName)
                    : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
    var _VirtualDom_divertHrefToApp;
    var _VirtualDom_doc = typeof document !== "undefined" ? document : {};
    function _VirtualDom_appendChild(parent, child) {
        parent.appendChild(child);
    }
    var _VirtualDom_init_fn = function (virtualNode, flagDecoder, debugMetadata, args) {
        var node = args["node"];
        node.parentNode.replaceChild(_VirtualDom_render(virtualNode, function () { }), node);
        return {};
    }, _VirtualDom_init = F4(_VirtualDom_init_fn);
    function _VirtualDom_text(string) {
        return {
            $: 0,
            a: string
        };
    }
    var _VirtualDom_nodeNS_fn = function (namespace, tag) {
        return F2(function (factList, kidList) {
            for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) {
                var kid = kidList.a;
                descendantsCount += (kid.b || 0);
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 1,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    }, _VirtualDom_nodeNS = F2(_VirtualDom_nodeNS_fn);
    var _VirtualDom_node_a0 = undefined, _VirtualDom_node = _VirtualDom_nodeNS(_VirtualDom_node_a0);
    var _VirtualDom_keyedNodeNS_fn = function (namespace, tag) {
        return F2(function (factList, kidList) {
            for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) {
                var kid = kidList.a;
                descendantsCount += (kid.b.b || 0);
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 2,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    }, _VirtualDom_keyedNodeNS = F2(_VirtualDom_keyedNodeNS_fn);
    var _VirtualDom_keyedNode_a0 = undefined, _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(_VirtualDom_keyedNode_a0);
    function _VirtualDom_custom(factList, model, render, diff) {
        return {
            $: 3,
            d: _VirtualDom_organizeFacts(factList),
            g: model,
            h: render,
            i: diff
        };
    }
    var _VirtualDom_map_fn = function (tagger, node) {
        return {
            $: 4,
            j: tagger,
            k: node,
            b: 1 + (node.b || 0)
        };
    }, _VirtualDom_map = F2(_VirtualDom_map_fn);
    function _VirtualDom_thunk(refs, thunk) {
        return {
            $: 5,
            l: refs,
            m: thunk,
            k: undefined
        };
    }
    var _VirtualDom_lazy_fn = function (func, a) {
        return _VirtualDom_thunk([func, a], function () {
            return func(a);
        });
    }, _VirtualDom_lazy = F2(_VirtualDom_lazy_fn);
    var _VirtualDom_lazy2_fn = function (func, a, b) {
        return _VirtualDom_thunk([func, a, b], function () {
            return A2(func, a, b);
        });
    }, _VirtualDom_lazy2_fn_unwrapped = function (func, a, b) {
        return _VirtualDom_thunk([func, a, b], function () {
            return func(a, b);
        });
    }, _VirtualDom_lazy2 = F3(_VirtualDom_lazy2_fn);
    var _VirtualDom_lazy3_fn = function (func, a, b, c) {
        return _VirtualDom_thunk([func, a, b, c], function () {
            return A3(func, a, b, c);
        });
    }, _VirtualDom_lazy3_fn_unwrapped = function (func, a, b, c) {
        return _VirtualDom_thunk([func, a, b, c], function () {
            return func(a, b, c);
        });
    }, _VirtualDom_lazy3 = F4(_VirtualDom_lazy3_fn);
    var _VirtualDom_lazy4_fn = function (func, a, b, c, d) {
        return _VirtualDom_thunk([func, a, b, c, d], function () {
            return A4(func, a, b, c, d);
        });
    }, _VirtualDom_lazy4_fn_unwrapped = function (func, a, b, c, d) {
        return _VirtualDom_thunk([func, a, b, c, d], function () {
            return func(a, b, c, d);
        });
    }, _VirtualDom_lazy4 = F5(_VirtualDom_lazy4_fn);
    var _VirtualDom_lazy5_fn = function (func, a, b, c, d, e) {
        return _VirtualDom_thunk([func, a, b, c, d, e], function () {
            return A5(func, a, b, c, d, e);
        });
    }, _VirtualDom_lazy5_fn_unwrapped = function (func, a, b, c, d, e) {
        return _VirtualDom_thunk([func, a, b, c, d, e], function () {
            return func(a, b, c, d, e);
        });
    }, _VirtualDom_lazy5 = F6(_VirtualDom_lazy5_fn);
    var _VirtualDom_lazy6_fn = function (func, a, b, c, d, e, f) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f], function () {
            return A6(func, a, b, c, d, e, f);
        });
    }, _VirtualDom_lazy6_fn_unwrapped = function (func, a, b, c, d, e, f) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f], function () {
            return func(a, b, c, d, e, f);
        });
    }, _VirtualDom_lazy6 = F7(_VirtualDom_lazy6_fn);
    var _VirtualDom_lazy7_fn = function (func, a, b, c, d, e, f, g) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function () {
            return A7(func, a, b, c, d, e, f, g);
        });
    }, _VirtualDom_lazy7_fn_unwrapped = function (func, a, b, c, d, e, f, g) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function () {
            return func(a, b, c, d, e, f, g);
        });
    }, _VirtualDom_lazy7 = F8(_VirtualDom_lazy7_fn);
    var _VirtualDom_lazy8_fn = function (func, a, b, c, d, e, f, g, h) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function () {
            return A8(func, a, b, c, d, e, f, g, h);
        });
    }, _VirtualDom_lazy8_fn_unwrapped = function (func, a, b, c, d, e, f, g, h) {
        return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function () {
            return func(a, b, c, d, e, f, g, h);
        });
    }, _VirtualDom_lazy8 = F9(_VirtualDom_lazy8_fn);
    var _VirtualDom_on_fn = function (key, handler) {
        return {
            $: "a0",
            n: key,
            o: handler
        };
    }, _VirtualDom_on = F2(_VirtualDom_on_fn);
    var _VirtualDom_style_fn = function (key, value) {
        return {
            $: "a1",
            n: key,
            o: value
        };
    }, _VirtualDom_style = F2(_VirtualDom_style_fn);
    var _VirtualDom_property_fn = function (key, value) {
        return {
            $: "a2",
            n: key,
            o: value
        };
    }, _VirtualDom_property = F2(_VirtualDom_property_fn);
    var _VirtualDom_attribute_fn = function (key, value) {
        return {
            $: "a3",
            n: key,
            o: value
        };
    }, _VirtualDom_attribute = F2(_VirtualDom_attribute_fn);
    var _VirtualDom_attributeNS_fn = function (namespace, key, value) {
        return {
            $: "a4",
            n: key,
            o: { f: namespace, o: value }
        };
    }, _VirtualDom_attributeNS = F3(_VirtualDom_attributeNS_fn);
    var _VirtualDom_RE_script = /^script$/i;
    var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
    var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
    var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;
    function _VirtualDom_noScript(tag) {
        return _VirtualDom_RE_script.test(tag) ? "p" : tag;
    }
    function _VirtualDom_noOnOrFormAction(key) {
        return _VirtualDom_RE_on_formAction.test(key) ? "data-" + key : key;
    }
    function _VirtualDom_noInnerHtmlOrFormAction(key) {
        return key == "innerHTML" || key == "formAction" ? "data-" + key : key;
    }
    function _VirtualDom_noJavaScriptUri(value) {
        return _VirtualDom_RE_js.test(value)
            ? ""
            : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlUri(value) {
        return _VirtualDom_RE_js_html.test(value)
            ? ""
            : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlJson(value) {
        return (typeof _Json_unwrap(value) === "string" && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
            ? _Json_wrap("") : value;
    }
    var _VirtualDom_mapAttribute_fn = function (func, attr) {
        return (attr.$ === "a0")
            ? _VirtualDom_on_fn(attr.n, _VirtualDom_mapHandler(func, attr.o)) : attr;
    }, _VirtualDom_mapAttribute = F2(_VirtualDom_mapAttribute_fn);
    function _VirtualDom_mapHandler(func, handler) {
        var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
        return {
            $: handler.$,
            a: !tag
                ? _Json_map1_fn(func, handler.a) : _Json_map2_fn(tag < 3
                ? _VirtualDom_mapEventTuple
                : _VirtualDom_mapEventRecord, $elm$json$Json$Decode$succeed(func), handler.a)
        };
    }
    var _VirtualDom_mapEventTuple_fn = function (func, tuple) {
        return _Utils_Tuple2(func(tuple.a), tuple.b);
    }, _VirtualDom_mapEventTuple = F2(_VirtualDom_mapEventTuple_fn);
    var _VirtualDom_mapEventRecord_fn = function (func, record) {
        return {
            c5: func(record.c5),
            gE: record.gE,
            gs: record.gs
        };
    }, _VirtualDom_mapEventRecord = F2(_VirtualDom_mapEventRecord_fn);
    function _VirtualDom_organizeFacts(factList) {
        for (var facts = {}; factList.b; factList = factList.b) {
            var entry = factList.a;
            var tag = entry.$;
            var key = entry.n;
            var value = entry.o;
            if (tag === "a2") {
                (key === "className")
                    ? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
                    : facts[key] = _Json_unwrap(value);
                continue;
            }
            var subFacts = facts[tag] || (facts[tag] = {});
            (tag === "a3" && key === "class")
                ? _VirtualDom_addClass(subFacts, key, value)
                : subFacts[key] = value;
        }
        return facts;
    }
    function _VirtualDom_addClass(object, key, newClass) {
        var classes = object[key];
        object[key] = classes ? classes + " " + newClass : newClass;
    }
    function _VirtualDom_render(vNode, eventNode) {
        var tag = vNode.$;
        if (tag === 5) {
            return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
        }
        if (tag === 0) {
            return _VirtualDom_doc.createTextNode(vNode.a);
        }
        if (tag === 4) {
            var subNode = vNode.k;
            var tagger = vNode.j;
            while (subNode.$ === 4) {
                typeof tagger !== "object"
                    ? tagger = [tagger, subNode.j]
                    : tagger.push(subNode.j);
                subNode = subNode.k;
            }
            var subEventRoot = { j: tagger, p: eventNode };
            var domNode = _VirtualDom_render(subNode, subEventRoot);
            domNode.elm_event_node_ref = subEventRoot;
            return domNode;
        }
        if (tag === 3) {
            var domNode = vNode.h(vNode.g);
            _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
            return domNode;
        }
        var domNode = vNode.f
            ? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
            : _VirtualDom_doc.createElement(vNode.c);
        if (_VirtualDom_divertHrefToApp && vNode.c == "a") {
            domNode.addEventListener("click", _VirtualDom_divertHrefToApp(domNode));
        }
        _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
        for (var kids = vNode.e, i = 0; i < kids.length; i++) {
            _VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
        }
        return domNode;
    }
    function _VirtualDom_applyFacts(domNode, eventNode, facts) {
        for (var key in facts) {
            var value = facts[key];
            key === "a1"
                ? _VirtualDom_applyStyles(domNode, value)
                :
                    key === "a0"
                        ? _VirtualDom_applyEvents(domNode, eventNode, value)
                        :
                            key === "a3"
                                ? _VirtualDom_applyAttrs(domNode, value)
                                :
                                    key === "a4"
                                        ? _VirtualDom_applyAttrsNS(domNode, value)
                                        :
                                            ((key !== "value" && key !== "checked") || domNode[key] !== value) && (domNode[key] = value);
        }
    }
    function _VirtualDom_applyStyles(domNode, styles) {
        var domNodeStyle = domNode.style;
        for (var key in styles) {
            domNodeStyle[key] = styles[key];
        }
    }
    function _VirtualDom_applyAttrs(domNode, attrs) {
        for (var key in attrs) {
            var value = attrs[key];
            typeof value !== "undefined"
                ? domNode.setAttribute(key, value)
                : domNode.removeAttribute(key);
        }
    }
    function _VirtualDom_applyAttrsNS(domNode, nsAttrs) {
        for (var key in nsAttrs) {
            var pair = nsAttrs[key];
            var namespace = pair.f;
            var value = pair.o;
            typeof value !== "undefined"
                ? domNode.setAttributeNS(namespace, key, value)
                : domNode.removeAttributeNS(namespace, key);
        }
    }
    function _VirtualDom_applyEvents(domNode, eventNode, events) {
        var allCallbacks = domNode.elmFs || (domNode.elmFs = {});
        for (var key in events) {
            var newHandler = events[key];
            var oldCallback = allCallbacks[key];
            if (!newHandler) {
                domNode.removeEventListener(key, oldCallback);
                allCallbacks[key] = undefined;
                continue;
            }
            if (oldCallback) {
                var oldHandler = oldCallback.q;
                if (oldHandler.$ === newHandler.$) {
                    oldCallback.q = newHandler;
                    continue;
                }
                domNode.removeEventListener(key, oldCallback);
            }
            oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
            domNode.addEventListener(key, oldCallback, _VirtualDom_passiveSupported
                && { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 });
            allCallbacks[key] = oldCallback;
        }
    }
    var _VirtualDom_passiveSupported;
    try {
        window.addEventListener("t", null, Object.defineProperty({}, "passive", {
            get: function () { _VirtualDom_passiveSupported = true; }
        }));
    }
    catch (e) { }
    function _VirtualDom_makeCallback(eventNode, initialHandler) {
        function callback(event) {
            var handler = callback.q;
            var result = _Json_runHelp(handler.a, event);
            if (!$elm$core$Result$isOk(result)) {
                return;
            }
            var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
            var value = result.a;
            var message = !tag ? value : tag < 3 ? value.a : value.c5;
            var stopPropagation = tag == 1 ? value.b : tag == 3 && value.gE;
            var currentEventNode = (stopPropagation && event.stopPropagation(),
                (tag == 2 ? value.b : tag == 3 && value.gs) && event.preventDefault(),
                eventNode);
            var tagger;
            var i;
            while (tagger = currentEventNode.j) {
                if (typeof tagger == "function") {
                    message = tagger(message);
                }
                else {
                    for (var i = tagger.length; i--;) {
                        message = tagger[i](message);
                    }
                }
                currentEventNode = currentEventNode.p;
            }
            currentEventNode(message, stopPropagation);
        }
        callback.q = initialHandler;
        return callback;
    }
    function _VirtualDom_equalEvents(x, y) {
        return x.$ == y.$ && _Json_equality(x.a, y.a);
    }
    function _VirtualDom_diff(x, y) {
        var patches = [];
        _VirtualDom_diffHelp(x, y, patches, 0);
        return patches;
    }
    function _VirtualDom_pushPatch(patches, type, index, data) {
        var patch = {
            $: type,
            r: index,
            s: data,
            t: undefined,
            u: undefined
        };
        patches.push(patch);
        return patch;
    }
    function _VirtualDom_diffHelp(x, y, patches, index) {
        if (x === y) {
            return;
        }
        var xType = x.$;
        var yType = y.$;
        if (xType !== yType) {
            if (xType === 1 && yType === 2) {
                y = _VirtualDom_dekey(y);
                yType = 1;
            }
            else {
                _VirtualDom_pushPatch(patches, 0, index, y);
                return;
            }
        }
        switch (yType) {
            case 5:
                var xRefs = x.l;
                var yRefs = y.l;
                var i = xRefs.length;
                var same = i === yRefs.length;
                while (same && i--) {
                    same = xRefs[i] === yRefs[i];
                }
                if (same) {
                    y.k = x.k;
                    return;
                }
                y.k = y.m();
                var subPatches = [];
                _VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
                subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
                return;
            case 4:
                var xTaggers = x.j;
                var yTaggers = y.j;
                var nesting = false;
                var xSubNode = x.k;
                while (xSubNode.$ === 4) {
                    nesting = true;
                    typeof xTaggers !== "object"
                        ? xTaggers = [xTaggers, xSubNode.j]
                        : xTaggers.push(xSubNode.j);
                    xSubNode = xSubNode.k;
                }
                var ySubNode = y.k;
                while (ySubNode.$ === 4) {
                    nesting = true;
                    typeof yTaggers !== "object"
                        ? yTaggers = [yTaggers, ySubNode.j]
                        : yTaggers.push(ySubNode.j);
                    ySubNode = ySubNode.k;
                }
                if (nesting && xTaggers.length !== yTaggers.length) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers) {
                    _VirtualDom_pushPatch(patches, 2, index, yTaggers);
                }
                _VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
                return;
            case 0:
                if (x.a !== y.a) {
                    _VirtualDom_pushPatch(patches, 3, index, y.a);
                }
                return;
            case 1:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
                return;
            case 2:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
                return;
            case 3:
                if (x.h !== y.h) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
                factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
                var patch = y.i(x.g, y.g);
                patch && _VirtualDom_pushPatch(patches, 5, index, patch);
                return;
        }
    }
    function _VirtualDom_pairwiseRefEqual(as, bs) {
        for (var i = 0; i < as.length; i++) {
            if (as[i] !== bs[i]) {
                return false;
            }
        }
        return true;
    }
    function _VirtualDom_diffNodes(x, y, patches, index, diffKids) {
        if (x.c !== y.c || x.f !== y.f) {
            _VirtualDom_pushPatch(patches, 0, index, y);
            return;
        }
        var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
        factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
        diffKids(x, y, patches, index);
    }
    function _VirtualDom_diffFacts(x, y, category) {
        var diff;
        for (var xKey in x) {
            if (xKey === "a1" || xKey === "a0" || xKey === "a3" || xKey === "a4") {
                var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
                if (subDiff) {
                    diff = diff || {};
                    diff[xKey] = subDiff;
                }
                continue;
            }
            if (!(xKey in y)) {
                diff = diff || {};
                diff[xKey] =
                    !category
                        ? (typeof x[xKey] === "string" ? "" : null)
                        :
                            (category === "a1")
                                ? ""
                                :
                                    (category === "a0" || category === "a3")
                                        ? undefined
                                        :
                                            { f: x[xKey].f, o: undefined };
                continue;
            }
            var xValue = x[xKey];
            var yValue = y[xKey];
            if (xValue === yValue && xKey !== "value" && xKey !== "checked"
                || category === "a0" && _VirtualDom_equalEvents(xValue, yValue)) {
                continue;
            }
            diff = diff || {};
            diff[xKey] = yValue;
        }
        for (var yKey in y) {
            if (!(yKey in x)) {
                diff = diff || {};
                diff[yKey] = y[yKey];
            }
        }
        return diff;
    }
    function _VirtualDom_diffKids(xParent, yParent, patches, index) {
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        if (xLen > yLen) {
            _VirtualDom_pushPatch(patches, 6, index, {
                v: yLen,
                i: xLen - yLen
            });
        }
        else if (xLen < yLen) {
            _VirtualDom_pushPatch(patches, 7, index, {
                v: xLen,
                e: yKids
            });
        }
        for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++) {
            var xKid = xKids[i];
            _VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
            index += xKid.b || 0;
        }
    }
    function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex) {
        var localPatches = [];
        var changes = {};
        var inserts = [];
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        var xIndex = 0;
        var yIndex = 0;
        var index = rootIndex;
        while (xIndex < xLen && yIndex < yLen) {
            var x = xKids[xIndex];
            var y = yKids[yIndex];
            var xKey = x.a;
            var yKey = y.a;
            var xNode = x.b;
            var yNode = y.b;
            var newMatch = undefined;
            var oldMatch = undefined;
            if (xKey === yKey) {
                index++;
                _VirtualDom_diffHelp(xNode, yNode, localPatches, index);
                index += xNode.b || 0;
                xIndex++;
                yIndex++;
                continue;
            }
            var xNext = xKids[xIndex + 1];
            var yNext = yKids[yIndex + 1];
            if (xNext) {
                var xNextKey = xNext.a;
                var xNextNode = xNext.b;
                oldMatch = yKey === xNextKey;
            }
            if (yNext) {
                var yNextKey = yNext.a;
                var yNextNode = yNext.b;
                newMatch = xKey === yNextKey;
            }
            if (newMatch && oldMatch) {
                index++;
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                _VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            if (newMatch) {
                index++;
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                index += xNode.b || 0;
                xIndex += 1;
                yIndex += 2;
                continue;
            }
            if (oldMatch) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 1;
                continue;
            }
            if (xNext && xNextKey === yNextKey) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            break;
        }
        while (xIndex < xLen) {
            index++;
            var x = xKids[xIndex];
            var xNode = x.b;
            _VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
            index += xNode.b || 0;
            xIndex++;
        }
        while (yIndex < yLen) {
            var endInserts = endInserts || [];
            var y = yKids[yIndex];
            _VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
            yIndex++;
        }
        if (localPatches.length > 0 || inserts.length > 0 || endInserts) {
            _VirtualDom_pushPatch(patches, 8, rootIndex, {
                w: localPatches,
                x: inserts,
                y: endInserts
            });
        }
    }
    var _VirtualDom_POSTFIX = "_elmW6BL";
    function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts) {
        var entry = changes[key];
        if (!entry) {
            entry = {
                c: 0,
                z: vnode,
                r: yIndex,
                s: undefined
            };
            inserts.push({ r: yIndex, A: entry });
            changes[key] = entry;
            return;
        }
        if (entry.c === 1) {
            inserts.push({ r: yIndex, A: entry });
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
            entry.r = yIndex;
            entry.s.s = {
                w: subPatches,
                A: entry
            };
            return;
        }
        _VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
    }
    function _VirtualDom_removeNode(changes, localPatches, key, vnode, index) {
        var entry = changes[key];
        if (!entry) {
            var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);
            changes[key] = {
                c: 1,
                z: vnode,
                r: index,
                s: patch
            };
            return;
        }
        if (entry.c === 0) {
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(vnode, entry.z, subPatches, index);
            _VirtualDom_pushPatch(localPatches, 9, index, {
                w: subPatches,
                A: entry
            });
            return;
        }
        _VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
    }
    function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode) {
        _VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
    }
    function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {
        var patch = patches[i];
        var index = patch.r;
        while (index === low) {
            var patchType = patch.$;
            if (patchType === 1) {
                _VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
            }
            else if (patchType === 8) {
                patch.t = domNode;
                patch.u = eventNode;
                var subPatches = patch.s.w;
                if (subPatches.length > 0) {
                    _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                }
            }
            else if (patchType === 9) {
                patch.t = domNode;
                patch.u = eventNode;
                var data = patch.s;
                if (data) {
                    data.A.s = domNode;
                    var subPatches = data.w;
                    if (subPatches.length > 0) {
                        _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                    }
                }
            }
            else {
                patch.t = domNode;
                patch.u = eventNode;
            }
            i++;
            if (!(patch = patches[i]) || (index = patch.r) > high) {
                return i;
            }
        }
        var tag = vNode.$;
        if (tag === 4) {
            var subNode = vNode.k;
            while (subNode.$ === 4) {
                subNode = subNode.k;
            }
            return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
        }
        var vKids = vNode.e;
        var childNodes = domNode.childNodes;
        for (var j = 0; j < vKids.length; j++) {
            low++;
            var vKid = tag === 1 ? vKids[j] : vKids[j].b;
            var nextLow = low + (vKid.b || 0);
            if (low <= index && index <= nextLow) {
                i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
                if (!(patch = patches[i]) || (index = patch.r) > high) {
                    return i;
                }
            }
            low = nextLow;
        }
        return i;
    }
    function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {
        if (patches.length === 0) {
            return rootDomNode;
        }
        _VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
        return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
    }
    function _VirtualDom_applyPatchesHelp(rootDomNode, patches) {
        for (var i = 0; i < patches.length; i++) {
            var patch = patches[i];
            var localDomNode = patch.t;
            var newNode = _VirtualDom_applyPatch(localDomNode, patch);
            if (localDomNode === rootDomNode) {
                rootDomNode = newNode;
            }
        }
        return rootDomNode;
    }
    function _VirtualDom_applyPatch(domNode, patch) {
        switch (patch.$) {
            case 0:
                return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);
            case 4:
                _VirtualDom_applyFacts(domNode, patch.u, patch.s);
                return domNode;
            case 3:
                domNode.replaceData(0, domNode.length, patch.s);
                return domNode;
            case 1:
                return _VirtualDom_applyPatchesHelp(domNode, patch.s);
            case 2:
                if (domNode.elm_event_node_ref) {
                    domNode.elm_event_node_ref.j = patch.s;
                }
                else {
                    domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
                }
                return domNode;
            case 6:
                var data = patch.s;
                for (var i = 0; i < data.i; i++) {
                    domNode.removeChild(domNode.childNodes[data.v]);
                }
                return domNode;
            case 7:
                var data = patch.s;
                var kids = data.e;
                var i = data.v;
                var theEnd = domNode.childNodes[i];
                for (; i < kids.length; i++) {
                    domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
                }
                return domNode;
            case 9:
                var data = patch.s;
                if (!data) {
                    domNode.parentNode.removeChild(domNode);
                    return domNode;
                }
                var entry = data.A;
                if (typeof entry.r !== "undefined") {
                    domNode.parentNode.removeChild(domNode);
                }
                entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
                return domNode;
            case 8:
                return _VirtualDom_applyPatchReorder(domNode, patch);
            case 5:
                return patch.s(domNode);
            default:
                _Debug_crash(10);
        }
    }
    function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode) {
        var parentNode = domNode.parentNode;
        var newNode = _VirtualDom_render(vNode, eventNode);
        if (!newNode.elm_event_node_ref) {
            newNode.elm_event_node_ref = domNode.elm_event_node_ref;
        }
        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode);
        }
        return newNode;
    }
    function _VirtualDom_applyPatchReorder(domNode, patch) {
        var data = patch.s;
        var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);
        domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);
        var inserts = data.x;
        for (var i = 0; i < inserts.length; i++) {
            var insert = inserts[i];
            var entry = insert.A;
            var node = entry.c === 2
                ? entry.s
                : _VirtualDom_render(entry.z, patch.u);
            domNode.insertBefore(node, domNode.childNodes[insert.r]);
        }
        if (frag) {
            _VirtualDom_appendChild(domNode, frag);
        }
        return domNode;
    }
    function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch) {
        if (!endInserts) {
            return;
        }
        var frag = _VirtualDom_doc.createDocumentFragment();
        for (var i = 0; i < endInserts.length; i++) {
            var insert = endInserts[i];
            var entry = insert.A;
            _VirtualDom_appendChild(frag, entry.c === 2
                ? entry.s
                : _VirtualDom_render(entry.z, patch.u));
        }
        return frag;
    }
    function _VirtualDom_virtualize(node) {
        if (node.nodeType === 3) {
            return _VirtualDom_text(node.textContent);
        }
        if (node.nodeType !== 1) {
            return _VirtualDom_text("");
        }
        var attrList = _List_Nil;
        var attrs = node.attributes;
        for (var i = attrs.length; i--;) {
            var attr = attrs[i];
            var name = attr.name;
            var value = attr.value;
            attrList = _List_Cons(_VirtualDom_attribute_fn(name, value), attrList);
        }
        var tag = node.tagName.toLowerCase();
        var kidList = _List_Nil;
        var kids = node.childNodes;
        for (var i = kids.length; i--;) {
            kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
        }
        return A3(_VirtualDom_node, tag, attrList, kidList);
    }
    function _VirtualDom_dekey(keyedNode) {
        var keyedKids = keyedNode.e;
        var len = keyedKids.length;
        var kids = new Array(len);
        for (var i = 0; i < len; i++) {
            kids[i] = keyedKids[i].b;
        }
        return {
            $: 1,
            c: keyedNode.c,
            d: keyedNode.d,
            e: kids,
            f: keyedNode.f,
            b: keyedNode.b
        };
    }
    var _Bitwise_and_fn = function (a, b) {
        return a & b;
    }, _Bitwise_and = F2(_Bitwise_and_fn);
    var _Bitwise_or_fn = function (a, b) {
        return a | b;
    }, _Bitwise_or = F2(_Bitwise_or_fn);
    var _Bitwise_xor_fn = function (a, b) {
        return a ^ b;
    }, _Bitwise_xor = F2(_Bitwise_xor_fn);
    function _Bitwise_complement(a) {
        return ~a;
    }
    ;
    var _Bitwise_shiftLeftBy_fn = function (offset, a) {
        return a << offset;
    }, _Bitwise_shiftLeftBy = F2(_Bitwise_shiftLeftBy_fn);
    var _Bitwise_shiftRightBy_fn = function (offset, a) {
        return a >> offset;
    }, _Bitwise_shiftRightBy = F2(_Bitwise_shiftRightBy_fn);
    var _Bitwise_shiftRightZfBy_fn = function (offset, a) {
        return a >>> offset;
    }, _Bitwise_shiftRightZfBy = F2(_Bitwise_shiftRightZfBy_fn);
    var _Parser_isSubString_fn = function (smallString, offset, row, col, bigString) {
        var smallLength = smallString.length;
        var isGood = offset + smallLength <= bigString.length;
        for (var i = 0; isGood && i < smallLength;) {
            var code = bigString.charCodeAt(offset);
            isGood =
                smallString[i++] === bigString[offset++]
                    && (code === 10
                        ? (row++, col = 1)
                        : (col++, (code & 63488) === 55296 ? smallString[i++] === bigString[offset++] : 1));
        }
        return _Utils_Tuple3(isGood ? offset : -1, row, col);
    }, _Parser_isSubString = F5(_Parser_isSubString_fn);
    var _Parser_isSubChar_fn = function (predicate, offset, string) {
        return (string.length <= offset
            ? -1
            :
                (string.charCodeAt(offset) & 63488) === 55296
                    ? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
                    :
                        (predicate(_Utils_chr(string[offset]))
                            ? ((string[offset] === "\n") ? -2 : (offset + 1))
                            : -1));
    }, _Parser_isSubChar = F3(_Parser_isSubChar_fn);
    var _Parser_isAsciiCode_fn = function (code, offset, string) {
        return string.charCodeAt(offset) === code;
    }, _Parser_isAsciiCode = F3(_Parser_isAsciiCode_fn);
    var _Parser_chompBase10_fn = function (offset, string) {
        for (; offset < string.length; offset++) {
            var code = string.charCodeAt(offset);
            if (code < 48 || 57 < code) {
                return offset;
            }
        }
        return offset;
    }, _Parser_chompBase10 = F2(_Parser_chompBase10_fn);
    var _Parser_consumeBase_fn = function (base, offset, string) {
        for (var total = 0; offset < string.length; offset++) {
            var digit = string.charCodeAt(offset) - 48;
            if (digit < 0 || base <= digit)
                break;
            total = base * total + digit;
        }
        return _Utils_Tuple2(offset, total);
    }, _Parser_consumeBase = F3(_Parser_consumeBase_fn);
    var _Parser_consumeBase16_fn = function (offset, string) {
        for (var total = 0; offset < string.length; offset++) {
            var code = string.charCodeAt(offset);
            if (48 <= code && code <= 57) {
                total = 16 * total + code - 48;
            }
            else if (65 <= code && code <= 70) {
                total = 16 * total + code - 55;
            }
            else if (97 <= code && code <= 102) {
                total = 16 * total + code - 87;
            }
            else {
                break;
            }
        }
        return _Utils_Tuple2(offset, total);
    }, _Parser_consumeBase16 = F2(_Parser_consumeBase16_fn);
    var _Parser_findSubString_fn = function (smallString, offset, row, col, bigString) {
        var newOffset = bigString.indexOf(smallString, offset);
        var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;
        while (offset < target) {
            var code = bigString.charCodeAt(offset++);
            code === 10
                ? (col = 1, row++)
                : (col++, (code & 63488) === 55296 && offset++);
        }
        return _Utils_Tuple3(newOffset, row, col);
    }, _Parser_findSubString = F5(_Parser_findSubString_fn);
    var _Regex_never = /.^/;
    var _Regex_fromStringWith_fn = function (options, string) {
        var flags = "g";
        if (options.jL) {
            flags += "m";
        }
        if (options.iQ) {
            flags += "i";
        }
        try {
            return $elm$core$Maybe$Just(new RegExp(string, flags));
        }
        catch (error) {
            return $elm$core$Maybe$Nothing;
        }
    }, _Regex_fromStringWith = F2(_Regex_fromStringWith_fn);
    var _Regex_contains_fn = function (re, string) {
        return string.match(re) !== null;
    }, _Regex_contains = F2(_Regex_contains_fn);
    var _Regex_findAtMost_fn = function (n, re, str) {
        var out = [];
        var number = 0;
        var string = str;
        var lastIndex = re.lastIndex;
        var prevLastIndex = -1;
        var result;
        while (number++ < n && (result = re.exec(string))) {
            if (prevLastIndex == re.lastIndex)
                break;
            var i = result.length - 1;
            var subs = new Array(i);
            while (i > 0) {
                var submatch = result[i];
                subs[--i] = submatch
                    ? $elm$core$Maybe$Just(submatch)
                    : $elm$core$Maybe$Nothing;
            }
            out.push($elm$regex$Regex$Match_fn(result[0], result.index, number, _List_fromArray(subs)));
            prevLastIndex = re.lastIndex;
        }
        re.lastIndex = lastIndex;
        return _List_fromArray(out);
    }, _Regex_findAtMost = F3(_Regex_findAtMost_fn);
    var _Regex_replaceAtMost_fn = function (n, re, replacer, string) {
        var count = 0;
        function jsReplacer(match) {
            if (count++ >= n) {
                return match;
            }
            var i = arguments.length - 3;
            var submatches = new Array(i);
            while (i > 0) {
                var submatch = arguments[i];
                submatches[--i] = submatch
                    ? $elm$core$Maybe$Just(submatch)
                    : $elm$core$Maybe$Nothing;
            }
            return replacer($elm$regex$Regex$Match_fn(match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
        }
        return string.replace(re, jsReplacer);
    }, _Regex_replaceAtMost = F4(_Regex_replaceAtMost_fn);
    var _Regex_splitAtMost_fn = function (n, re, str) {
        var string = str;
        var out = [];
        var start = re.lastIndex;
        var restoreLastIndex = re.lastIndex;
        while (n--) {
            var result = re.exec(string);
            if (!result)
                break;
            out.push(string.slice(start, result.index));
            start = re.lastIndex;
        }
        out.push(string.slice(start));
        re.lastIndex = restoreLastIndex;
        return _List_fromArray(out);
    }, _Regex_splitAtMost = F3(_Regex_splitAtMost_fn);
    var _Regex_infinity = Infinity;
    function _Url_percentEncode(string) {
        return encodeURIComponent(string);
    }
    function _Url_percentDecode(string) {
        try {
            return $elm$core$Maybe$Just(decodeURIComponent(string));
        }
        catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }
    function _Bytes_width(bytes) {
        return bytes.byteLength;
    }
    var _Bytes_getHostEndianness_fn = function (le, be) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
        });
    }, _Bytes_getHostEndianness = F2(_Bytes_getHostEndianness_fn);
    function _Bytes_encode(encoder) {
        var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
        $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
        return mutableBytes;
    }
    var _Bytes_write_i8_fn = function (mb, i, n) { mb.setInt8(i, n); return i + 1; }, _Bytes_write_i8 = F3(_Bytes_write_i8_fn);
    var _Bytes_write_i16_fn = function (mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; }, _Bytes_write_i16 = F4(_Bytes_write_i16_fn);
    var _Bytes_write_i32_fn = function (mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; }, _Bytes_write_i32 = F4(_Bytes_write_i32_fn);
    var _Bytes_write_u8_fn = function (mb, i, n) { mb.setUint8(i, n); return i + 1; }, _Bytes_write_u8 = F3(_Bytes_write_u8_fn);
    var _Bytes_write_u16_fn = function (mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; }, _Bytes_write_u16 = F4(_Bytes_write_u16_fn);
    var _Bytes_write_u32_fn = function (mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; }, _Bytes_write_u32 = F4(_Bytes_write_u32_fn);
    var _Bytes_write_f32_fn = function (mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; }, _Bytes_write_f32 = F4(_Bytes_write_f32_fn);
    var _Bytes_write_f64_fn = function (mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; }, _Bytes_write_f64 = F4(_Bytes_write_f64_fn);
    var _Bytes_write_bytes_fn = function (mb, offset, bytes) {
        for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4) {
            mb.setUint32(offset + i, bytes.getUint32(i));
        }
        for (; i < len; i++) {
            mb.setUint8(offset + i, bytes.getUint8(i));
        }
        return offset + len;
    }, _Bytes_write_bytes = F3(_Bytes_write_bytes_fn);
    function _Bytes_getStringWidth(string) {
        for (var width = 0, i = 0; i < string.length; i++) {
            var code = string.charCodeAt(i);
            width +=
                (code < 128) ? 1 :
                    (code < 2048) ? 2 :
                        (code < 55296 || 56319 < code) ? 3 : (i++, 4);
        }
        return width;
    }
    var _Bytes_write_string_fn = function (mb, offset, string) {
        for (var i = 0; i < string.length; i++) {
            var code = string.charCodeAt(i);
            offset +=
                (code < 128)
                    ? (mb.setUint8(offset, code)
                        , 1)
                    :
                        (code < 2048)
                            ? (mb.setUint16(offset, 49280
                                | (code >>> 6 & 31) << 8
                                | code & 63)
                                , 2)
                            :
                                (code < 55296 || 56319 < code)
                                    ? (mb.setUint16(offset, 57472
                                        | (code >>> 12 & 15) << 8
                                        | code >>> 6 & 63)
                                        , mb.setUint8(offset + 2, 128
                                            | code & 63)
                                        , 3)
                                    :
                                        (code = (code - 55296) * 1024 + string.charCodeAt(++i) - 56320 + 65536
                                            , mb.setUint32(offset, 4034953344
                                                | (code >>> 18 & 7) << 24
                                                | (code >>> 12 & 63) << 16
                                                | (code >>> 6 & 63) << 8
                                                | code & 63)
                                            , 4);
        }
        return offset;
    }, _Bytes_write_string = F3(_Bytes_write_string_fn);
    var _Bytes_decode_fn = function (decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
        }
        catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }, _Bytes_decode_fn_unwrapped = function (decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(decoder(bytes, 0).b);
        }
        catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }, _Bytes_decode = F2(_Bytes_decode_fn);
    var _Bytes_read_i8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); }, _Bytes_read_i8 = F2(_Bytes_read_i8_fn);
    var _Bytes_read_i16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); }, _Bytes_read_i16 = F3(_Bytes_read_i16_fn);
    var _Bytes_read_i32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); }, _Bytes_read_i32 = F3(_Bytes_read_i32_fn);
    var _Bytes_read_u8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); }, _Bytes_read_u8 = F2(_Bytes_read_u8_fn);
    var _Bytes_read_u16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); }, _Bytes_read_u16 = F3(_Bytes_read_u16_fn);
    var _Bytes_read_u32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); }, _Bytes_read_u32 = F3(_Bytes_read_u32_fn);
    var _Bytes_read_f32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); }, _Bytes_read_f32 = F3(_Bytes_read_f32_fn);
    var _Bytes_read_f64_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); }, _Bytes_read_f64 = F3(_Bytes_read_f64_fn);
    var _Bytes_read_bytes_fn = function (len, bytes, offset) {
        return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
    }, _Bytes_read_bytes = F3(_Bytes_read_bytes_fn);
    var _Bytes_read_string_fn = function (len, bytes, offset) {
        var string = "";
        var end = offset + len;
        for (; offset < end;) {
            var byte = bytes.getUint8(offset++);
            string +=
                (byte < 128)
                    ? String.fromCharCode(byte)
                    :
                        ((byte & 224) === 192)
                            ? String.fromCharCode((byte & 31) << 6 | bytes.getUint8(offset++) & 63)
                            :
                                ((byte & 240) === 224)
                                    ? String.fromCharCode((byte & 15) << 12
                                        | (bytes.getUint8(offset++) & 63) << 6
                                        | bytes.getUint8(offset++) & 63)
                                    :
                                        (byte =
                                            ((byte & 7) << 18
                                                | (bytes.getUint8(offset++) & 63) << 12
                                                | (bytes.getUint8(offset++) & 63) << 6
                                                | bytes.getUint8(offset++) & 63) - 65536
                                            , String.fromCharCode(Math.floor(byte / 1024) + 55296, byte % 1024 + 56320));
        }
        return _Utils_Tuple2(offset, string);
    }, _Bytes_read_string = F3(_Bytes_read_string_fn);
    var _Bytes_decodeFailure_fn = function () { throw 0; }, _Bytes_decodeFailure = F2(_Bytes_decodeFailure_fn);
    var _Debugger_element;
    var _Browser_element = _Debugger_element || F4(function (impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.bL, impl.ba, impl.bV, function (sendToApp, initialModel) {
            var view = impl.E;
            var domNode = args["node"];
            var currNode = _VirtualDom_virtualize(domNode);
            return _Browser_makeAnimator(initialModel, function (model) {
                var nextNode = view(model);
                var patches = _VirtualDom_diff(currNode, nextNode);
                domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
                currNode = nextNode;
            });
        });
    });
    var _Debugger_document;
    var _Browser_document = _Debugger_document || F4(function (impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.bL, impl.ba, impl.bV, function (sendToApp, initialModel) {
            var divertHrefToApp = impl.gB && impl.gB(sendToApp);
            var view = impl.E;
            var title = _VirtualDom_doc.title;
            var bodyNode = _VirtualDom_doc.body;
            var currNode = _VirtualDom_virtualize(bodyNode);
            return _Browser_makeAnimator(initialModel, function (model) {
                _VirtualDom_divertHrefToApp = divertHrefToApp;
                var doc = view(model);
                var nextNode = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "body")(_List_Nil)(doc.iL);
                var patches = _VirtualDom_diff(currNode, nextNode);
                bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
                currNode = nextNode;
                _VirtualDom_divertHrefToApp = 0;
                (title !== doc.dz) && (_VirtualDom_doc.title = title = doc.dz);
            });
        });
    });
    var _Browser_cancelAnimationFrame = typeof cancelAnimationFrame !== "undefined"
        ? cancelAnimationFrame
        : function (id) { clearTimeout(id); };
    var _Browser_requestAnimationFrame = typeof requestAnimationFrame !== "undefined"
        ? requestAnimationFrame
        : function (callback) { return setTimeout(callback, 1000 / 60); };
    function _Browser_makeAnimator(model, draw) {
        draw(model);
        var state = 0;
        function updateIfNeeded() {
            state = state === 1
                ? 0
                : (_Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1);
        }
        return function (nextModel, isSync) {
            model = nextModel;
            isSync
                ? (draw(model),
                    state === 2 && (state = 1))
                : (state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
                    state = 2);
        };
    }
    function _Browser_application(impl) {
        var onUrlChange = impl.j$;
        var onUrlRequest = impl.j0;
        var key = function () { key.a(onUrlChange(_Browser_getUrl())); };
        return _Browser_document({
            gB: function (sendToApp) {
                key.a = sendToApp;
                _Browser_window.addEventListener("popstate", key);
                _Browser_window.navigator.userAgent.indexOf("Trident") < 0 || _Browser_window.addEventListener("hashchange", key);
                return F2(function (domNode, event) {
                    if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute("download")) {
                        event.preventDefault();
                        var href = domNode.href;
                        var curr = _Browser_getUrl();
                        var next = $elm$url$Url$fromString(href).a;
                        sendToApp(onUrlRequest((next
                            && curr.e$ === next.e$
                            && curr.eG === next.eG
                            && curr.eW.a === next.eW.a)
                            ? $elm$browser$Browser$Internal(next)
                            : $elm$browser$Browser$External(href)));
                    }
                });
            },
            bL: function (flags) {
                return A3(impl.bL, flags, _Browser_getUrl(), key);
            },
            E: impl.E,
            ba: impl.ba,
            bV: impl.bV
        });
    }
    function _Browser_getUrl() {
        return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
    }
    var _Browser_go_fn = function (key, n) {
        return $elm$core$Task$perform_fn($elm$core$Basics$never, _Scheduler_binding(function () {
            n && history.go(n);
            key();
        }));
    }, _Browser_go = F2(_Browser_go_fn);
    var _Browser_pushUrl_fn = function (key, url) {
        return $elm$core$Task$perform_fn($elm$core$Basics$never, _Scheduler_binding(function () {
            history.pushState({}, "", url);
            key();
        }));
    }, _Browser_pushUrl = F2(_Browser_pushUrl_fn);
    var _Browser_replaceUrl_fn = function (key, url) {
        return $elm$core$Task$perform_fn($elm$core$Basics$never, _Scheduler_binding(function () {
            history.replaceState({}, "", url);
            key();
        }));
    }, _Browser_replaceUrl = F2(_Browser_replaceUrl_fn);
    var _Browser_fakeNode = { addEventListener: function () { }, removeEventListener: function () { } };
    var _Browser_doc = typeof document !== "undefined" ? document : _Browser_fakeNode;
    var _Browser_window = typeof window !== "undefined" ? window : _Browser_fakeNode;
    var _Browser_on_fn = function (node, eventName, sendToSelf) {
        return _Scheduler_spawn(_Scheduler_binding(function (callback) {
            function handler(event) { _Scheduler_rawSpawn(sendToSelf(event)); }
            node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
            return function () { node.removeEventListener(eventName, handler); };
        }));
    }, _Browser_on = F3(_Browser_on_fn);
    var _Browser_decodeEvent_fn = function (decoder, event) {
        var result = _Json_runHelp(decoder, event);
        return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
    }, _Browser_decodeEvent = F2(_Browser_decodeEvent_fn);
    function _Browser_visibilityInfo() {
        return (typeof _VirtualDom_doc.hidden !== "undefined")
            ? { jq: "hidden", iR: "visibilitychange" }
            :
                (typeof _VirtualDom_doc.mozHidden !== "undefined")
                    ? { jq: "mozHidden", iR: "mozvisibilitychange" }
                    :
                        (typeof _VirtualDom_doc.msHidden !== "undefined")
                            ? { jq: "msHidden", iR: "msvisibilitychange" }
                            :
                                (typeof _VirtualDom_doc.webkitHidden !== "undefined")
                                    ? { jq: "webkitHidden", iR: "webkitvisibilitychange" }
                                    : { jq: "hidden", iR: "visibilitychange" };
    }
    function _Browser_rAF() {
        return _Scheduler_binding(function (callback) {
            var id = _Browser_requestAnimationFrame(function () {
                callback(_Scheduler_succeed(Date.now()));
            });
            return function () {
                _Browser_cancelAnimationFrame(id);
            };
        });
    }
    function _Browser_now() {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(Date.now()));
        });
    }
    function _Browser_withNode(id, doStuff) {
        return _Scheduler_binding(function (callback) {
            _Browser_requestAnimationFrame(function () {
                var node = document.getElementById(id);
                callback(node
                    ? _Scheduler_succeed(doStuff(node))
                    : _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id)));
            });
        });
    }
    function _Browser_withWindow(doStuff) {
        return _Scheduler_binding(function (callback) {
            _Browser_requestAnimationFrame(function () {
                callback(_Scheduler_succeed(doStuff()));
            });
        });
    }
    var _Browser_call_fn = function (functionName, id) {
        return _Browser_withNode(id, function (node) {
            node[functionName]();
            return _Utils_Tuple0;
        });
    }, _Browser_call = F2(_Browser_call_fn);
    function _Browser_getViewport() {
        return {
            dq: _Browser_getScene(),
            dE: {
                dG: _Browser_window.pageXOffset,
                dH: _Browser_window.pageYOffset,
                b$: _Browser_doc.documentElement.clientWidth,
                bK: _Browser_doc.documentElement.clientHeight
            }
        };
    }
    function _Browser_getScene() {
        var body = _Browser_doc.body;
        var elem = _Browser_doc.documentElement;
        return {
            b$: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
            bK: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
        };
    }
    var _Browser_setViewport_fn = function (x, y) {
        return _Browser_withWindow(function () {
            _Browser_window.scroll(x, y);
            return _Utils_Tuple0;
        });
    }, _Browser_setViewport = F2(_Browser_setViewport_fn);
    function _Browser_getViewportOf(id) {
        return _Browser_withNode(id, function (node) {
            return {
                dq: {
                    b$: node.scrollWidth,
                    bK: node.scrollHeight
                },
                dE: {
                    dG: node.scrollLeft,
                    dH: node.scrollTop,
                    b$: node.clientWidth,
                    bK: node.clientHeight
                }
            };
        });
    }
    var _Browser_setViewportOf_fn = function (id, x, y) {
        return _Browser_withNode(id, function (node) {
            node.scrollLeft = x;
            node.scrollTop = y;
            return _Utils_Tuple0;
        });
    }, _Browser_setViewportOf = F3(_Browser_setViewportOf_fn);
    function _Browser_getElement(id) {
        return _Browser_withNode(id, function (node) {
            var rect = node.getBoundingClientRect();
            var x = _Browser_window.pageXOffset;
            var y = _Browser_window.pageYOffset;
            return {
                dq: _Browser_getScene(),
                dE: {
                    dG: x,
                    dH: y,
                    b$: _Browser_doc.documentElement.clientWidth,
                    bK: _Browser_doc.documentElement.clientHeight
                },
                fX: {
                    dG: x + rect.left,
                    dH: y + rect.top,
                    b$: rect.width,
                    bK: rect.height
                }
            };
        });
    }
    function _Browser_reload(skipCache) {
        return $elm$core$Task$perform_fn($elm$core$Basics$never, _Scheduler_binding(function (callback) {
            _VirtualDom_doc.location.reload(skipCache);
        }));
    }
    function _Browser_load(url) {
        return $elm$core$Task$perform_fn($elm$core$Basics$never, _Scheduler_binding(function (callback) {
            try {
                _Browser_window.location = url;
            }
            catch (err) {
                _VirtualDom_doc.location.reload(false);
            }
        }));
    }
    var _Http_toTask_fn = function (router, toTask, request) {
        return _Scheduler_binding(function (callback) {
            function done(response) {
                callback(toTask(request.jb.a(response)));
            }
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function () { done($elm$http$Http$NetworkError_); });
            xhr.addEventListener("timeout", function () { done($elm$http$Http$Timeout_); });
            xhr.addEventListener("load", function () { done(_Http_toResponse(request.jb.b, xhr)); });
            $elm$core$Maybe$isJust(request.gN) && _Http_track(router, xhr, request.gN.a);
            try {
                xhr.open(request.gi, request.kG, true);
            }
            catch (e) {
                return done($elm$http$Http$BadUrl_(request.kG));
            }
            _Http_configureRequest(xhr, request);
            request.iL.a && xhr.setRequestHeader("Content-Type", request.iL.a);
            xhr.send(request.iL.b);
            return function () { xhr.c = true; xhr.abort(); };
        });
    }, _Http_toTask = F3(_Http_toTask_fn);
    function _Http_configureRequest(xhr, request) {
        for (var headers = request.jo; headers.b; headers = headers.b) {
            xhr.setRequestHeader(headers.a.a, headers.a.b);
        }
        xhr.timeout = request.gL.a || 0;
        xhr.responseType = request.jb.d;
        xhr.withCredentials = request.iB;
    }
    function _Http_toResponse(toBody, xhr) {
        return A2(200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_, _Http_toMetadata(xhr), toBody(xhr.response));
    }
    function _Http_toMetadata(xhr) {
        return {
            kG: xhr.responseURL,
            _: xhr.status,
            aj: xhr.statusText,
            jo: _Http_parseHeaders(xhr.getAllResponseHeaders())
        };
    }
    function _Http_parseHeaders(rawHeaders) {
        if (!rawHeaders) {
            return $elm$core$Dict$empty;
        }
        var headers = $elm$core$Dict$empty;
        var headerPairs = rawHeaders.split("\r\n");
        for (var i = headerPairs.length; i--;) {
            var headerPair = headerPairs[i];
            var index = headerPair.indexOf(": ");
            if (index > 0) {
                var key = headerPair.substring(0, index);
                var value = headerPair.substring(index + 2);
                headers = $elm$core$Dict$update_fn(key, function (oldValue) {
                    return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
                        ? value + ", " + oldValue.a
                        : value);
                }, headers);
            }
        }
        return headers;
    }
    var _Http_expect_fn = function (type, toBody, toValue) {
        return {
            $: 0,
            d: type,
            b: toBody,
            a: toValue
        };
    }, _Http_expect = F3(_Http_expect_fn);
    var _Http_mapExpect_fn = function (func, expect) {
        return {
            $: 0,
            d: expect.d,
            b: expect.b,
            a: function (x) { return func(expect.a(x)); }
        };
    }, _Http_mapExpect = F2(_Http_mapExpect_fn);
    function _Http_toDataView(arrayBuffer) {
        return new DataView(arrayBuffer);
    }
    var _Http_emptyBody = { $: 0 };
    var _Http_pair_fn = function (a, b) { return { $: 0, a: a, b: b }; }, _Http_pair = F2(_Http_pair_fn);
    function _Http_toFormData(parts) {
        for (var formData = new FormData(); parts.b; parts = parts.b) {
            var part = parts.a;
            formData.append(part.a, part.b);
        }
        return formData;
    }
    var _Http_bytesToBlob_fn = function (mime, bytes) {
        return new Blob([bytes], { type: mime });
    }, _Http_bytesToBlob = F2(_Http_bytesToBlob_fn);
    function _Http_track(router, xhr, tracker) {
        xhr.upload.addEventListener("progress", function (event) {
            if (xhr.c) {
                return;
            }
            _Scheduler_rawSpawn(_Platform_sendToSelf_fn(router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
                kr: event.loaded,
                kw: event.total
            }))));
        });
        xhr.addEventListener("progress", function (event) {
            if (xhr.c) {
                return;
            }
            _Scheduler_rawSpawn(_Platform_sendToSelf_fn(router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
                kd: event.loaded,
                kw: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
            }))));
        });
    }
    function _Time_now(millisToPosix) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(millisToPosix(Date.now())));
        });
    }
    var _Time_setInterval_fn = function (interval, task) {
        return _Scheduler_binding(function (callback) {
            var id = setInterval(function () { _Scheduler_rawSpawn(task); }, interval);
            return function () { clearInterval(id); };
        });
    }, _Time_setInterval = F2(_Time_setInterval_fn);
    function _Time_here() {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed($elm$time$Time$Zone_fn(-(new Date().getTimezoneOffset()), _List_Nil)));
        });
    }
    function _Time_getZoneName() {
        return _Scheduler_binding(function (callback) {
            try {
                var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
            }
            catch (e) {
                var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
            }
            callback(_Scheduler_succeed(name));
        });
    }
    var wireRefs = (function () {
        var refs = new Map();
        var counter = 0;
        var f = {};
        f.add = function (obj) {
            counter++;
            refs.set(counter, obj);
            return counter;
        };
        f.getFinal = function (k) {
            let v = refs.get(k);
            refs.delete(k);
            return v;
        };
        f.clear = function () {
            refs = new Map();
        };
        f.all = function () {
            return [refs.keys(), refs];
        };
        return f;
    })();
    var _LamderaCodecs_encodeWithRef = function (a) {
        return wireRefs.add(a);
    };
    var _LamderaCodecs_decodeWithRef = function (ref) {
        return wireRefs.getFinal(ref);
    };
    var _LamderaCodecs_encodeBytes = function (s) { return _Lamdera_Json_wrap(s); };
    function _Lamdera_Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
    function _Lamdera_Json_wrap(value) { return value; }
    function _LamderaCodecs_Json_decodePrim(decoder) {
        return { $: 0, a: decoder };
    }
    var _LamderaCodecs_decodeBytes = _Json_decodePrim(function (value) {
        return (typeof value === "object" && value instanceof DataView)
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a DataView", value);
    });
    var _LamderaCodecs_debug = function (s) {
        console.log(s);
        return _Utils_Tuple0;
    };
    var _LamderaCodecs_bytesDecodeStrict_fn = function (decoder, bytes) {
        try {
            var res = A2(decoder, bytes, 0);
            const w = bytes.byteLength;
            if (w !== res.a) {
                console.log(`❌ bytesDecodeStrict did not consume all bytes: length:${w}, consumed:${res.a}`, res.b, new Uint8Array(bytes.buffer));
            }
            return $elm$core$Maybe$Just(res.b);
        }
        catch (e) {
            console.log("\u274C bytesDecodeStrict unexpected error:", e);
            return $elm$core$Maybe$Nothing;
        }
    }, _LamderaCodecs_bytesDecodeStrict_fn_unwrapped = function (decoder, bytes) {
        try {
            var res = decoder(bytes, 0);
            const w = bytes.byteLength;
            if (w !== res.a) {
                console.log(`❌ bytesDecodeStrict did not consume all bytes: length:${w}, consumed:${res.a}`, res.b, new Uint8Array(bytes.buffer));
            }
            return $elm$core$Maybe$Just(res.b);
        }
        catch (e) {
            console.log("\u274C bytesDecodeStrict unexpected error:", e);
            return $elm$core$Maybe$Nothing;
        }
    }, _LamderaCodecs_bytesDecodeStrict = F2(_LamderaCodecs_bytesDecodeStrict_fn);
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr_fn = function (func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function (node, acc) {
            if (!node.$) {
                var subTree = node.a;
                return _JsArray_foldr_fn(helper, acc, subTree);
            }
            else {
                var values = node.a;
                return _JsArray_foldr_fn(func, acc, values);
            }
        });
        return _JsArray_foldr_fn(helper, _JsArray_foldr_fn(func, baseCase, tail), tree);
    }, $elm$core$Array$foldr = F3($elm$core$Array$foldr_fn);
    var $elm$core$Array$toList = function (array) {
        return $elm$core$Array$foldr_fn($elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Dict$foldr_fn = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$acc = A3(func, key, value, $elm$core$Dict$foldr_fn(func, acc, right)), $temp$t = left;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr_fn_unwrapped = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$acc = func(key, value, $elm$core$Dict$foldr_fn_unwrapped(func, acc, right)), $temp$t = left;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr = F3($elm$core$Dict$foldr_fn);
    var $elm$core$Dict$toList = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, list) {
            return _List_Cons(_Utils_Tuple2(key, value), list);
        }, _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, keyList) {
            return _List_Cons(key, keyList);
        }, _List_Nil, dict);
    };
    var $elm$core$Set$toList = function (_v0) {
        var dict = _v0;
        return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Basics$EQ = 1;
    var $elm$core$Basics$GT = 2;
    var $elm$core$Basics$LT = 0;
    var $author$project$Main$DataErrorPage____ = function (a) {
        return { $: 7, a: a };
    };
    var $elm$core$Maybe$Nothing = { $: 1, a: null };
    var $author$project$Main$OnPageChange = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$Main$ActionDataAbout = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Main$ActionDataArticle = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Main$ActionDataArticle__Slug_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Main$ActionDataBlog = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Main$ActionDataBlog__Slug_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Main$ActionDataIndex = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request = F2($dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn);
    var $elm$core$Result$Err = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$Result$Ok = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$Result$map_fn = function (func, ra) {
        if (!ra.$) {
            var a = ra.a;
            return $elm$core$Result$Ok(func(a));
        }
        else {
            var e = ra.a;
            return $elm$core$Result$Err(e);
        }
    }, $elm$core$Result$map = F2($elm$core$Result$map_fn);
    var $dillonkearns$elm_pages$BackendTask$map_fn = function (fn, requestInfo) {
        if (requestInfo.$ === 1) {
            var value = requestInfo.a;
            return $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute($elm$core$Result$map_fn(fn, value));
        }
        else {
            var urls = requestInfo.a;
            var lookupFn = requestInfo.b;
            return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn(urls, A2($dillonkearns$elm_pages$BackendTask$mapLookupFn, fn, lookupFn));
        }
    }, $dillonkearns$elm_pages$BackendTask$map = F2($dillonkearns$elm_pages$BackendTask$map_fn);
    var $dillonkearns$elm_pages$BackendTask$mapLookupFn_fn = function (fn, lookupFn, maybeMock, requests) {
        return $dillonkearns$elm_pages$BackendTask$map_fn(fn, A2(lookupFn, maybeMock, requests));
    }, $dillonkearns$elm_pages$BackendTask$mapLookupFn_fn_unwrapped = function (fn, lookupFn, maybeMock, requests) {
        return $dillonkearns$elm_pages$BackendTask$map_fn(fn, lookupFn(maybeMock, requests));
    }, $dillonkearns$elm_pages$BackendTask$mapLookupFn = F4($dillonkearns$elm_pages$BackendTask$mapLookupFn_fn);
    var $dillonkearns$elm_pages$PageServerResponse$ErrorPage_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $dillonkearns$elm_pages$PageServerResponse$ErrorPage = F2($dillonkearns$elm_pages$PageServerResponse$ErrorPage_fn);
    var $dillonkearns$elm_pages$PageServerResponse$RenderPage_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$PageServerResponse$RenderPage = F2($dillonkearns$elm_pages$PageServerResponse$RenderPage_fn);
    var $dillonkearns$elm_pages$PageServerResponse$ServerResponse = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Server$Response$map_fn = function (mapFn, pageServerResponse) {
        switch (pageServerResponse.$) {
            case 0:
                var response = pageServerResponse.a;
                var data = pageServerResponse.b;
                return $dillonkearns$elm_pages$PageServerResponse$RenderPage_fn(response, mapFn(data));
            case 1:
                var serverResponse = pageServerResponse.a;
                return $dillonkearns$elm_pages$PageServerResponse$ServerResponse(serverResponse);
            default:
                var error = pageServerResponse.a;
                var response = pageServerResponse.b;
                return $dillonkearns$elm_pages$PageServerResponse$ErrorPage_fn(error, response);
        }
    }, $dillonkearns$elm_pages$Server$Response$map = F2($dillonkearns$elm_pages$Server$Response$map_fn);
    var $elm$core$Basics$False = 1;
    var $elm$core$Maybe$Just = function (a) { return { $: 0, a: a }; };
    var $elm$core$Basics$apR_fn = function (x, f) {
        return f(x);
    }, $elm$core$Basics$apR = F2($elm$core$Basics$apR_fn);
    var $dillonkearns$elm_pages$Server$Response$plainText = function (string) {
        return $dillonkearns$elm_pages$PageServerResponse$ServerResponse({
            iL: $elm$core$Maybe$Just(string),
            jo: _List_fromArray([
                _Utils_Tuple2("Content-Type", "text/plain")
            ]),
            eH: false,
            _: 200
        });
    };
    var $author$project$Effect$None = { $: 0 };
    var $author$project$Effect$none = $author$project$Effect$None;
    var $elm$json$Json$Decode$Failure_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $elm$json$Json$Decode$Failure = F2($elm$json$Json$Decode$Failure_fn);
    var $elm$json$Json$Decode$Field_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$json$Json$Decode$Field = F2($elm$json$Json$Decode$Field_fn);
    var $elm$json$Json$Decode$Index_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$json$Json$Decode$Index = F2($elm$json$Json$Decode$Index_fn);
    var $elm$json$Json$Decode$OneOf = function (a) {
        return { $: 2, a: a };
    };
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$core$Basics$append = _Utils_append;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join_fn = function (sep, chunks) {
        return _String_join_fn(sep, _List_toArray(chunks));
    }, $elm$core$String$join = F2($elm$core$String$join_fn);
    var $elm$core$String$split_fn = function (sep, string) {
        return _List_fromArray(_String_split_fn(sep, string));
    }, $elm$core$String$split = F2($elm$core$String$split_fn);
    var $elm$json$Json$Decode$indent = function (str) {
        return $elm$core$String$join_fn("\n    ", $elm$core$String$split_fn("\n", str));
    };
    var $elm$core$List$foldl_fn = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$acc = A2(func, x, acc), $temp$list = xs;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl_fn_unwrapped = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$acc = func(x, acc), $temp$list = xs;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl = F3($elm$core$List$foldl_fn);
    var $elm$core$List$length = function (xs) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, i) {
            return i + 1;
        }, 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp_fn = function (lo, hi, list) {
        rangeHelp: while (true) {
            if (_Utils_cmp(lo, hi) < 1) {
                var $temp$hi = hi - 1, $temp$list = _List_Cons(hi, list);
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
            }
            else {
                return list;
            }
        }
    }, $elm$core$List$rangeHelp = F3($elm$core$List$rangeHelp_fn);
    var $elm$core$List$range_fn = function (lo, hi) {
        return $elm$core$List$rangeHelp_fn(lo, hi, _List_Nil);
    }, $elm$core$List$range = F2($elm$core$List$range_fn);
    var $elm$core$List$indexedMap_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap_fn_unwrapped = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(f(i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap = F2($elm$core$List$indexedMap_fn);
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (97 <= code) && (code <= 122);
    };
    var $elm$core$Char$isUpper = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 90) && (65 <= code);
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function (_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 57) && (48 <= code);
    };
    var $elm$core$Char$isAlphaNum = function (_char) {
        return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
    };
    var $elm$core$List$reverse = function (list) {
        return $elm$core$List$foldl_fn($elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf_fn = function (i, error) {
        return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    }, $elm$json$Json$Decode$errorOneOf = F2($elm$json$Json$Decode$errorOneOf_fn);
    var $elm$json$Json$Decode$errorToString = function (error) {
        return $elm$json$Json$Decode$errorToStringHelp_fn(error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp_fn = function (error, context) {
        errorToStringHelp: while (true) {
            switch (error.$) {
                case 0:
                    var f = error.a;
                    var err = error.b;
                    var isSimple = function () {
                        var _v1 = $elm$core$String$uncons(f);
                        if (_v1.$ === 1) {
                            return false;
                        }
                        else {
                            var _v2 = _v1.a;
                            var _char = _v2.a;
                            var rest = _v2.b;
                            return $elm$core$Char$isAlpha(_char) && _String_all_fn($elm$core$Char$isAlphaNum, rest);
                        }
                    }();
                    var fieldName = isSimple ? ("." + f) : ("['" + (f + "']"));
                    var $temp$error = err, $temp$context = _List_Cons(fieldName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 1:
                    var i = error.a;
                    var err = error.b;
                    var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                    var $temp$error = err, $temp$context = _List_Cons(indexName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 2:
                    var errors = error.a;
                    if (!errors.b) {
                        return "Ran into a Json.Decode.oneOf with no possibilities" + function () {
                            if (!context.b) {
                                return "!";
                            }
                            else {
                                return " at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                            }
                        }();
                    }
                    else {
                        if (!errors.b.b) {
                            var err = errors.a;
                            var $temp$error = err;
                            error = $temp$error;
                            continue errorToStringHelp;
                        }
                        else {
                            var starter = function () {
                                if (!context.b) {
                                    return "Json.Decode.oneOf";
                                }
                                else {
                                    return "The Json.Decode.oneOf at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                                }
                            }();
                            var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                            return $elm$core$String$join_fn("\n\n", _List_Cons(introduction, $elm$core$List$indexedMap_fn($elm$json$Json$Decode$errorOneOf, errors)));
                        }
                    }
                default:
                    var msg = error.a;
                    var json = error.b;
                    var introduction = function () {
                        if (!context.b) {
                            return "Problem with the given value:\n\n";
                        }
                        else {
                            return "Problem with the value at json" + ($elm$core$String$join_fn("", $elm$core$List$reverse(context)) + ":\n\n    ");
                        }
                    }();
                    return introduction + ($elm$json$Json$Decode$indent(_Json_encode_fn(4, json)) + ("\n\n" + msg));
            }
        }
    }, $elm$json$Json$Decode$errorToStringHelp = F2($elm$json$Json$Decode$errorToStringHelp_fn);
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin_fn = function (a, b, c, d) {
        return { $: 0, a: a, b: b, c: c, d: d };
    }, $elm$core$Array$Array_elm_builtin = F4($elm$core$Array$Array_elm_builtin_fn);
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase_fn = function (base, number) {
        return _Basics_log(number) / _Basics_log(base);
    }, $elm$core$Basics$logBase = F2($elm$core$Basics$logBase_fn);
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling($elm$core$Basics$logBase_fn(2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = $elm$core$Array$Array_elm_builtin_fn(0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$Basics$apL_fn = function (f, x) {
        return f(x);
    }, $elm$core$Basics$apL = F2($elm$core$Basics$apL_fn);
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$Basics$max_fn = function (x, y) {
        return (_Utils_cmp(x, y) > 0) ? x : y;
    }, $elm$core$Basics$max = F2($elm$core$Basics$max_fn);
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes_fn = function (nodes, acc) {
        compressNodes: while (true) {
            var _v0 = _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodes);
            var node = _v0.a;
            var remainingNodes = _v0.b;
            var newAcc = _List_Cons($elm$core$Array$SubTree(node), acc);
            if (!remainingNodes.b) {
                return $elm$core$List$reverse(newAcc);
            }
            else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
            }
        }
    }, $elm$core$Array$compressNodes = F2($elm$core$Array$compressNodes_fn);
    var $elm$core$Tuple$first = function (_v0) {
        var x = _v0.a;
        return x;
    };
    var $elm$core$Array$treeFromBuilder_fn = function (nodeList, nodeListSize) {
        treeFromBuilder: while (true) {
            var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
            if (newNodeSize === 1) {
                return _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodeList).a;
            }
            else {
                var $temp$nodeList = $elm$core$Array$compressNodes_fn(nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
            }
        }
    }, $elm$core$Array$treeFromBuilder = F2($elm$core$Array$treeFromBuilder_fn);
    var $elm$core$Array$builderToArray_fn = function (reverseNodeList, builder) {
        if (!builder.L) {
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.V), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.V);
        }
        else {
            var treeLen = builder.L * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor($elm$core$Basics$logBase_fn($elm$core$Array$branchFactor, treeLen - 1));
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.Z) : builder.Z;
            var tree = $elm$core$Array$treeFromBuilder_fn(correctNodeList, builder.L);
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.V) + treeLen, $elm$core$Basics$max_fn(5, depth * $elm$core$Array$shiftStep), tree, builder.V);
        }
    }, $elm$core$Array$builderToArray = F2($elm$core$Array$builderToArray_fn);
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp_fn = function (fn, fromIndex, len, nodeList, tail) {
        initializeHelp: while (true) {
            if (fromIndex < 0) {
                return $elm$core$Array$builderToArray_fn(false, { Z: nodeList, L: (len / $elm$core$Array$branchFactor) | 0, V: tail });
            }
            else {
                var leaf = $elm$core$Array$Leaf(_JsArray_initialize_fn($elm$core$Array$branchFactor, fromIndex, fn));
                var $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$nodeList = _List_Cons(leaf, nodeList);
                fromIndex = $temp$fromIndex;
                nodeList = $temp$nodeList;
                continue initializeHelp;
            }
        }
    }, $elm$core$Array$initializeHelp = F5($elm$core$Array$initializeHelp_fn);
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize_fn = function (len, fn) {
        if (len <= 0) {
            return $elm$core$Array$empty;
        }
        else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = _JsArray_initialize_fn(tailLen, len - tailLen, fn);
            var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
            return $elm$core$Array$initializeHelp_fn(fn, initialFromIndex, len, _List_Nil, tail);
        }
    }, $elm$core$Array$initialize = F2($elm$core$Array$initialize_fn);
    var $elm$core$Basics$True = 0;
    var $elm$core$Result$isOk = function (result) {
        if (!result.$) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$core$Platform$Sub$batch = _Platform_batch;
    var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
    var $author$project$RouteBuilder$buildNoState_fn = function (_v0, builderState) {
        var view = _v0.E;
        var record = builderState;
        return {
            fs: record.fs,
            hc: record.hc,
            cf: record.cf,
            bi: record.bi,
            bL: F2(function (_v2, _v3) {
                return _Utils_Tuple2({}, $author$project$Effect$none);
            }),
            av: record.av,
            c9: $elm$core$Maybe$Nothing,
            du: record.du,
            bV: F4(function (_v4, _v5, _v6, _v7) {
                return $elm$core$Platform$Sub$none;
            }),
            ba: F4(function (_v8, _v9, _v10, _v11) {
                return _Utils_Tuple3({}, $author$project$Effect$none, $elm$core$Maybe$Nothing);
            }),
            E: F3(function (shared, model, app) {
                return A2(view, app, shared);
            })
        };
    }, $author$project$RouteBuilder$buildNoState = F2($author$project$RouteBuilder$buildNoState_fn);
    var $dillonkearns$elm_pages$BackendTask$fail = function (error) {
        return $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute($elm$core$Result$Err(error));
    };
    var $elm$core$Basics$identity = function (x) {
        return x;
    };
    var $dillonkearns$elm_pages$Pages$Internal$FatalError$FatalError = $elm$core$Basics$identity;
    var $dillonkearns$elm_pages$FatalError$build = function (info) {
        return info;
    };
    var $dillonkearns$elm_pages$FatalError$fromString = function (string) {
        return $dillonkearns$elm_pages$FatalError$build({ iL: string, dz: "Custom Error" });
    };
    var $author$project$Route$About$head = function (app) {
        return _List_Nil;
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered = F2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered_fn);
    var $author$project$RouteBuilder$WithData = $elm$core$Basics$identity;
    var $elm$core$Basics$composeR_fn = function (f, g, x) {
        return g(f(x));
    }, $elm$core$Basics$composeR = F3($elm$core$Basics$composeR_fn);
    var $elm$core$List$foldrHelper_fn = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return A2(fn, a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return A2(fn, a, A2(fn, b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn(fn, acc, ctr + 1, r4);
                        return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper_fn_unwrapped = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return fn(a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return fn(a, fn(b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return fn(a, fn(b, fn(c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn_unwrapped(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn_unwrapped(fn, acc, ctr + 1, r4);
                        return fn(a, fn(b, fn(c, fn(d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper = F4($elm$core$List$foldrHelper_fn);
    var $elm$core$List$foldr_fn = function (fn, acc, ls) {
        return $elm$core$List$foldrHelper_fn(fn, acc, 0, ls);
    }, $elm$core$List$foldr = F3($elm$core$List$foldr_fn);
    var $elm$core$List$map_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs
            = xs.b) {
            var next = _List_Cons(f(xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$map = F2($elm$core$List$map_fn);
    var $elm$core$List$any_fn = function (isOkay, list) {
        any: while (true) {
            if (!list.b) {
                return false;
            }
            else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) {
                    return true;
                }
                else {
                    var $temp$list = xs;
                    list = $temp$list;
                    continue any;
                }
            }
        }
    }, $elm$core$List$any = F2($elm$core$List$any_fn);
    var $elm$core$List$member_fn = function (x, xs) {
        return $elm$core$List$any_fn(function (a) {
            return _Utils_eq(a, x);
        }, xs);
    }, $elm$core$List$member = F2($elm$core$List$member_fn);
    var $dillonkearns$elm_pages$Server$Response$render = function (data) {
        return $dillonkearns$elm_pages$PageServerResponse$RenderPage_fn({ jo: _List_Nil, _: 200 }, data);
    };
    var $author$project$RouteBuilder$preRender = function (_v0) {
        var pages = _v0.j4;
        var head = _v0.bi;
        var data = _v0.hc;
        return {
            fs: F2(function (_v1, _v2) {
                return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString("Internal Error - actions should never be called for statically generated pages."));
            }),
            hc: function (_v3) {
                return A2($elm$core$Basics$composeR, data, $dillonkearns$elm_pages$BackendTask$map($dillonkearns$elm_pages$Server$Response$render));
            },
            cf: F3(function (moduleContext, toRecord, routeParams) {
                return $dillonkearns$elm_pages$BackendTask$map_fn(function (allRoutes) {
                    return $elm$core$List$member_fn(routeParams, allRoutes) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered_fn({
                        jE: toRecord(routeParams),
                        c6: moduleContext.c6,
                        dn: moduleContext.dn
                    }, $elm$core$List$map_fn(toRecord, allRoutes)));
                }, pages);
            }),
            bi: head,
            av: "prerender",
            fb: false,
            du: pages
        };
    };
    var $dillonkearns$elm_pages$BackendTask$succeed = function (value) {
        return $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute($elm$core$Result$Ok(value));
    };
    var $elm$json$Json$Decode$map = _Json_map1;
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
        switch (handler.$) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return 3;
        }
    };
    var $elm$html$Html$h2 = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "h2"), $elm$html$Html$h2_fn = $elm$html$Html$h2.a2;
    var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
    var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
    var $author$project$Route$About$view_fn = function (app, shared) {
        return {
            iL: _List_fromArray([
                $elm$html$Html$h2_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$text("New Page")
                ]))
            ]),
            dz: "About"
        };
    }, $author$project$Route$About$view = F2($author$project$Route$About$view_fn);
    var $author$project$Route$About$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$About$view }, $author$project$RouteBuilder$preRender({
        hc: function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        },
        bi: $author$project$Route$About$head,
        j4: $dillonkearns$elm_pages$BackendTask$succeed(_List_Nil)
    }));
    var $dillonkearns$elm_pages$Pages$Url$Internal = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$List$filter_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            if (f(xs.a)) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        return tmp.
            b;
    }, $elm$core$List$filter = F2($elm$core$List$filter_fn);
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $elm$core$Basics$negate = function (n) {
        return -n;
    };
    var $elm$core$String$slice = _String_slice;
    var $elm$core$String$dropRight_fn = function (n, string) {
        return (n < 1) ? string : _String_slice_fn(0, -n, string);
    }, $elm$core$String$dropRight = F2($elm$core$String$dropRight_fn);
    var $elm$core$String$endsWith = _String_endsWith;
    var $elm$core$String$length = _String_length;
    var $dillonkearns$elm_pages$Pages$Internal$String$chopEnd_fn = function (needle, string) {
        chopEnd: while (true) {
            if (_String_endsWith_fn(needle, string)) {
                var $temp$string = $elm$core$String$dropRight_fn($elm$core$String$length(needle), string);
                string = $temp$string;
                continue chopEnd;
            }
            else {
                return string;
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$String$chopEnd = F2($dillonkearns$elm_pages$Pages$Internal$String$chopEnd_fn);
    var $elm$core$String$dropLeft_fn = function (n, string) {
        return (n < 1) ? string : _String_slice_fn(n, $elm$core$String$length(string), string);
    }, $elm$core$String$dropLeft = F2($elm$core$String$dropLeft_fn);
    var $elm$core$String$startsWith = _String_startsWith;
    var $dillonkearns$elm_pages$Pages$Internal$String$chopStart_fn = function (needle, string) {
        chopStart: while (true) {
            if (_String_startsWith_fn(needle, string)) {
                var $temp$string = $elm$core$String$dropLeft_fn($elm$core$String$length(needle), string);
                string = $temp$string;
                continue chopStart;
            }
            else {
                return string;
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$String$chopStart = F2($dillonkearns$elm_pages$Pages$Internal$String$chopStart_fn);
    var $dillonkearns$elm_pages$UrlPath$normalize = function (pathPart) {
        return $dillonkearns$elm_pages$Pages$Internal$String$chopStart_fn("/", $dillonkearns$elm_pages$Pages$Internal$String$chopEnd_fn("/", pathPart));
    };
    var $dillonkearns$elm_pages$UrlPath$join = function (parts) {
        return $elm$core$List$map_fn($dillonkearns$elm_pages$UrlPath$normalize, $elm$core$List$filter_fn(function (segment) {
            return segment !== "/";
        }, parts));
    };
    var $dillonkearns$elm_pages$UrlPath$toRelative = function (parts) {
        return $elm$core$String$join_fn("/", $dillonkearns$elm_pages$UrlPath$join(parts));
    };
    var $dillonkearns$elm_pages$UrlPath$toAbsolute = function (path) {
        return "/" + $dillonkearns$elm_pages$UrlPath$toRelative(path);
    };
    var $dillonkearns$elm_pages$Pages$Url$fromPath = function (path) {
        return $dillonkearns$elm_pages$Pages$Url$Internal($dillonkearns$elm_pages$UrlPath$toAbsolute(path));
    };
    var $author$project$Shared$title = "neco8.log";
    var $author$project$Shared$seo = {
        iP: $elm$core$Maybe$Nothing,
        i$: "neco8 \u306E \u304D\u308D\u304F",
        hB: {
            gY: "elm-pages logo",
            i1: $elm$core$Maybe$Nothing,
            jG: $elm$core$Maybe$Nothing,
            kG: $dillonkearns$elm_pages$Pages$Url$fromPath($dillonkearns$elm_pages$UrlPath$join(_List_fromArray(["images", "icon-png.png"])))
        },
        jC: $elm$core$Maybe$Nothing,
        kv: $author$project$Shared$title,
        dz: $author$project$Shared$title
    };
    var $dillonkearns$elm_pages$Head$Twitter$Regular = 0;
    var $dillonkearns$elm_pages$Head$Twitter$Summary = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Head$Seo$buildSummary_fn = function (_v0, summarySize) {
        var locale = _v0.jC;
        var siteName = _v0.kv;
        var description = _v0.i$;
        var canonicalUrlOverride = _v0.iP;
        var image = _v0.hB;
        var title = _v0.dz;
        return {
            b2: _List_Nil,
            bB: $elm$core$Maybe$Nothing,
            iP: canonicalUrlOverride,
            i$: description,
            hB: image,
            jC: locale,
            kv: siteName,
            dz: title,
            co: $dillonkearns$elm_pages$Head$Twitter$Summary({
                i$: $elm$core$Maybe$Just(description),
                hB: $elm$core$Maybe$Just({ gY: image.gY, kG: image.kG }),
                gC: $elm$core$Maybe$Nothing,
                kw: summarySize,
                dz: title
            }),
            b_: $elm$core$Maybe$Nothing
        };
    }, $dillonkearns$elm_pages$Head$Seo$buildSummary = F2($dillonkearns$elm_pages$Head$Seo$buildSummary_fn);
    var $dillonkearns$elm_pages$Head$Seo$summary = function (config) {
        return $dillonkearns$elm_pages$Head$Seo$buildSummary_fn(config, 0);
    };
    var $dillonkearns$elm_pages$Head$Seo$Content_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$Head$Seo$Content = F2($dillonkearns$elm_pages$Head$Seo$Content_fn);
    var $dillonkearns$elm_pages$Head$Seo$Website = { $: 0 };
    var $elm$core$List$append_fn = function (xs, ys) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
        end.b = ys;
        return tmp.b;
    }, $elm$core$List$append = F2($elm$core$List$append_fn);
    var $dillonkearns$elm_pages$Head$FullUrlToCurrentPage = { $: 2 };
    var $dillonkearns$elm_pages$Head$currentPageFullUrl = $dillonkearns$elm_pages$Head$FullUrlToCurrentPage;
    var $elm$core$Maybe$map_fn = function (f, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return $elm$core$Maybe$Just(f(value));
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $elm$core$Maybe$map = F2($elm$core$Maybe$map_fn);
    var $dillonkearns$elm_pages$Head$Tag = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Head$node_fn = function (name, attributes) {
        return $dillonkearns$elm_pages$Head$Tag({ dJ: attributes, jM: name });
    }, $dillonkearns$elm_pages$Head$node = F2($dillonkearns$elm_pages$Head$node_fn);
    var $dillonkearns$elm_pages$Head$Raw = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Head$raw = function (value) {
        return $dillonkearns$elm_pages$Head$Raw(value);
    };
    var $elm$core$Maybe$withDefault_fn = function (_default, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return value;
        }
        else {
            return _default;
        }
    }, $elm$core$Maybe$withDefault = F2($elm$core$Maybe$withDefault_fn);
    var $dillonkearns$elm_pages$Head$canonicalLink = function (maybePath) {
        return $dillonkearns$elm_pages$Head$node_fn("link", _List_fromArray([
            _Utils_Tuple2("rel", $dillonkearns$elm_pages$Head$raw("canonical")),
            _Utils_Tuple2("href", $elm$core$Maybe$withDefault_fn($dillonkearns$elm_pages$Head$currentPageFullUrl, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, maybePath)))
        ]));
    };
    var $elm$core$List$maybeCons_fn = function (f, mx, xs) {
        var _v0 = f(mx);
        if (!_v0.$) {
            var x = _v0.a;
            return _List_Cons(x, xs);
        }
        else {
            return xs;
        }
    }, $elm$core$List$maybeCons = F3($elm$core$List$maybeCons_fn);
    var $elm$core$List$filterMap_fn = function (f, xs) {
        return $elm$core$List$foldr_fn($elm$core$List$maybeCons(f), _List_Nil, xs);
    }, $elm$core$List$filterMap = F2($elm$core$List$filterMap_fn);
    var $dillonkearns$elm_pages$Head$metaName_fn = function (name, content) {
        return $dillonkearns$elm_pages$Head$node_fn("meta", _List_fromArray([
            _Utils_Tuple2("name", $dillonkearns$elm_pages$Head$Raw(name)),
            _Utils_Tuple2("content", content)
        ]));
    }, $dillonkearns$elm_pages$Head$metaName = F2($dillonkearns$elm_pages$Head$metaName_fn);
    var $dillonkearns$elm_pages$Head$metaProperty_fn = function (property, content) {
        return $dillonkearns$elm_pages$Head$node_fn("meta", _List_fromArray([
            _Utils_Tuple2("property", $dillonkearns$elm_pages$Head$raw(property)),
            _Utils_Tuple2("content", content)
        ]));
    }, $dillonkearns$elm_pages$Head$metaProperty = F2($dillonkearns$elm_pages$Head$metaProperty_fn);
    var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$toCodeString = function (_v0) {
        var rawCode = _v0;
        return rawCode;
    };
    var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Region$toCodeString = function (_v0) {
        var rawCode = _v0;
        return rawCode;
    };
    var $dillonkearns$elm_pages$Head$Seo$localeToString = function (_v0) {
        var language = _v0.a;
        var territory = _v0.b;
        return $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$toCodeString(language) + ("_" + $dillonkearns$elm_bcp47_language_tag$LanguageTag$Region$toCodeString(territory));
    };
    var $dillonkearns$elm_pages$Head$Twitter$cardValue = function (card) {
        switch (card.$) {
            case 0:
                var details = card.a;
                var _v1 = details.kw;
                if (!_v1) {
                    return "summary";
                }
                else {
                    return "summary_large_image";
                }
            case 1:
                return "app";
            default:
                return "player";
        }
    };
    var $dillonkearns$elm_pages$Head$FullUrl = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Head$urlAttribute = function (value) {
        return $dillonkearns$elm_pages$Head$FullUrl(value);
    };
    var $dillonkearns$elm_pages$Head$Twitter$rawTags = function (card) {
        return _List_Cons(_Utils_Tuple2("twitter:card", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw($dillonkearns$elm_pages$Head$Twitter$cardValue(card)))), function () {
            switch (card.$) {
                case 0:
                    var details = card.a;
                    return _List_fromArray([
                        _Utils_Tuple2("twitter:title", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.dz))),
                        _Utils_Tuple2("twitter:site", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.gC)),
                        _Utils_Tuple2("twitter:description", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.i$)),
                        _Utils_Tuple2("twitter:image", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$urlAttribute, $elm$core$Maybe$map_fn(function ($) {
                            return $.kG;
                        }, details.hB))),
                        _Utils_Tuple2("twitter:image:alt", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn(function ($) {
                            return $.gY;
                        }, details.hB)))
                    ]);
                case 1:
                    var details = card.a;
                    return _List_fromArray([
                        _Utils_Tuple2("twitter:title", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.dz))),
                        _Utils_Tuple2("twitter:site", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.gC))),
                        _Utils_Tuple2("twitter:description", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.i$)),
                        _Utils_Tuple2("twitter:image", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$urlAttribute, $elm$core$Maybe$map_fn(function ($) {
                            return $.kG;
                        }, details.hB))),
                        _Utils_Tuple2("twitter:image:alt", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn(function ($) {
                            return $.gY;
                        }, details.hB))),
                        _Utils_Tuple2("twitter:app:name:iphone", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fz)),
                        _Utils_Tuple2("twitter:app:name:ipad", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fy)),
                        _Utils_Tuple2("twitter:app:name:googleplay", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fx)),
                        _Utils_Tuple2("twitter:app:id:iphone", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, details.fw))),
                        _Utils_Tuple2("twitter:app:id:ipad", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, details.fv))),
                        _Utils_Tuple2("twitter:app:id:googleplay", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fu)),
                        _Utils_Tuple2("twitter:app:url:iphone", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fC)),
                        _Utils_Tuple2("twitter:app:url:ipad", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fB)),
                        _Utils_Tuple2("twitter:app:url:googleplay", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.fA)),
                        _Utils_Tuple2("twitter:app:country", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.ft))
                    ]);
                default:
                    var details = card.a;
                    return _List_fromArray([
                        _Utils_Tuple2("twitter:title", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.dz))),
                        _Utils_Tuple2("twitter:site", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.gC))),
                        _Utils_Tuple2("twitter:description", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, details.i$)),
                        _Utils_Tuple2("twitter:image", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$urlAttribute(details.hB.kG))),
                        _Utils_Tuple2("twitter:image:alt", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(details.hB.gY)))
                    ]);
            }
        }());
    };
    var $danyx23$elm_mimetype$MimeType$toString = function (mimeType) {
        switch (mimeType.$) {
            case 0:
                var img = mimeType.a;
                switch (img.$) {
                    case 0:
                        return "image/jpeg";
                    case 1:
                        return "image/png";
                    case 2:
                        return "image/gif";
                    default:
                        var type_ = img.a;
                        return "image/" + type_;
                }
            case 1:
                var audio = mimeType.a;
                switch (audio.$) {
                    case 0:
                        return "audio/mp3";
                    case 2:
                        return "audio/wav";
                    case 1:
                        return "audio/ogg";
                    default:
                        var type_ = audio.a;
                        return "audio/" + type_;
                }
            case 2:
                var video = mimeType.a;
                switch (video.$) {
                    case 0:
                        return "video/mp4";
                    case 1:
                        return "video/mpeg";
                    case 2:
                        return "video/quicktime";
                    case 3:
                        return "video/avi";
                    case 4:
                        return "video/webm";
                    default:
                        var type_ = video.a;
                        return "video/" + type_;
                }
            case 3:
                var text = mimeType.a;
                switch (text.$) {
                    case 0:
                        return "text/plain";
                    case 1:
                        return "text/html";
                    case 2:
                        return "text/css";
                    case 3:
                        return "text/xml";
                    case 4:
                        return "application/json";
                    default:
                        var type_ = text.a;
                        return "text/" + type_;
                }
            case 4:
                var app = mimeType.a;
                switch (app.$) {
                    case 0:
                        return "application/msword";
                    case 1:
                        return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                    case 2:
                        return "application/vnd.ms-excel";
                    case 3:
                        return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    case 4:
                        return "application/vnd.ms-powerpoint";
                    case 5:
                        return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                    case 6:
                        return "application/pdf";
                    default:
                        var type_ = app.a;
                        return "application/" + type_;
                }
            default:
                var type_ = mimeType.a;
                return type_;
        }
    };
    var $dillonkearns$elm_pages$Head$Seo$tagsForAudio = function (audio) {
        return _List_fromArray([
            _Utils_Tuple2("og:audio", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(audio.kG))),
            _Utils_Tuple2("og:audio:secure_url", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(audio.kG))),
            _Utils_Tuple2("og:audio:type", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $danyx23$elm_mimetype$MimeType$toString, $dillonkearns$elm_pages$Head$raw), audio.jG))
        ]);
    };
    var $dillonkearns$elm_pages$Head$Seo$tagsForImage = function (image) {
        return _List_fromArray([
            _Utils_Tuple2("og:image", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$urlAttribute(image.kG))),
            _Utils_Tuple2("og:image:secure_url", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$urlAttribute(image.kG))),
            _Utils_Tuple2("og:image:alt", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(image.gY))),
            _Utils_Tuple2("og:image:width", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, $elm$core$Maybe$map_fn(function ($) {
                return $.b$;
            }, image.i1)))),
            _Utils_Tuple2("og:image:height", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, $elm$core$Maybe$map_fn(function ($) {
                return $.bK;
            }, image.i1))))
        ]);
    };
    var $dillonkearns$elm_pages$Head$Seo$tagsForVideo = function (video) {
        return _List_fromArray([
            _Utils_Tuple2("og:video", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(video.kG))),
            _Utils_Tuple2("og:video:secure_url", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(video.kG))),
            _Utils_Tuple2("og:video:width", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, $elm$core$Maybe$map_fn(function ($) {
                return $.b$;
            }, video.i1)))),
            _Utils_Tuple2("og:video:height", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, $elm$core$Maybe$map_fn(function ($) {
                return $.bK;
            }, video.i1)))),
            _Utils_Tuple2("og:video:type", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $danyx23$elm_mimetype$MimeType$toString, $dillonkearns$elm_pages$Head$raw), video.jG))
        ]);
    };
    var $dillonkearns$elm_pages$Head$Seo$tagsForCommon = function (common) {
        return _Utils_ap($dillonkearns$elm_pages$Head$Seo$tagsForImage(common.hB), _Utils_ap($elm$core$Maybe$withDefault_fn(_List_Nil, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$Seo$tagsForAudio, common.bB)), _Utils_ap($elm$core$Maybe$withDefault_fn(_List_Nil, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$Seo$tagsForVideo, common.b_)), _Utils_ap(_List_fromArray([
            _Utils_Tuple2("og:title", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(common.dz))),
            _Utils_Tuple2("og:url", $elm$core$Maybe$Just($elm$core$Maybe$withDefault_fn($dillonkearns$elm_pages$Head$currentPageFullUrl, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, common.iP)))),
            _Utils_Tuple2("og:description", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(common.i$))),
            _Utils_Tuple2("og:site_name", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(common.kv))),
            _Utils_Tuple2("og:locale", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$Seo$localeToString, common.jC)))
        ]), _Utils_ap($elm$core$List$map_fn(function (alternateLocale) {
            return _Utils_Tuple2("og:locale:alternate", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw($dillonkearns$elm_pages$Head$Seo$localeToString(alternateLocale))));
        }, common.b2), $dillonkearns$elm_pages$Head$Twitter$rawTags(common.co))))));
    };
    var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth = function (month) {
        switch (month) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 5;
            case 5:
                return 6;
            case 6:
                return 7;
            case 7:
                return 8;
            case 8:
                return 9;
            case 9:
                return 10;
            case 10:
                return 11;
            default:
                return 12;
        }
    };
    var $elm$time$Time$flooredDiv_fn = function (numerator, denominator) {
        return $elm$core$Basics$floor(numerator / denominator);
    }, $elm$time$Time$flooredDiv = F2($elm$time$Time$flooredDiv_fn);
    var $elm$time$Time$posixToMillis = function (_v0) {
        var millis = _v0;
        return millis;
    };
    var $elm$time$Time$toAdjustedMinutesHelp_fn = function (defaultOffset, posixMinutes, eras) {
        toAdjustedMinutesHelp: while (true) {
            if (!eras.b) {
                return posixMinutes + defaultOffset;
            }
            else {
                var era = eras.a;
                var olderEras = eras.b;
                if (_Utils_cmp(era.q, posixMinutes) < 0) {
                    return posixMinutes + era.eS;
                }
                else {
                    var $temp$eras = olderEras;
                    eras = $temp$eras;
                    continue toAdjustedMinutesHelp;
                }
            }
        }
    }, $elm$time$Time$toAdjustedMinutesHelp = F3($elm$time$Time$toAdjustedMinutesHelp_fn);
    var $elm$time$Time$toAdjustedMinutes_fn = function (_v0, time) {
        var defaultOffset = _v0.a;
        var eras = _v0.b;
        return $elm$time$Time$toAdjustedMinutesHelp_fn(defaultOffset, $elm$time$Time$flooredDiv_fn($elm$time$Time$posixToMillis(time), 60000), eras);
    }, $elm$time$Time$toAdjustedMinutes = F2($elm$time$Time$toAdjustedMinutes_fn);
    var $elm$core$Basics$ge = _Utils_ge;
    var $elm$time$Time$toCivil = function (minutes) {
        var rawDay = $elm$time$Time$flooredDiv_fn(minutes, 60 * 24) + 719468;
        var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
        var dayOfEra = rawDay - (era * 146097);
        var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
        var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
        var mp = (((5 * dayOfYear) + 2) / 153) | 0;
        var month = mp + ((mp < 10) ? 3 : (-9));
        var year = yearOfEra + (era * 400);
        return {
            hd: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
            hM: month,
            iy: year + ((month <= 2) ? 1 : 0)
        };
    };
    var $elm$time$Time$toDay_fn = function (zone, time) {
        return $elm$time$Time$toCivil($elm$time$Time$toAdjustedMinutes_fn(zone, time)).hd;
    }, $elm$time$Time$toDay = F2($elm$time$Time$toDay_fn);
    var $elm$core$Basics$modBy = _Basics_modBy;
    var $elm$time$Time$toHour_fn = function (zone, time) {
        return _Basics_modBy_fn(24, $elm$time$Time$flooredDiv_fn($elm$time$Time$toAdjustedMinutes_fn(zone, time), 60));
    }, $elm$time$Time$toHour = F2($elm$time$Time$toHour_fn);
    var $elm$time$Time$toMillis_fn = function (_v0, time) {
        return _Basics_modBy_fn(1000, $elm$time$Time$posixToMillis(time));
    }, $elm$time$Time$toMillis = F2($elm$time$Time$toMillis_fn);
    var $elm$time$Time$toMinute_fn = function (zone, time) {
        return _Basics_modBy_fn(60, $elm$time$Time$toAdjustedMinutes_fn(zone, time));
    }, $elm$time$Time$toMinute = F2($elm$time$Time$toMinute_fn);
    var $elm$time$Time$Apr = 3;
    var $elm$time$Time$Aug = 7;
    var $elm$time$Time$Dec = 11;
    var $elm$time$Time$Feb = 1;
    var $elm$time$Time$Jan = 0;
    var $elm$time$Time$Jul = 6;
    var $elm$time$Time$Jun = 5;
    var $elm$time$Time$Mar = 2;
    var $elm$time$Time$May = 4;
    var $elm$time$Time$Nov = 10;
    var $elm$time$Time$Oct = 9;
    var $elm$time$Time$Sep = 8;
    var $elm$time$Time$toMonth_fn = function (zone, time) {
        var _v0 = $elm$time$Time$toCivil($elm$time$Time$toAdjustedMinutes_fn(zone, time)).hM;
        switch (_v0) {
            case 1:
                return 0;
            case 2:
                return 1;
            case 3:
                return 2;
            case 4:
                return 3;
            case 5:
                return 4;
            case 6:
                return 5;
            case 7:
                return 6;
            case 8:
                return 7;
            case 9:
                return 8;
            case 10:
                return 9;
            case 11:
                return 10;
            default:
                return 11;
        }
    }, $elm$time$Time$toMonth = F2($elm$time$Time$toMonth_fn);
    var $elm$core$String$cons = _String_cons;
    var $elm$core$String$fromChar = function (_char) {
        return _String_cons_fn(_char, "");
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $elm$core$String$repeatHelp_fn = function (n, chunk, result) {
        return (n <= 0) ? result : $elm$core$String$repeatHelp_fn(n >> 1, _Utils_ap(chunk, chunk), (!(n & 1)) ? result : _Utils_ap(result, chunk));
    }, $elm$core$String$repeatHelp = F3($elm$core$String$repeatHelp_fn);
    var $elm$core$String$repeat_fn = function (n, chunk) {
        return $elm$core$String$repeatHelp_fn(n, chunk, "");
    }, $elm$core$String$repeat = F2($elm$core$String$repeat_fn);
    var $elm$core$String$padLeft_fn = function (n, _char, string) {
        return _Utils_ap($elm$core$String$repeat_fn(n - $elm$core$String$length(string), $elm$core$String$fromChar(_char)), string);
    }, $elm$core$String$padLeft = F3($elm$core$String$padLeft_fn);
    var $rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn = function (digits, time) {
        return $elm$core$String$padLeft_fn(digits, "0", $elm$core$String$fromInt(time));
    }, $rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString = F2($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn);
    var $elm$time$Time$toSecond_fn = function (_v0, time) {
        return _Basics_modBy_fn(60, $elm$time$Time$flooredDiv_fn($elm$time$Time$posixToMillis(time), 1000));
    }, $elm$time$Time$toSecond = F2($elm$time$Time$toSecond_fn);
    var $elm$time$Time$toYear_fn = function (zone, time) {
        return $elm$time$Time$toCivil($elm$time$Time$toAdjustedMinutes_fn(zone, time)).iy;
    }, $elm$time$Time$toYear = F2($elm$time$Time$toYear_fn);
    var $elm$time$Time$Zone_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$time$Time$Zone = F2($elm$time$Time$Zone_fn);
    var $elm$time$Time$utc = $elm$time$Time$Zone_fn(0, _List_Nil);
    var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime = function (time) {
        return $rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(4, $elm$time$Time$toYear_fn($elm$time$Time$utc, time)) + ("-" + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(2, $rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth($elm$time$Time$toMonth_fn($elm$time$Time$utc, time))) + ("-" + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(2, $elm$time$Time$toDay_fn($elm$time$Time$utc, time)) + ("T" + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(2, $elm$time$Time$toHour_fn($elm$time$Time$utc, time)) + (":" + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(2, $elm$time$Time$toMinute_fn($elm$time$Time$utc, time)) + (":" + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(2, $elm$time$Time$toSecond_fn($elm$time$Time$utc, time)) + ("." + ($rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString_fn(3, $elm$time$Time$toMillis_fn($elm$time$Time$utc, time)) + "Z"))))))))))));
    };
    var $justinmimbs$date$Date$RD = $elm$core$Basics$identity;
    var $justinmimbs$date$Date$isLeapYear = function (y) {
        return ((!_Basics_modBy_fn(4, y)) && (!(!_Basics_modBy_fn(100, y)))) || (!_Basics_modBy_fn(400, y));
    };
    var $justinmimbs$date$Date$daysInMonth_fn = function (y, m) {
        switch (m) {
            case 0:
                return 31;
            case 1:
                return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
            case 2:
                return 31;
            case 3:
                return 30;
            case 4:
                return 31;
            case 5:
                return 30;
            case 6:
                return 31;
            case 7:
                return 31;
            case 8:
                return 30;
            case 9:
                return 31;
            case 10:
                return 30;
            default:
                return 31;
        }
    }, $justinmimbs$date$Date$daysInMonth = F2($justinmimbs$date$Date$daysInMonth_fn);
    var $justinmimbs$date$Date$monthToNumber = function (m) {
        switch (m) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 5;
            case 5:
                return 6;
            case 6:
                return 7;
            case 7:
                return 8;
            case 8:
                return 9;
            case 9:
                return 10;
            case 10:
                return 11;
            default:
                return 12;
        }
    };
    var $justinmimbs$date$Date$numberToMonth = function (mn) {
        var _v0 = $elm$core$Basics$max_fn(1, mn);
        switch (_v0) {
            case 1:
                return 0;
            case 2:
                return 1;
            case 3:
                return 2;
            case 4:
                return 3;
            case 5:
                return 4;
            case 6:
                return 5;
            case 7:
                return 6;
            case 8:
                return 7;
            case 9:
                return 8;
            case 10:
                return 9;
            case 11:
                return 10;
            default:
                return 11;
        }
    };
    var $justinmimbs$date$Date$toCalendarDateHelp_fn = function (y, m, d) {
        toCalendarDateHelp: while (true) {
            var monthDays = $justinmimbs$date$Date$daysInMonth_fn(y, m);
            var mn = $justinmimbs$date$Date$monthToNumber(m);
            if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
                var $temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1), $temp$d = d - monthDays;
                m = $temp$m;
                d = $temp$d;
                continue toCalendarDateHelp;
            }
            else {
                return { hd: d, hM: m, iy: y };
            }
        }
    }, $justinmimbs$date$Date$toCalendarDateHelp = F3($justinmimbs$date$Date$toCalendarDateHelp_fn);
    var $justinmimbs$date$Date$floorDiv_fn = function (a, b) {
        return $elm$core$Basics$floor(a / b);
    }, $justinmimbs$date$Date$floorDiv = F2($justinmimbs$date$Date$floorDiv_fn);
    var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
        var y = y1 - 1;
        var leapYears = ($justinmimbs$date$Date$floorDiv_fn(y, 4) - $justinmimbs$date$Date$floorDiv_fn(y, 100)) + $justinmimbs$date$Date$floorDiv_fn(y, 400);
        return (365 * y) + leapYears;
    };
    var $justinmimbs$date$Date$divWithRemainder_fn = function (a, b) {
        return _Utils_Tuple2($justinmimbs$date$Date$floorDiv_fn(a, b), _Basics_modBy_fn(b, a));
    }, $justinmimbs$date$Date$divWithRemainder = F2($justinmimbs$date$Date$divWithRemainder_fn);
    var $justinmimbs$date$Date$year = function (_v0) {
        var rd = _v0;
        var _v1 = $justinmimbs$date$Date$divWithRemainder_fn(rd, 146097);
        var n400 = _v1.a;
        var r400 = _v1.b;
        var _v2 = $justinmimbs$date$Date$divWithRemainder_fn(r400, 36524);
        var n100 = _v2.a;
        var r100 = _v2.b;
        var _v3 = $justinmimbs$date$Date$divWithRemainder_fn(r100, 1461);
        var n4 = _v3.a;
        var r4 = _v3.b;
        var _v4 = $justinmimbs$date$Date$divWithRemainder_fn(r4, 365);
        var n1 = _v4.a;
        var r1 = _v4.b;
        var n = (!r1) ? 0 : 1;
        return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
    };
    var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
        var rd = _v0;
        var y = $justinmimbs$date$Date$year(rd);
        return {
            gp: rd - $justinmimbs$date$Date$daysBeforeYear(y),
            iy: y
        };
    };
    var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
        var rd = _v0;
        var date = $justinmimbs$date$Date$toOrdinalDate(rd);
        return $justinmimbs$date$Date$toCalendarDateHelp_fn(date.iy, 0, date.gp);
    };
    var $justinmimbs$date$Date$day_a0 = $justinmimbs$date$Date$toCalendarDate, $justinmimbs$date$Date$day_a1 = function ($) {
        return $.hd;
    }, $justinmimbs$date$Date$day = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$day_a0, $justinmimbs$date$Date$day_a1);
    var $elm$core$String$left_fn = function (n, string) {
        return (n < 1) ? "" : _String_slice_fn(0, n, string);
    }, $elm$core$String$left = F2($elm$core$String$left_fn);
    var $justinmimbs$date$Date$month_a0 = $justinmimbs$date$Date$toCalendarDate, $justinmimbs$date$Date$month_a1 = function ($) {
        return $.hM;
    }, $justinmimbs$date$Date$month = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month_a0, $justinmimbs$date$Date$month_a1);
    var $justinmimbs$date$Date$monthNumber_a0 = $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthNumber_a1 = $justinmimbs$date$Date$monthToNumber, $justinmimbs$date$Date$monthNumber = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$monthNumber_a0, $justinmimbs$date$Date$monthNumber_a1);
    var $justinmimbs$date$Date$ordinalDay_a0 = $justinmimbs$date$Date$toOrdinalDate, $justinmimbs$date$Date$ordinalDay_a1 = function ($) {
        return $.gp;
    }, $justinmimbs$date$Date$ordinalDay = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$ordinalDay_a0, $justinmimbs$date$Date$ordinalDay_a1);
    var $elm$core$Basics$abs = function (n) {
        return (n < 0) ? (-n) : n;
    };
    var $justinmimbs$date$Date$padSignedInt_fn = function (length, _int) {
        return _Utils_ap((_int < 0) ? "-" : "", $elm$core$String$padLeft_fn(length, "0", $elm$core$String$fromInt($elm$core$Basics$abs(_int))));
    }, $justinmimbs$date$Date$padSignedInt = F2($justinmimbs$date$Date$padSignedInt_fn);
    var $justinmimbs$date$Date$monthToQuarter = function (m) {
        return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
    };
    var $justinmimbs$date$Date$quarter_a0 = $justinmimbs$date$Date$month, $justinmimbs$date$Date$quarter_a1 = $justinmimbs$date$Date$monthToQuarter, $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1);
    var $elm$core$String$right_fn = function (n, string) {
        return (n < 1) ? "" : _String_slice_fn(-n, $elm$core$String$length(string), string);
    }, $elm$core$String$right = F2($elm$core$String$right_fn);
    var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
        var rd = _v0;
        var _v1 = _Basics_modBy_fn(7, rd);
        if (!_v1) {
            return 7;
        }
        else {
            var n = _v1;
            return n;
        }
    };
    var $justinmimbs$date$Date$daysBeforeWeekYear = function (y) {
        var jan4 = $justinmimbs$date$Date$daysBeforeYear(y) + 4;
        return jan4 - $justinmimbs$date$Date$weekdayNumber(jan4);
    };
    var $elm$time$Time$Fri = 4;
    var $elm$time$Time$Mon = 0;
    var $elm$time$Time$Sat = 5;
    var $elm$time$Time$Sun = 6;
    var $elm$time$Time$Thu = 3;
    var $elm$time$Time$Tue = 1;
    var $elm$time$Time$Wed = 2;
    var $justinmimbs$date$Date$numberToWeekday = function (wdn) {
        var _v0 = $elm$core$Basics$max_fn(1, wdn);
        switch (_v0) {
            case 1:
                return 0;
            case 2:
                return 1;
            case 3:
                return 2;
            case 4:
                return 3;
            case 5:
                return 4;
            case 6:
                return 5;
            default:
                return 6;
        }
    };
    var $justinmimbs$date$Date$toWeekDate = function (_v0) {
        var rd = _v0;
        var wdn = $justinmimbs$date$Date$weekdayNumber(rd);
        var wy = $justinmimbs$date$Date$year(rd + (4 - wdn));
        var week1Day1 = $justinmimbs$date$Date$daysBeforeWeekYear(wy) + 1;
        return {
            iw: 1 + (((rd - week1Day1) / 7) | 0),
            ix: wy,
            kJ: $justinmimbs$date$Date$numberToWeekday(wdn)
        };
    };
    var $justinmimbs$date$Date$weekNumber_a0 = $justinmimbs$date$Date$toWeekDate, $justinmimbs$date$Date$weekNumber_a1 = function ($) {
        return $.iw;
    }, $justinmimbs$date$Date$weekNumber = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekNumber_a0, $justinmimbs$date$Date$weekNumber_a1);
    var $justinmimbs$date$Date$weekYear_a0 = $justinmimbs$date$Date$toWeekDate, $justinmimbs$date$Date$weekYear_a1 = function ($) {
        return $.ix;
    }, $justinmimbs$date$Date$weekYear = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekYear_a0, $justinmimbs$date$Date$weekYear_a1);
    var $justinmimbs$date$Date$weekday_a0 = $justinmimbs$date$Date$weekdayNumber, $justinmimbs$date$Date$weekday_a1 = $justinmimbs$date$Date$numberToWeekday, $justinmimbs$date$Date$weekday = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1);
    var $elm$core$Basics$min_fn = function (x, y) {
        return (_Utils_cmp(x, y) < 0) ? x : y;
    }, $elm$core$Basics$min = F2($elm$core$Basics$min_fn);
    var $justinmimbs$date$Date$ordinalSuffix = function (n) {
        var nn = _Basics_modBy_fn(100, n);
        var _v0 = $elm$core$Basics$min_fn((nn < 20) ? nn : _Basics_modBy_fn(10, nn), 4);
        switch (_v0) {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    };
    var $justinmimbs$date$Date$withOrdinalSuffix = function (n) {
        return _Utils_ap($elm$core$String$fromInt(n), $justinmimbs$date$Date$ordinalSuffix(n));
    };
    var $justinmimbs$date$Date$formatField_fn = function (language, _char, length, date) {
        switch (_char) {
            case "y":
                if (length === 2) {
                    return $elm$core$String$right_fn(2, $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($justinmimbs$date$Date$year(date))));
                }
                else {
                    return $justinmimbs$date$Date$padSignedInt_fn(length, $justinmimbs$date$Date$year(date));
                }
            case "Y":
                if (length === 2) {
                    return $elm$core$String$right_fn(2, $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekYear_a0, $justinmimbs$date$Date$weekYear_a1, date))));
                }
                else {
                    return $justinmimbs$date$Date$padSignedInt_fn(length, $elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekYear_a0, $justinmimbs$date$Date$weekYear_a1, date));
                }
            case "Q":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1, date));
                    case 2:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1, date));
                    case 3:
                        return "Q" + $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1, date));
                    case 4:
                        return $justinmimbs$date$Date$withOrdinalSuffix($elm$core$Basics$composeR_fn($justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1, date));
                    case 5:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$quarter_a0, $justinmimbs$date$Date$quarter_a1, date));
                    default:
                        return "";
                }
            case "M":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$monthNumber_a0, $justinmimbs$date$Date$monthNumber_a1, date));
                    case 2:
                        return $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$monthNumber_a0, $justinmimbs$date$Date$monthNumber_a1, date)));
                    case 3:
                        return language.eN($elm$core$Basics$composeR_fn($justinmimbs$date$Date$month_a0, $justinmimbs$date$Date$month_a1, date));
                    case 4:
                        return language.gk($elm$core$Basics$composeR_fn($justinmimbs$date$Date$month_a0, $justinmimbs$date$Date$month_a1, date));
                    case 5:
                        return $elm$core$String$left_fn(1, language.eN($elm$core$Basics$composeR_fn($justinmimbs$date$Date$month_a0, $justinmimbs$date$Date$month_a1, date)));
                    default:
                        return "";
                }
            case "w":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekNumber_a0, $justinmimbs$date$Date$weekNumber_a1, date));
                    case 2:
                        return $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekNumber_a0, $justinmimbs$date$Date$weekNumber_a1, date)));
                    default:
                        return "";
                }
            case "d":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$day_a0, $justinmimbs$date$Date$day_a1, date));
                    case 2:
                        return $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$day_a0, $justinmimbs$date$Date$day_a1, date)));
                    case 3:
                        return language.fP($elm$core$Basics$composeR_fn($justinmimbs$date$Date$day_a0, $justinmimbs$date$Date$day_a1, date));
                    default:
                        return "";
                }
            case "D":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$ordinalDay_a0, $justinmimbs$date$Date$ordinalDay_a1, date));
                    case 2:
                        return $elm$core$String$padLeft_fn(2, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$ordinalDay_a0, $justinmimbs$date$Date$ordinalDay_a1, date)));
                    case 3:
                        return $elm$core$String$padLeft_fn(3, "0", $elm$core$String$fromInt($elm$core$Basics$composeR_fn($justinmimbs$date$Date$ordinalDay_a0, $justinmimbs$date$Date$ordinalDay_a1, date)));
                    default:
                        return "";
                }
            case "E":
                switch (length) {
                    case 1:
                        return language.cs($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date));
                    case 2:
                        return language.cs($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date));
                    case 3:
                        return language.cs($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date));
                    case 4:
                        return language.gT($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date));
                    case 5:
                        return $elm$core$String$left_fn(1, language.cs($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date)));
                    case 6:
                        return $elm$core$String$left_fn(2, language.cs($elm$core$Basics$composeR_fn($justinmimbs$date$Date$weekday_a0, $justinmimbs$date$Date$weekday_a1, date)));
                    default:
                        return "";
                }
            case "e":
                switch (length) {
                    case 1:
                        return $elm$core$String$fromInt($justinmimbs$date$Date$weekdayNumber(date));
                    case 2:
                        return $elm$core$String$fromInt($justinmimbs$date$Date$weekdayNumber(date));
                    default:
                        return $justinmimbs$date$Date$formatField_fn(language, "E", length, date);
                }
            default:
                return "";
        }
    }, $justinmimbs$date$Date$formatField = F4($justinmimbs$date$Date$formatField_fn);
    var $justinmimbs$date$Date$formatWithTokens_fn = function (language, tokens, date) {
        return $elm$core$List$foldl_fn_unwrapped(function (token, formatted) {
            if (!token.$) {
                var _char = token.a;
                var length = token.b;
                return _Utils_ap($justinmimbs$date$Date$formatField_fn(language, _char, length, date), formatted);
            }
            else {
                var str = token.a;
                return _Utils_ap(str, formatted);
            }
        }, "", tokens);
    }, $justinmimbs$date$Date$formatWithTokens = F3($justinmimbs$date$Date$formatWithTokens_fn);
    var $justinmimbs$date$Pattern$Literal = function (a) {
        return { $: 1, a: a };
    };
    var $elm$parser$Parser$Advanced$Bad_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Bad = F2($elm$parser$Parser$Advanced$Bad_fn);
    var $elm$parser$Parser$Advanced$Good_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $elm$parser$Parser$Advanced$Good = F3($elm$parser$Parser$Advanced$Good_fn);
    var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
    var $elm$parser$Parser$Advanced$andThen_fn = function (callback, _v0) {
        var parseA = _v0;
        return function (s0) {
            var _v1 = parseA(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                var _v2 = callback(a);
                var parseB = _v2;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, b, s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$andThen = F2($elm$parser$Parser$Advanced$andThen_fn);
    var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
    var $elm$core$Basics$always_fn = function (a, _v0) {
        return a;
    }, $elm$core$Basics$always = F2($elm$core$Basics$always_fn);
    var $elm$parser$Parser$Advanced$map2_fn = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var p = _v2.a;
                var x = _v2.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v2.a;
                var a = _v2.b;
                var s1 = _v2.c;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, A2(func, a, b), s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$map2_fn_unwrapped = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var p = _v2.a;
                var x = _v2.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v2.a;
                var a = _v2.b;
                var s1 = _v2.c;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, func(a, b), s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$map2 = F3($elm$parser$Parser$Advanced$map2_fn);
    var $elm$parser$Parser$Advanced$ignorer_fn = function (keepParser, ignoreParser) {
        return $elm$parser$Parser$Advanced$map2_fn($elm$core$Basics$always, keepParser, ignoreParser);
    }, $elm$parser$Parser$Advanced$ignorer = F2($elm$parser$Parser$Advanced$ignorer_fn);
    var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
    var $elm$parser$Parser$Advanced$succeed = function (a) {
        return function (s) {
            return $elm$parser$Parser$Advanced$Good_fn(false, a, s);
        };
    };
    var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
    var $elm$parser$Parser$Expecting = function (a) {
        return { $: 0, a: a };
    };
    var $elm$parser$Parser$Advanced$Token_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Token = F2($elm$parser$Parser$Advanced$Token_fn);
    var $elm$parser$Parser$toToken = function (str) {
        return $elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$Expecting(str));
    };
    var $elm$parser$Parser$Advanced$AddRight_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$parser$Parser$Advanced$AddRight = F2($elm$parser$Parser$Advanced$AddRight_fn);
    var $elm$parser$Parser$Advanced$DeadEnd_fn = function (row, col, problem, contextStack) {
        return { ex: col, fO: contextStack, ka: problem, kk: row };
    }, $elm$parser$Parser$Advanced$DeadEnd = F4($elm$parser$Parser$Advanced$DeadEnd_fn);
    var $elm$parser$Parser$Advanced$Empty = { $: 0 };
    var $elm$parser$Parser$Advanced$fromState_fn = function (s, x) {
        return $elm$parser$Parser$Advanced$AddRight_fn($elm$parser$Parser$Advanced$Empty, $elm$parser$Parser$Advanced$DeadEnd_fn(s.kk, s.ex, x, s.j));
    }, $elm$parser$Parser$Advanced$fromState = F2($elm$parser$Parser$Advanced$fromState_fn);
    var $elm$core$String$isEmpty = function (string) {
        return string === "";
    };
    var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
    var $elm$core$Basics$not = _Basics_not;
    var $elm$parser$Parser$Advanced$token = function (_v0) {
        var str = _v0.a;
        var expecting = _v0.b;
        var progress = !$elm$core$String$isEmpty(str);
        return function (s) {
            var _v1 = _Parser_isSubString_fn(str, s.eS, s.kk, s.ex, s.ky);
            var newOffset = _v1.a;
            var newRow = _v1.b;
            var newCol = _v1.c;
            return newOffset === -1 ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, expecting)) : $elm$parser$Parser$Advanced$Good_fn(progress, 0, { ex: newCol, j: s.j, dV: s.dV, eS: newOffset, kk: newRow, ky: s.ky });
        };
    };
    var $elm$parser$Parser$token = function (str) {
        return $elm$parser$Parser$Advanced$token($elm$parser$Parser$toToken(str));
    };
    var $justinmimbs$date$Pattern$escapedQuote = $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($justinmimbs$date$Pattern$Literal("'")), $elm$parser$Parser$token("''"));
    var $elm$parser$Parser$UnexpectedChar = { $: 11 };
    var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
    var $elm$parser$Parser$Advanced$chompIf_fn = function (isGood, expecting) {
        return function (s) {
            var newOffset = _Parser_isSubChar_fn(isGood, s.eS, s.ky);
            return newOffset === -1 ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, expecting)) : (newOffset === -2 ? $elm$parser$Parser$Advanced$Good_fn(true, 0, { ex: 1, j: s.j, dV: s.dV, eS: s.eS + 1, kk: s.kk + 1, ky: s.ky }) : $elm$parser$Parser$Advanced$Good_fn(true, 0, { ex: s.ex + 1, j: s.j, dV: s.dV, eS: newOffset, kk: s.kk, ky: s.ky }));
        };
    }, $elm$parser$Parser$Advanced$chompIf = F2($elm$parser$Parser$Advanced$chompIf_fn);
    var $elm$parser$Parser$chompIf = function (isGood) {
        return $elm$parser$Parser$Advanced$chompIf_fn(isGood, $elm$parser$Parser$UnexpectedChar);
    };
    var $justinmimbs$date$Pattern$Field_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $justinmimbs$date$Pattern$Field = F2($justinmimbs$date$Pattern$Field_fn);
    var $elm$parser$Parser$Advanced$chompWhileHelp_fn = function (isGood, offset, row, col, s0) {
        chompWhileHelp: while (true) {
            var newOffset = _Parser_isSubChar_fn(isGood, offset, s0.ky);
            if (newOffset === -1) {
                return $elm$parser$Parser$Advanced$Good_fn(_Utils_cmp(s0.eS, offset) < 0, 0, { ex: col, j: s0.j, dV: s0.dV, eS: offset, kk: row, ky: s0.ky });
            }
            else {
                if (newOffset === -2) {
                    var $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    continue chompWhileHelp;
                }
                else {
                    var $temp$offset = newOffset, $temp$col = col + 1;
                    offset = $temp$offset;
                    col = $temp$col;
                    continue chompWhileHelp;
                }
            }
        }
    }, $elm$parser$Parser$Advanced$chompWhileHelp = F5($elm$parser$Parser$Advanced$chompWhileHelp_fn);
    var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
        return function (s) {
            return $elm$parser$Parser$Advanced$chompWhileHelp_fn(isGood, s.eS, s.kk, s.ex, s);
        };
    };
    var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
    var $elm$parser$Parser$Advanced$getOffset = function (s) {
        return $elm$parser$Parser$Advanced$Good_fn(false, s.eS, s);
    };
    var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
    var $elm$parser$Parser$Advanced$keeper_fn = function (parseFunc, parseArg) {
        return $elm$parser$Parser$Advanced$map2_fn($elm$core$Basics$apL, parseFunc, parseArg);
    }, $elm$parser$Parser$Advanced$keeper = F2($elm$parser$Parser$Advanced$keeper_fn);
    var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
    var $elm$parser$Parser$Problem = function (a) {
        return { $: 12, a: a };
    };
    var $elm$parser$Parser$Advanced$problem = function (x) {
        return function (s) {
            return $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, x));
        };
    };
    var $elm$parser$Parser$problem = function (msg) {
        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem(msg));
    };
    var $elm$core$String$foldr = _String_foldr;
    var $elm$core$String$toList = function (string) {
        return _String_foldr_fn($elm$core$List$cons, _List_Nil, string);
    };
    var $justinmimbs$date$Pattern$fieldRepeats = function (str) {
        var _v0 = $elm$core$String$toList(str);
        if (_v0.b && (!_v0.b.b)) {
            var _char = _v0.a;
            return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F2(function (x, y) {
                return $justinmimbs$date$Pattern$Field_fn(_char, 1 + (y - x));
            })), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$getOffset, $elm$parser$Parser$chompWhile($elm$core$Basics$eq(_char)))), $elm$parser$Parser$getOffset);
        }
        else {
            return $elm$parser$Parser$problem("expected exactly one char");
        }
    };
    var $elm$parser$Parser$Advanced$mapChompedString_fn = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, A2(func, _String_slice_fn(s0.eS, s1.eS, s0.ky), a), s1);
            }
        };
    }, $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, func(_String_slice_fn(s0.eS, s1.eS, s0.ky), a), s1);
            }
        };
    }, $elm$parser$Parser$Advanced$mapChompedString = F2($elm$parser$Parser$Advanced$mapChompedString_fn);
    var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
        return $elm$parser$Parser$Advanced$mapChompedString_fn($elm$core$Basics$always, parser);
    };
    var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
    var $justinmimbs$date$Pattern$field = $elm$parser$Parser$Advanced$andThen_fn($justinmimbs$date$Pattern$fieldRepeats, $elm$parser$Parser$getChompedString($elm$parser$Parser$chompIf($elm$core$Char$isAlpha)));
    var $justinmimbs$date$Pattern$finalize_a0 = F2(function (token, tokens) {
        var _v0 = _Utils_Tuple2(token, tokens);
        if (((_v0.a.$ === 1) && _v0.b.b) && (_v0.b.a.$ === 1)) {
            var x = _v0.a.a;
            var _v1 = _v0.b;
            var y = _v1.a.a;
            var rest = _v1.b;
            return _List_Cons($justinmimbs$date$Pattern$Literal(_Utils_ap(x, y)), rest);
        }
        else {
            return _List_Cons(token, tokens);
        }
    }), $justinmimbs$date$Pattern$finalize_a1 = _List_Nil, $justinmimbs$date$Pattern$finalize = A2($elm$core$List$foldl, $justinmimbs$date$Pattern$finalize_a0, $justinmimbs$date$Pattern$finalize_a1);
    var $elm$parser$Parser$Advanced$lazy = function (thunk) {
        return function (s) {
            var _v0 = thunk(0);
            var parse = _v0;
            return parse(s);
        };
    };
    var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
    var $justinmimbs$date$Pattern$isLiteralChar = function (_char) {
        return (_char !== "'") && (!$elm$core$Char$isAlpha(_char));
    };
    var $elm$parser$Parser$Advanced$map_fn = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, func(a), s1);
            }
            else {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
        };
    }, $elm$parser$Parser$Advanced$map = F2($elm$parser$Parser$Advanced$map_fn);
    var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
    var $justinmimbs$date$Pattern$literal = $elm$parser$Parser$Advanced$map_fn($justinmimbs$date$Pattern$Literal, $elm$parser$Parser$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(0), $elm$parser$Parser$chompIf($justinmimbs$date$Pattern$isLiteralChar)), $elm$parser$Parser$chompWhile($justinmimbs$date$Pattern$isLiteralChar))));
    var $elm$parser$Parser$Advanced$Append_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Append = F2($elm$parser$Parser$Advanced$Append_fn);
    var $elm$parser$Parser$Advanced$oneOfHelp_fn = function (s0, bag, parsers) {
        oneOfHelp: while (true) {
            if (!parsers.b) {
                return $elm$parser$Parser$Advanced$Bad_fn(false, bag);
            }
            else {
                var parse = parsers.a;
                var remainingParsers = parsers.b;
                var _v1 = parse(s0);
                if (!_v1.$) {
                    var step = _v1;
                    return step;
                }
                else {
                    var step = _v1;
                    var p = step.a;
                    var x = step.b;
                    if (p) {
                        return step;
                    }
                    else {
                        var $temp$bag = $elm$parser$Parser$Advanced$Append_fn(bag, x), $temp$parsers = remainingParsers;
                        bag = $temp$bag;
                        parsers = $temp$parsers;
                        continue oneOfHelp;
                    }
                }
            }
        }
    }, $elm$parser$Parser$Advanced$oneOfHelp = F3($elm$parser$Parser$Advanced$oneOfHelp_fn);
    var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
        return function (s) {
            return $elm$parser$Parser$Advanced$oneOfHelp_fn(s, $elm$parser$Parser$Advanced$Empty, parsers);
        };
    };
    var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
    var $elm$parser$Parser$ExpectingEnd = { $: 10 };
    var $elm$parser$Parser$Advanced$end = function (x) {
        return function (s) {
            return _Utils_eq($elm$core$String$length(s.ky), s.eS) ? $elm$parser$Parser$Advanced$Good_fn(false, 0, s) : $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, x));
        };
    };
    var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
    var $justinmimbs$date$Pattern$quotedHelp = function (result) {
        return $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$andThen_fn(function (str) {
                return $justinmimbs$date$Pattern$quotedHelp(_Utils_ap(result, str));
            }, $elm$parser$Parser$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(0), $elm$parser$Parser$chompIf($elm$core$Basics$neq("'"))), $elm$parser$Parser$chompWhile($elm$core$Basics$neq("'"))))),
            $elm$parser$Parser$Advanced$andThen_fn(function (_v0) {
                return $justinmimbs$date$Pattern$quotedHelp(result + "'");
            }, $elm$parser$Parser$token("''")),
            $elm$parser$Parser$succeed(result)
        ]));
    };
    var $justinmimbs$date$Pattern$quoted = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($justinmimbs$date$Pattern$Literal), $elm$parser$Parser$chompIf($elm$core$Basics$eq("'"))), $elm$parser$Parser$Advanced$ignorer_fn($justinmimbs$date$Pattern$quotedHelp(""), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$chompIf($elm$core$Basics$eq("'")),
        $elm$parser$Parser$end
    ]))));
    var $justinmimbs$date$Pattern$patternHelp = function (tokens) {
        return $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$andThen_fn(function (token) {
                return $justinmimbs$date$Pattern$patternHelp(_List_Cons(token, tokens));
            }, $elm$parser$Parser$oneOf(_List_fromArray([$justinmimbs$date$Pattern$field, $justinmimbs$date$Pattern$literal, $justinmimbs$date$Pattern$escapedQuote, $justinmimbs$date$Pattern$quoted]))),
            $elm$parser$Parser$lazy(function (_v0) {
                return $elm$parser$Parser$succeed($elm$core$List$foldl_fn($justinmimbs$date$Pattern$finalize_a0, $justinmimbs$date$Pattern$finalize_a1, tokens));
            })
        ]));
    };
    var $elm$parser$Parser$DeadEnd_fn = function (row, col, problem) {
        return { ex: col, ka: problem, kk: row };
    }, $elm$parser$Parser$DeadEnd = F3($elm$parser$Parser$DeadEnd_fn);
    var $elm$parser$Parser$problemToDeadEnd = function (p) {
        return $elm$parser$Parser$DeadEnd_fn(p.kk, p.ex, p.ka);
    };
    var $elm$parser$Parser$Advanced$bagToList_fn = function (bag, list) {
        bagToList: while (true) {
            switch (bag.$) {
                case 0:
                    return list;
                case 1:
                    var bag1 = bag.a;
                    var x = bag.b;
                    var $temp$bag = bag1, $temp$list = _List_Cons(x, list);
                    bag = $temp$bag;
                    list = $temp$list;
                    continue bagToList;
                default:
                    var bag1 = bag.a;
                    var bag2 = bag.b;
                    var $temp$bag = bag1, $temp$list = $elm$parser$Parser$Advanced$bagToList_fn(bag2, list);
                    bag = $temp$bag;
                    list = $temp$list;
                    continue bagToList;
            }
        }
    }, $elm$parser$Parser$Advanced$bagToList = F2($elm$parser$Parser$Advanced$bagToList_fn);
    var $elm$parser$Parser$Advanced$run_fn = function (_v0, src) {
        var parse = _v0;
        var _v1 = parse({ ex: 1, j: _List_Nil, dV: 1, eS: 0, kk: 1, ky: src });
        if (!_v1.$) {
            var value = _v1.b;
            return $elm$core$Result$Ok(value);
        }
        else {
            var bag = _v1.b;
            return $elm$core$Result$Err($elm$parser$Parser$Advanced$bagToList_fn(bag, _List_Nil));
        }
    }, $elm$parser$Parser$Advanced$run = F2($elm$parser$Parser$Advanced$run_fn);
    var $elm$parser$Parser$run_fn = function (parser, source) {
        var _v0 = $elm$parser$Parser$Advanced$run_fn(parser, source);
        if (!_v0.$) {
            var a = _v0.a;
            return $elm$core$Result$Ok(a);
        }
        else {
            var problems = _v0.a;
            return $elm$core$Result$Err($elm$core$List$map_fn($elm$parser$Parser$problemToDeadEnd, problems));
        }
    }, $elm$parser$Parser$run = F2($elm$parser$Parser$run_fn);
    var $elm$core$Result$withDefault_fn = function (def, result) {
        if (!result.$) {
            var a = result.a;
            return a;
        }
        else {
            return def;
        }
    }, $elm$core$Result$withDefault = F2($elm$core$Result$withDefault_fn);
    var $justinmimbs$date$Pattern$fromString = function (str) {
        return $elm$core$Result$withDefault_fn(_List_fromArray([
            $justinmimbs$date$Pattern$Literal(str)
        ]), $elm$parser$Parser$run_fn($justinmimbs$date$Pattern$patternHelp(_List_Nil), str));
    };
    var $justinmimbs$date$Date$formatWithLanguage_fn = function (language, pattern) {
        var tokens = $elm$core$List$reverse($justinmimbs$date$Pattern$fromString(pattern));
        return A2($justinmimbs$date$Date$formatWithTokens, language, tokens);
    }, $justinmimbs$date$Date$formatWithLanguage = F2($justinmimbs$date$Date$formatWithLanguage_fn);
    var $justinmimbs$date$Date$monthToName = function (m) {
        switch (m) {
            case 0:
                return "January";
            case 1:
                return "February";
            case 2:
                return "March";
            case 3:
                return "April";
            case 4:
                return "May";
            case 5:
                return "June";
            case 6:
                return "July";
            case 7:
                return "August";
            case 8:
                return "September";
            case 9:
                return "October";
            case 10:
                return "November";
            default:
                return "December";
        }
    };
    var $justinmimbs$date$Date$weekdayToName = function (wd) {
        switch (wd) {
            case 0:
                return "Monday";
            case 1:
                return "Tuesday";
            case 2:
                return "Wednesday";
            case 3:
                return "Thursday";
            case 4:
                return "Friday";
            case 5:
                return "Saturday";
            default:
                return "Sunday";
        }
    };
    var $justinmimbs$date$Date$language_en = {
        fP: $justinmimbs$date$Date$withOrdinalSuffix,
        gk: $justinmimbs$date$Date$monthToName,
        eN: A2($elm$core$Basics$composeR, $justinmimbs$date$Date$monthToName, $elm$core$String$left(3)),
        gT: $justinmimbs$date$Date$weekdayToName,
        cs: A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekdayToName, $elm$core$String$left(3))
    };
    var $justinmimbs$date$Date$format = function (pattern) {
        return $justinmimbs$date$Date$formatWithLanguage_fn($justinmimbs$date$Date$language_en, pattern);
    };
    var $justinmimbs$date$Date$toIsoString = $justinmimbs$date$Date$format("yyyy-MM-dd");
    var $dillonkearns$elm_date_or_date_time$DateOrDateTime$toIso8601 = function (dateOrDateTime) {
        if (!dateOrDateTime.$) {
            var date = dateOrDateTime.a;
            return $justinmimbs$date$Date$toIsoString(date);
        }
        else {
            var dateTime = dateOrDateTime.a;
            return $rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime(dateTime);
        }
    };
    var $dillonkearns$elm_pages$Head$Seo$tags = function (_v0) {
        var common = _v0.a;
        var details = _v0.b;
        return $elm$core$List$append_fn(_List_fromArray([
            $dillonkearns$elm_pages$Head$canonicalLink(common.iP),
            $dillonkearns$elm_pages$Head$metaName_fn("description", $dillonkearns$elm_pages$Head$raw(common.i$))
        ]), $elm$core$List$filterMap_fn(function (_v2) {
            var name = _v2.a;
            var maybeContent = _v2.b;
            return $elm$core$Maybe$map_fn(function (metaContent) {
                return $dillonkearns$elm_pages$Head$metaProperty_fn(name, metaContent);
            }, maybeContent);
        }, _Utils_ap($dillonkearns$elm_pages$Head$Seo$tagsForCommon(common), function () {
            switch (details.$) {
                case 0:
                    return _List_fromArray([
                        _Utils_Tuple2("og:type", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw("website")))
                    ]);
                case 1:
                    var articleDetails = details.a;
                    return _Utils_ap(_List_fromArray([
                        _Utils_Tuple2("og:type", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw("article"))),
                        _Utils_Tuple2("article:section", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, articleDetails.gz)),
                        _Utils_Tuple2("article:published_time", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_date_or_date_time$DateOrDateTime$toIso8601, $dillonkearns$elm_pages$Head$raw), articleDetails.gt)),
                        _Utils_Tuple2("article:modified_time", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_date_or_date_time$DateOrDateTime$toIso8601, $dillonkearns$elm_pages$Head$raw), articleDetails.gj)),
                        _Utils_Tuple2("article:expiration_time", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_date_or_date_time$DateOrDateTime$toIso8601, $dillonkearns$elm_pages$Head$raw), articleDetails.f_))
                    ]), $elm$core$List$map_fn(function (tag) {
                        return _Utils_Tuple2("article:tag", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(tag)));
                    }, articleDetails.gJ));
                case 2:
                    var bookDetails = details.a;
                    return _Utils_ap(_List_fromArray([
                        _Utils_Tuple2("og:type", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw("book"))),
                        _Utils_Tuple2("og:isbn", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, bookDetails.gb)),
                        _Utils_Tuple2("og:release_date", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_date_or_date_time$DateOrDateTime$toIso8601, $dillonkearns$elm_pages$Head$raw), bookDetails.gx))
                    ]), $elm$core$List$map_fn(function (tag) {
                        return _Utils_Tuple2("book:tag", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(tag)));
                    }, bookDetails.gJ));
                case 3:
                    var songDetails = details.a;
                    return _List_fromArray([
                        _Utils_Tuple2("og:type", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw("music.song"))),
                        _Utils_Tuple2("music:duration", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, songDetails.fW))),
                        _Utils_Tuple2("music:album:disc", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, songDetails.fT))),
                        _Utils_Tuple2("music:album:track", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, $elm$core$Maybe$map_fn($elm$core$String$fromInt, songDetails.gM)))
                    ]);
                default:
                    var profileDetails = details.a;
                    return _List_fromArray([
                        _Utils_Tuple2("og:type", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw("profile"))),
                        _Utils_Tuple2("profile:first_name", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(profileDetails.f0))),
                        _Utils_Tuple2("profile:last_name", $elm$core$Maybe$Just($dillonkearns$elm_pages$Head$raw(profileDetails.ge))),
                        _Utils_Tuple2("profile:username", $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Head$raw, profileDetails.gQ))
                    ]);
            }
        }())));
    };
    var $dillonkearns$elm_pages$Head$Seo$website = function (common) {
        return $dillonkearns$elm_pages$Head$Seo$tags($dillonkearns$elm_pages$Head$Seo$Content_fn(common, $dillonkearns$elm_pages$Head$Seo$Website));
    };
    var $author$project$Route$Article$head = function (app) {
        return $dillonkearns$elm_pages$Head$Seo$website($dillonkearns$elm_pages$Head$Seo$summary($author$project$Shared$seo));
    };
    var $author$project$RouteBuilder$serverRender = function (_v0) {
        var head = _v0.bi;
        var action = _v0.fs;
        var data = _v0.hc;
        return {
            fs: F2(function (request, routeParams) {
                return A2(action, routeParams, request);
            }),
            hc: F2(function (request, routeParams) {
                return A2(data, routeParams, request);
            }),
            cf: F3(function (moduleContext, toRecord, routeParams) {
                return $dillonkearns$elm_pages$BackendTask$succeed($elm$core$Maybe$Nothing);
            }),
            bi: head,
            av: "serverless",
            fb: true,
            du: $dillonkearns$elm_pages$BackendTask$succeed(_List_Nil)
        };
    };
    var $author$project$Route$Article$view_fn = function (app, shared) {
        return { iL: _List_Nil, dz: "Article" };
    }, $author$project$Route$Article$view = F2($author$project$Route$Article$view_fn);
    var $author$project$Route$Article$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$Article$view }, $author$project$RouteBuilder$serverRender({
        fs: F2(function (_v0, _v1) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        }),
        hc: F2(function (_v2, _v3) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        }),
        bi: $author$project$Route$Article$head
    }));
    var $elm$core$Result$andThen_fn = function (callback, result) {
        if (!result.$) {
            var value = result.a;
            return callback(value);
        }
        else {
            var msg = result.a;
            return $elm$core$Result$Err(msg);
        }
    }, $elm$core$Result$andThen = F2($elm$core$Result$andThen_fn);
    var $elm$core$Result$mapError_fn = function (f, result) {
        if (!result.$) {
            var v = result.a;
            return $elm$core$Result$Ok(v);
        }
        else {
            var e = result.a;
            return $elm$core$Result$Err(f(e));
        }
    }, $elm$core$Result$mapError = F2($elm$core$Result$mapError_fn);
    var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Markdown$Html$resultOr_fn = function (ra, rb) {
        if (ra.$ === 1) {
            var singleError = ra.a;
            if (!rb.$) {
                var okValue = rb.a;
                return $elm$core$Result$Ok(okValue);
            }
            else {
                var errorsSoFar = rb.a;
                return $elm$core$Result$Err(_List_Cons(singleError, errorsSoFar));
            }
        }
        else {
            var okValue = ra.a;
            return $elm$core$Result$Ok(okValue);
        }
    }, $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2($dillonkearns$elm_markdown$Markdown$Html$resultOr_fn);
    var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
        return $elm$core$String$join_fn(" ", $elm$core$List$map_fn(function (_v0) {
            var value = _v0.is;
            var name = _v0.jM;
            return name + ("=\"" + (value + "\""));
        }, attributes));
    };
    var $elm$core$List$isEmpty = function (xs) {
        if (!xs.b) {
            return true;
        }
        else {
            return false;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Html$tagToString_fn = function (tagName, attributes) {
        return $elm$core$List$isEmpty(attributes) ? ("<" + (tagName + ">")) : ("<" + (tagName + (" " + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + ">"))));
    }, $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2($dillonkearns$elm_markdown$Markdown$Html$tagToString_fn);
    var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
        var unwrappedDecoders = $elm$core$List$map_fn(function (_v4) {
            var rawDecoder = _v4;
            return rawDecoder;
        }, decoders);
        return function (rawDecoder) {
            return F3(function (tagName, attributes, innerBlocks) {
                return $elm$core$Result$mapError_fn(function (errors) {
                    if (!errors.b) {
                        return "Ran into a oneOf with no possibilities!";
                    }
                    else {
                        if (!errors.b.b) {
                            var singleError = errors.a;
                            return "Problem with the given value:\n\n" + ($dillonkearns$elm_markdown$Markdown$Html$tagToString_fn(tagName, attributes) + ("\n\n" + (singleError + "\n")));
                        }
                        else {
                            return "oneOf failed parsing this value:\n    " + ($dillonkearns$elm_markdown$Markdown$Html$tagToString_fn(tagName, attributes) + ("\n\nParsing failed in the following 2 ways:\n\n\n" + ($elm$core$String$join_fn("\n\n", $elm$core$List$indexedMap_fn_unwrapped(function (index, error) {
                                return "(" + ($elm$core$String$fromInt(index + 1) + (") " + error));
                            }, errors)) + "\n")));
                        }
                    }
                }, A3(rawDecoder, tagName, attributes, innerBlocks));
            });
        }($elm$core$List$foldl_fn_unwrapped(function (decoder, soFar) {
            return F3(function (tagName, attributes, children) {
                return $dillonkearns$elm_markdown$Markdown$Html$resultOr_fn(A3(decoder, tagName, attributes, children), A3(soFar, tagName, attributes, children));
            });
        }, F3(function (_v0, _v1, _v2) {
            return $elm$core$Result$Err(_List_Nil);
        }), unwrappedDecoders));
    };
    var $author$project$MarkdownRenderer$omittedStringRenderer = {
        g2: $elm$core$String$join(" "),
        g8: $elm$core$Basics$always(" (...code) "),
        g9: $elm$core$Basics$identity,
        hg: $elm$core$String$join(" "),
        hw: "",
        hx: A2($elm$core$Basics$composeR, function ($) {
            return $.g7;
        }, $elm$core$String$join(" ")),
        hy: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
        hB: function ($) {
            return $.gY;
        },
        hJ: function (_v0) {
            return $elm$core$String$join(" ");
        },
        hT: F2(function (_v1, items) {
            return $elm$core$String$join_fn(" ", $elm$core$List$map_fn($elm$core$String$join(" "), items));
        }),
        hW: $elm$core$String$join(" "),
        h9: $elm$core$String$join(" "),
        ia: $elm$core$String$join(" "),
        ib: $elm$core$String$join(" "),
        ic: $elm$core$String$join(" "),
        id: F2(function (_v2, content) {
            return $elm$core$String$join_fn(" ", content);
        }),
        ie: $elm$core$String$join(" "),
        $8: F2(function (_v3, content) {
            return $elm$core$String$join_fn(" ", content);
        }),
        ig: $elm$core$String$join(" "),
        ii: $elm$core$Basics$identity,
        ik: "",
        ir: function (items) {
            return $elm$core$String$join_fn(" ", $elm$core$List$map_fn(function (_v4) {
                var item = _v4.b;
                return $elm$core$String$join_fn(" ", item);
            }, items));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = { $: 10 };
    var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
        return { $: 11, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
        return { $: 7, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
        return { $: 6, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = 2;
    var $elm$parser$Parser$Advanced$Done = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis_fn = function (a, b) {
        return { $: 6, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = { $: 0 };
    var $elm$parser$Parser$ExpectingSymbol = function (a) {
        return { $: 8, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$Block$Heading_fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Block$Heading = F2($dillonkearns$elm_markdown$Markdown$Block$Heading_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Image_fn = function (a, b, c) {
        return { $: 2, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Block$Image = F3($dillonkearns$elm_markdown$Markdown$Block$Image_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = 1;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
        return { $: 6, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Link_fn = function (a, b, c) {
        return { $: 1, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Block$Link = F3($dillonkearns$elm_markdown$Markdown$Block$Link_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$ListItem_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2($dillonkearns$elm_markdown$Markdown$Block$ListItem_fn);
    var $elm$parser$Parser$Advanced$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$NoTask = 0;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$OrderedList_fn = function (a, b, c) {
        return { $: 2, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3($dillonkearns$elm_markdown$Markdown$Block$OrderedList_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn = function (a, b, c, d, e, f) {
        return { $: 4, a: a, b: b, c: c, d: d, e: e, f: f };
    }, $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function (a) {
        return { $: 12, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Table_fn = function (a, b) {
        return { $: 6, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Block$Table = F2($dillonkearns$elm_markdown$Markdown$Block$Table_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
        return { $: 8, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Table$Table_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Table$Table = F2($dillonkearns$elm_markdown$Markdown$Table$Table_fn);
    var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
        return { $: 7, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = { $: 7 };
    var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2($dillonkearns$elm_markdown$Markdown$Block$UnorderedList_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn = function (a, b, c, d) {
        return { $: 3, a: a, b: b, c: c, d: d };
    }, $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn);
    var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Markdown$Parser$addReference_fn = function (state, linkRef) {
        return {
            a: _List_Cons(linkRef, state.a),
            b: state.b
        };
    }, $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2($dillonkearns$elm_markdown$Markdown$Parser$addReference_fn);
    var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(false, x);
            }
            else {
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(false, a, s1);
            }
        };
    };
    var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
        switch (_char) {
            case " ":
                return true;
            case "\t":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = $elm$parser$Parser$Advanced$Token_fn("\r", $elm$parser$Parser$Expecting("a carriage return"));
    var $dillonkearns$elm_markdown$Parser$Token$newline = $elm$parser$Parser$Advanced$Token_fn("\n", $elm$parser$Parser$Expecting("a newline"));
    var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
            $elm$parser$Parser$Advanced$succeed(0)
        ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = $elm$parser$Parser$Advanced$map_fn(function (_v0) {
        return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
    }, $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $dillonkearns$elm_markdown$Whitespace$lineEnd));
    var $dillonkearns$elm_markdown$Parser$Token$space = $elm$parser$Parser$Advanced$Token_fn(" ", $elm$parser$Parser$Expecting("a space"));
    var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
    var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray([
        $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn(">", $elm$parser$Parser$Expecting(">"))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn(">", $elm$parser$Parser$Expecting(" >"))),
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn(" >", $elm$parser$Parser$Expecting("  >"))),
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("  >", $elm$parser$Parser$Expecting("   >")))
        ])))
    ]);
    var $elm$core$Basics$composeL_fn = function (g, f, x) {
        return g(f(x));
    }, $elm$core$Basics$composeL = F3($elm$core$Basics$composeL_fn);
    var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
        switch (_char) {
            case "\n":
                return true;
            case "\r":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
    var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("the end of the input"));
    var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
    var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote), $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
        $elm$parser$Parser$Advanced$succeed(0)
    ]))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $elm$core$List$concat = function (lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.b; lists = lists.b) {
            var xs = lists.a;
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = lists.a;
        return tmp.b;
    };
    var $elm$core$List$concatMap_fn = function (f, lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.
            b; lists = lists.b) {
            var xs = f(lists.a);
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = f(lists.a);
        return tmp.b;
    }, $elm$core$List$concatMap = F2($elm$core$List$concatMap_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
        switch (problem.$) {
            case 0:
                var string = problem.a;
                return "Expecting " + string;
            case 1:
                return "Expecting int";
            case 2:
                return "Expecting hex";
            case 3:
                return "Expecting octal";
            case 4:
                return "Expecting binary";
            case 5:
                return "Expecting float";
            case 6:
                return "Expecting number";
            case 7:
                return "Expecting variable";
            case 8:
                var string = problem.a;
                return "Expecting symbol " + string;
            case 9:
                var string = problem.a;
                return "Expecting keyword " + string;
            case 10:
                return "Expecting keyword end";
            case 11:
                return "Unexpected char";
            case 12:
                var problemDescription = problem.a;
                return problemDescription;
            default:
                return "Bad repeat";
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
        return "Problem at row " + ($elm$core$String$fromInt(deadEnd.kk) + ("\n" + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.ka)));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
        return $elm$core$String$join_fn("\n", $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph = function (block) {
        endWithOpenBlockOrParagraph: while (true) {
            switch (block.$) {
                case 1:
                    var str = block.a;
                    return !_String_endsWith_fn(str, "\n");
                case 12:
                    var blocks = block.a;
                    if (blocks.b) {
                        var last = blocks.a;
                        var $temp$block = last;
                        block = $temp$block;
                        continue endWithOpenBlockOrParagraph;
                    }
                    else {
                        return false;
                    }
                case 4:
                    var blockslist = block.e;
                    if (blockslist.b) {
                        var blocks = blockslist.a;
                        if (blocks.b) {
                            var last = blocks.a;
                            var $temp$block = last;
                            block = $temp$block;
                            continue endWithOpenBlockOrParagraph;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        return false;
                    }
                case 0:
                    return true;
                default:
                    return false;
            }
        }
    };
    var $elm$core$Dict$RBEmpty_elm_builtin = { $: -2 };
    var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
    var $elm$core$Dict$Black = 1;
    var $elm$core$Dict$RBNode_elm_builtin_fn = function (a, b, c, d, e) {
        return { $: -1, a: a, b: b, c: c, d: d, e: e };
    }, $elm$core$Dict$RBNode_elm_builtin = F5($elm$core$Dict$RBNode_elm_builtin_fn);
    var $elm$core$Dict$Red = 0;
    var $elm$core$Dict$balance_fn = function (color, key, value, left, right) {
        if ((right.$ === -1) && (!right.a)) {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if ((left.$ === -1) && (!left.a)) {
                var _v3 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBNode_elm_builtin_fn(1, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, rK, rV, rLeft, rRight));
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, rK, rV, $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, left, rLeft), rRight);
            }
        }
        else {
            if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
                var _v5 = left.a;
                var lK = left.b;
                var lV = left.c;
                var _v6 = left.d;
                var _v7 = _v6.a;
                var llK = _v6.b;
                var llV = _v6.c;
                var llLeft = _v6.d;
                var llRight = _v6.e;
                var lRight = left.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, $elm$core$Dict$RBNode_elm_builtin_fn(1, llK, llV, llLeft, llRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, key, value, lRight, right));
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, left, right);
            }
        }
    }, $elm$core$Dict$balance = F5($elm$core$Dict$balance_fn);
    var $elm$core$Basics$compare = _Utils_compare;
    var $elm$core$Dict$insertHelp_fn = function (key, value, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
        }
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = _Utils_compare_fn(key, nKey);
            switch (_v1) {
                case 0:
                    return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$insertHelp_fn(key, value, nLeft), nRight);
                case 1:
                    return $elm$core$Dict$RBNode_elm_builtin_fn(nColor, nKey, value, nLeft, nRight);
                default:
                    return $elm$core$Dict$balance_fn(nColor, nKey, nValue, nLeft, $elm$core$Dict$insertHelp_fn(key, value, nRight));
            }
        }
    }, $elm$core$Dict$insertHelp = F3($elm$core$Dict$insertHelp_fn);
    var $elm$core$Dict$insert_fn = function (key, value, dict) {
        var _v0 = $elm$core$Dict$insertHelp_fn(key, value, dict);
        if ((_v0.$ === -1) && (!_v0.a)) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, l, r);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $elm$core$Dict$insert = F3($elm$core$Dict$insert_fn);
    var $elm$core$Dict$fromList = function (assocs) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, dict) {
            var key = _v0.a;
            var value = _v0.b;
            return $elm$core$Dict$insert_fn(key, value, dict);
        }, $elm$core$Dict$empty, assocs);
    };
    var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$Element_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$HtmlParser$Element = F3($dillonkearns$elm_markdown$HtmlParser$Element_fn);
    var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting("at least 1 tag name character");
    var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
        switch (c) {
            case " ":
                return false;
            case "\r":
                return false;
            case "\n":
                return false;
            case "\t":
                return false;
            case "/":
                return false;
            case "<":
                return false;
            case ">":
                return false;
            case "\"":
                return false;
            case "'":
                return false;
            case "=":
                return false;
            default:
                return true;
        }
    };
    var $elm$core$String$toLower = _String_toLower;
    var $dillonkearns$elm_markdown$HtmlParser$tagName = $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (name, _v0) {
        return $elm$core$String$toLower(name);
    }, $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
    var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
    var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
        return $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$ExpectingSymbol(str)));
    };
    var $elm$parser$Parser$Advanced$loopHelp_fn = function (p, state, callback, s0) {
        loopHelp: while (true) {
            var _v0 = callback(state);
            var parse = _v0;
            var _v1 = parse(s0);
            if (!_v1.$) {
                var p1 = _v1.a;
                var step = _v1.b;
                var s1 = _v1.c;
                if (!step.$) {
                    var newState = step.a;
                    var $temp$p = p || p1, $temp$state = newState, $temp$s0 = s1;
                    p = $temp$p;
                    state = $temp$state;
                    s0 = $temp$s0;
                    continue loopHelp;
                }
                else {
                    var result = step.a;
                    return $elm$parser$Parser$Advanced$Good_fn(p || p1, result, s1);
                }
            }
            else {
                var p1 = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p || p1, x);
            }
        }
    }, $elm$parser$Parser$Advanced$loopHelp = F4($elm$parser$Parser$Advanced$loopHelp_fn);
    var $elm$parser$Parser$Advanced$loop_fn = function (state, callback) {
        return function (s) {
            return $elm$parser$Parser$Advanced$loopHelp_fn(false, state, callback, s);
        };
    }, $elm$parser$Parser$Advanced$loop = F2($elm$parser$Parser$Advanced$loop_fn);
    var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(_List_fromArray([
        _Utils_Tuple2("amp", "&"),
        _Utils_Tuple2("lt", "<"),
        _Utils_Tuple2("gt", ">"),
        _Utils_Tuple2("apos", "'"),
        _Utils_Tuple2("quot", "\"")
    ]));
    var $elm$core$Char$fromCode = _Char_fromCode;
    var $elm$core$Result$fromMaybe_fn = function (err, maybe) {
        if (!maybe.$) {
            var v = maybe.a;
            return $elm$core$Result$Ok(v);
        }
        else {
            return $elm$core$Result$Err(err);
        }
    }, $elm$core$Result$fromMaybe = F2($elm$core$Result$fromMaybe_fn);
    var $elm$core$Basics$pow = _Basics_pow;
    var $rtfeldman$elm_hex$Hex$fromStringHelp_fn = function (position, chars, accumulated) {
        fromStringHelp: while (true) {
            if (!chars.b) {
                return $elm$core$Result$Ok(accumulated);
            }
            else {
                var _char = chars.a;
                var rest = chars.b;
                switch (_char) {
                    case "0":
                        var $temp$position = position - 1, $temp$chars = rest;
                        position = $temp$position;
                        chars = $temp$chars;
                        continue fromStringHelp;
                    case "1":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + _Basics_pow_fn(16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "2":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (2 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "3":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (3 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "4":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (4 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "5":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (5 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "6":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (6 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "7":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (7 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "8":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (8 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "9":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (9 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "a":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (10 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "b":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (11 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "c":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (12 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "d":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (13 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "e":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (14 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "f":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + (15 * _Basics_pow_fn(16, position));
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    default:
                        var nonHex = _char;
                        return $elm$core$Result$Err($elm$core$String$fromChar(nonHex) + " is not a valid hexadecimal character.");
                }
            }
        }
    }, $rtfeldman$elm_hex$Hex$fromStringHelp = F3($rtfeldman$elm_hex$Hex$fromStringHelp_fn);
    var $elm$core$List$tail = function (list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(xs);
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $rtfeldman$elm_hex$Hex$fromString = function (str) {
        if ($elm$core$String$isEmpty(str)) {
            return $elm$core$Result$Err("Empty strings are not valid hexadecimal strings.");
        }
        else {
            var result = function () {
                if (_String_startsWith_fn("-", str)) {
                    var list = $elm$core$Maybe$withDefault_fn(_List_Nil, $elm$core$List$tail($elm$core$String$toList(str)));
                    return $elm$core$Result$map_fn($elm$core$Basics$negate, $rtfeldman$elm_hex$Hex$fromStringHelp_fn($elm$core$List$length(list) - 1, list, 0));
                }
                else {
                    return $rtfeldman$elm_hex$Hex$fromStringHelp_fn($elm$core$String$length(str) - 1, $elm$core$String$toList(str), 0);
                }
            }();
            var formatError = function (err) {
                return $elm$core$String$join_fn(" ", _List_fromArray(["\"" + (str + "\""), "is not a valid hexadecimal string because", err]));
            };
            return $elm$core$Result$mapError_fn(formatError, result);
        }
    };
    var $elm$core$Dict$get_fn = function (targetKey, dict) {
        get: while (true) {
            if (dict.$ === -2) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = _Utils_compare_fn(targetKey, key);
                switch (_v1) {
                    case 0:
                        var $temp$dict = left;
                        dict = $temp$dict;
                        continue get;
                    case 1:
                        return $elm$core$Maybe$Just(value);
                    default:
                        var $temp$dict = right;
                        dict = $temp$dict;
                        continue get;
                }
            }
        }
    }, $elm$core$Dict$get = F2($elm$core$Dict$get_fn);
    var $elm$core$String$toInt = _String_toInt;
    var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
        return _String_startsWith_fn("#x", s) ? $elm$core$Result$mapError_fn($elm$parser$Parser$Problem, $elm$core$Result$map_fn($elm$core$Char$fromCode, $rtfeldman$elm_hex$Hex$fromString($elm$core$String$dropLeft_fn(2, s)))) : (_String_startsWith_fn("#", s) ? $elm$core$Result$fromMaybe_fn($elm$parser$Parser$Problem("Invalid escaped character: " + s), $elm$core$Maybe$map_fn($elm$core$Char$fromCode, $elm$core$String$toInt($elm$core$String$dropLeft_fn(1, s)))) : $elm$core$Result$fromMaybe_fn($elm$parser$Parser$Problem("No entity named \"&" + (s + ";\" found.")), $elm$core$Dict$get_fn(s, $dillonkearns$elm_markdown$HtmlParser$entities)));
    };
    var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
        var process = function (entityStr) {
            var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
            if (!_v0.$) {
                var c = _v0.a;
                return $elm$parser$Parser$Advanced$succeed(c);
            }
            else {
                var e = _v0.a;
                return $elm$parser$Parser$Advanced$problem(e);
            }
        };
        var isEntityChar = function (c) {
            return (!_Utils_eq(c, end_)) && (c !== ";");
        };
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("&")), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$andThen_fn(process, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn(isEntityChar, $elm$parser$Parser$Expecting("an entity character")), $elm$parser$Parser$Advanced$chompWhile(isEntityChar)))), $dillonkearns$elm_markdown$HtmlParser$symbol(";")));
    };
    var $dillonkearns$elm_markdown$HtmlParser$textStringStep_fn = function (closingChar, predicate, accum) {
        return $elm$parser$Parser$Advanced$andThen_fn(function (soFar) {
            return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                $elm$parser$Parser$Advanced$map_fn(function (escaped) {
                    return $elm$parser$Parser$Advanced$Loop(_Utils_ap(accum, _Utils_ap(soFar, $elm$core$String$fromChar(escaped))));
                }, $dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
                $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(_Utils_ap(accum, soFar)))
            ]));
        }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompWhile(predicate)));
    }, $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3($dillonkearns$elm_markdown$HtmlParser$textStringStep_fn);
    var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
        var predicate = function (c) {
            return (!_Utils_eq(c, closingChar)) && (c !== "&");
        };
        return $elm$parser$Parser$Advanced$loop_fn("", A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
    };
    var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("\"")), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$textString("\""), $dillonkearns$elm_markdown$HtmlParser$symbol("\""))),
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("'")), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$textString("'"), $dillonkearns$elm_markdown$HtmlParser$symbol("'")))
    ]));
    var $dillonkearns$elm_markdown$HtmlParser$keepOldest_fn = function (_new, mValue) {
        if (!mValue.$) {
            var v = mValue.a;
            return $elm$core$Maybe$Just(v);
        }
        else {
            return $elm$core$Maybe$Just(_new);
        }
    }, $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2($dillonkearns$elm_markdown$HtmlParser$keepOldest_fn);
    var $elm$core$Dict$getMin = function (dict) {
        getMin: while (true) {
            if ((dict.$ === -1) && (dict.d.$ === -1)) {
                var left = dict.d;
                var $temp$dict = left;
                dict = $temp$dict;
                continue getMin;
            }
            else {
                return dict;
            }
        }
    };
    var $elm$core$Dict$moveRedLeft = function (dict) {
        if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
            if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var lLeft = _v1.d;
                var lRight = _v1.e;
                var _v2 = dict.e;
                var rClr = _v2.a;
                var rK = _v2.b;
                var rV = _v2.c;
                var rLeft = _v2.d;
                var _v3 = rLeft.a;
                var rlK = rLeft.b;
                var rlV = rLeft.c;
                var rlL = rLeft.d;
                var rlR = rLeft.e;
                var rRight = _v2.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, rlK, rlV, $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), rlL), $elm$core$Dict$RBNode_elm_builtin_fn(1, rK, rV, rlR, rRight));
            }
            else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v4 = dict.d;
                var lClr = _v4.a;
                var lK = _v4.b;
                var lV = _v4.c;
                var lLeft = _v4.d;
                var lRight = _v4.e;
                var _v5 = dict.e;
                var rClr = _v5.a;
                var rK = _v5.b;
                var rV = _v5.c;
                var rLeft = _v5.d;
                var rRight = _v5.e;
                if (clr === 1) {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
            }
        }
        else {
            return dict;
        }
    };
    var $elm$core$Dict$moveRedRight = function (dict) {
        if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
            if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var _v2 = _v1.d;
                var _v3 = _v2.a;
                var llK = _v2.b;
                var llV = _v2.c;
                var llLeft = _v2.d;
                var llRight = _v2.e;
                var lRight = _v1.e;
                var _v4 = dict.e;
                var rClr = _v4.a;
                var rK = _v4.b;
                var rV = _v4.c;
                var rLeft = _v4.d;
                var rRight = _v4.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, $elm$core$Dict$RBNode_elm_builtin_fn(1, llK, llV, llLeft, llRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, lRight, $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight)));
            }
            else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v5 = dict.d;
                var lClr = _v5.a;
                var lK = _v5.b;
                var lV = _v5.c;
                var lLeft = _v5.d;
                var lRight = _v5.e;
                var _v6 = dict.e;
                var rClr = _v6.a;
                var rK = _v6.b;
                var rV = _v6.c;
                var rLeft = _v6.d;
                var rRight = _v6.e;
                if (clr === 1) {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
            }
        }
        else {
            return dict;
        }
    };
    var $elm$core$Dict$removeHelpPrepEQGT_fn = function (targetKey, dict, color, key, value, left, right) {
        if ((left.$ === -1) && (!left.a)) {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, lK, lV, lLeft, $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, lRight, right));
        }
        else {
            _v2$2: while (true) {
                if ((right.$ === -1) && (right.a === 1)) {
                    if (right.d.$ === -1) {
                        if (right.d.a === 1) {
                            var _v3 = right.a;
                            var _v4 = right.d;
                            var _v5 = _v4.a;
                            return $elm$core$Dict$moveRedRight(dict);
                        }
                        else {
                            break _v2$2;
                        }
                    }
                    else {
                        var _v6 = right.a;
                        var _v7 = right.d;
                        return $elm$core$Dict$moveRedRight(dict);
                    }
                }
                else {
                    break _v2$2;
                }
            }
            return dict;
        }
    }, $elm$core$Dict$removeHelpPrepEQGT = F7($elm$core$Dict$removeHelpPrepEQGT_fn);
    var $elm$core$Dict$removeMin = function (dict) {
        if ((dict.$ === -1) && (dict.d.$ === -1)) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var lColor = left.a;
            var lLeft = left.d;
            var right = dict.e;
            if (lColor === 1) {
                if ((lLeft.$ === -1) && (!lLeft.a)) {
                    var _v3 = lLeft.a;
                    return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeMin(left), right);
                }
                else {
                    var _v4 = $elm$core$Dict$moveRedLeft(dict);
                    if (_v4.$ === -1) {
                        var nColor = _v4.a;
                        var nKey = _v4.b;
                        var nValue = _v4.c;
                        var nLeft = _v4.d;
                        var nRight = _v4.e;
                        return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$removeMin(nLeft), nRight);
                    }
                    else {
                        return $elm$core$Dict$RBEmpty_elm_builtin;
                    }
                }
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeMin(left), right);
            }
        }
        else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
    };
    var $elm$core$Dict$removeHelp_fn = function (targetKey, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
                if ((left.$ === -1) && (left.a === 1)) {
                    var _v4 = left.a;
                    var lLeft = left.d;
                    if ((lLeft.$ === -1) && (!lLeft.a)) {
                        var _v6 = lLeft.a;
                        return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeHelp_fn(targetKey, left), right);
                    }
                    else {
                        var _v7 = $elm$core$Dict$moveRedLeft(dict);
                        if (_v7.$ === -1) {
                            var nColor = _v7.a;
                            var nKey = _v7.b;
                            var nValue = _v7.c;
                            var nLeft = _v7.d;
                            var nRight = _v7.e;
                            return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$removeHelp_fn(targetKey, nLeft), nRight);
                        }
                        else {
                            return $elm$core$Dict$RBEmpty_elm_builtin;
                        }
                    }
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeHelp_fn(targetKey, left), right);
                }
            }
            else {
                return $elm$core$Dict$removeHelpEQGT_fn(targetKey, $elm$core$Dict$removeHelpPrepEQGT_fn(targetKey, dict, color, key, value, left, right));
            }
        }
    }, $elm$core$Dict$removeHelp = F2($elm$core$Dict$removeHelp_fn);
    var $elm$core$Dict$removeHelpEQGT_fn = function (targetKey, dict) {
        if (dict.$ === -1) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
                var _v1 = $elm$core$Dict$getMin(right);
                if (_v1.$ === -1) {
                    var minKey = _v1.b;
                    var minValue = _v1.c;
                    return $elm$core$Dict$balance_fn(color, minKey, minValue, left, $elm$core$Dict$removeMin(right));
                }
                else {
                    return $elm$core$Dict$RBEmpty_elm_builtin;
                }
            }
            else {
                return $elm$core$Dict$balance_fn(color, key, value, left, $elm$core$Dict$removeHelp_fn(targetKey, right));
            }
        }
        else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
    }, $elm$core$Dict$removeHelpEQGT = F2($elm$core$Dict$removeHelpEQGT_fn);
    var $elm$core$Dict$remove_fn = function (key, dict) {
        var _v0 = $elm$core$Dict$removeHelp_fn(key, dict);
        if ((_v0.$ === -1) && (!_v0.a)) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, l, r);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $elm$core$Dict$remove = F2($elm$core$Dict$remove_fn);
    var $elm$core$Dict$update_fn = function (targetKey, alter, dictionary) {
        var _v0 = alter($elm$core$Dict$get_fn(targetKey, dictionary));
        if (!_v0.$) {
            var value = _v0.a;
            return $elm$core$Dict$insert_fn(targetKey, value, dictionary);
        }
        else {
            return $elm$core$Dict$remove_fn(targetKey, dictionary);
        }
    }, $elm$core$Dict$update = F3($elm$core$Dict$update_fn);
    var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
        switch (c) {
            case " ":
                return true;
            case "\r":
                return true;
            case "\n":
                return true;
            case "\t":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
    var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
        var process = F2(function (name, value) {
            return $elm$parser$Parser$Advanced$Loop($elm$core$Dict$update_fn($elm$core$String$toLower(name), $dillonkearns$elm_markdown$HtmlParser$keepOldest(value), attrs));
        });
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(process), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace), $dillonkearns$elm_markdown$HtmlParser$symbol("=")), $dillonkearns$elm_markdown$HtmlParser$whiteSpace)), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
            $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(attrs))
        ]));
    };
    var $elm$core$Dict$foldl_fn = function (func, acc, dict) {
        foldl: while (true) {
            if (dict.$ === -2) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$acc = A3(func, key, value, $elm$core$Dict$foldl_fn(func, acc, left)), $temp$dict = right;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    }, $elm$core$Dict$foldl_fn_unwrapped = function (func, acc, dict) {
        foldl: while (true) {
            if (dict.$ === -2) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$acc = func(key, value, $elm$core$Dict$foldl_fn_unwrapped(func, acc, left)), $temp$dict = right;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    }, $elm$core$Dict$foldl = F3($elm$core$Dict$foldl_fn);
    var $dillonkearns$elm_markdown$HtmlParser$attributes = $elm$parser$Parser$Advanced$map_fn(A2($elm$core$Dict$foldl, F3(function (key, value, accum) {
        return _List_Cons({ jM: key, is: value }, accum);
    }), _List_Nil), $elm$parser$Parser$Advanced$loop_fn($elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
    var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
        return function (s) {
            var _v0 = _Parser_findSubString_fn(str, s.eS, s.kk, s.ex, s.ky);
            var newOffset = _v0.a;
            var newRow = _v0.b;
            var newCol = _v0.c;
            var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.ky) : newOffset;
            return $elm$parser$Parser$Advanced$Good_fn(_Utils_cmp(s.eS, adjustedOffset) < 0, 0, { ex: newCol, j: s.j, dV: s.dV, eS: adjustedOffset, kk: newRow, ky: s.ky });
        };
    };
    var $dillonkearns$elm_markdown$HtmlParser$cdata = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("<![CDATA[")), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("]]>")), $dillonkearns$elm_markdown$HtmlParser$symbol("]]>")));
    var $dillonkearns$elm_markdown$HtmlParser$childrenStep_fn = function (options, accum) {
        return $elm$parser$Parser$Advanced$map_fn(function (f) {
            return f(accum);
        }, $elm$parser$Parser$Advanced$oneOf(options));
    }, $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2($dillonkearns$elm_markdown$HtmlParser$childrenStep_fn);
    var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem(str));
    };
    var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
        var closingTagName = $elm$parser$Parser$Advanced$andThen_fn(function (endTagName) {
            return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(0) : $dillonkearns$elm_markdown$HtmlParser$fail("tag name mismatch: " + (startTagName + (" and " + endTagName)));
        }, $dillonkearns$elm_markdown$HtmlParser$tagName);
        return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$symbol("</"), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), closingTagName), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), $dillonkearns$elm_markdown$HtmlParser$symbol(">"));
    };
    var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
        return $elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$Expecting(str));
    };
    var $dillonkearns$elm_markdown$HtmlParser$comment = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment), $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$HtmlParser$toToken("<!--"))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("-->")), $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$HtmlParser$toToken("-->"))));
    var $dillonkearns$elm_markdown$HtmlParser$Declaration_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $dillonkearns$elm_markdown$HtmlParser$Declaration = F2($dillonkearns$elm_markdown$HtmlParser$Declaration_fn);
    var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting("at least 1 uppercase character");
    var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter), $elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
    var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($dillonkearns$elm_markdown$HtmlParser$isWhitespace, $elm$parser$Parser$Expecting("at least one whitespace")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
    var $dillonkearns$elm_markdown$HtmlParser$docType = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration), $dillonkearns$elm_markdown$HtmlParser$symbol("<!")), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr(">")), $dillonkearns$elm_markdown$HtmlParser$symbol(">")));
    var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction), $dillonkearns$elm_markdown$HtmlParser$symbol("<?")), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("?>")), $dillonkearns$elm_markdown$HtmlParser$symbol("?>")));
    var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
        switch (c) {
            case "<":
                return false;
            case "&":
                return false;
            default:
                return true;
        }
    };
    var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray([
        $elm$parser$Parser$Advanced$map_fn(function (_v0) {
            return $elm$parser$Parser$Advanced$Loop(0);
        }, $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar, $elm$parser$Parser$Expecting("is not & or <")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
        $elm$parser$Parser$Advanced$map_fn(function (_v1) {
            return $elm$parser$Parser$Advanced$Loop(0);
        }, $dillonkearns$elm_markdown$HtmlParser$escapedChar("<")),
        $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(0))
    ]);
    var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
        return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
    };
    var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$loop_fn(0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
    var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
        return $elm$parser$Parser$Advanced$loop_fn(_List_Nil, $dillonkearns$elm_markdown$HtmlParser$childrenStep($dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
    };
    var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
        return _List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(F2(function (_v1, accum) {
                return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(accum));
            }), $dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
            $elm$parser$Parser$Advanced$andThen_fn(function (text) {
                return $elm$core$String$isEmpty(text) ? $elm$parser$Parser$Advanced$map_fn(F2(function (_v2, accum) {
                    return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(accum));
                }), $dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(function (accum) {
                    return $elm$parser$Parser$Advanced$Loop(_List_Cons($dillonkearns$elm_markdown$HtmlParser$Text(text), accum));
                });
            }, $dillonkearns$elm_markdown$HtmlParser$textNodeString),
            $elm$parser$Parser$Advanced$map_fn(F2(function (_new, accum) {
                return $elm$parser$Parser$Advanced$Loop(_List_Cons(_new, accum));
            }), $dillonkearns$elm_markdown$HtmlParser$cyclic$html())
        ]);
    };
    var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Element(startTagName)), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return _List_Nil;
            }, $dillonkearns$elm_markdown$HtmlParser$symbol("/>")),
            $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol(">")), $dillonkearns$elm_markdown$HtmlParser$children(startTagName))
        ])));
    };
    function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn($dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
            $dillonkearns$elm_markdown$HtmlParser$processingInstruction,
            $dillonkearns$elm_markdown$HtmlParser$comment,
            $dillonkearns$elm_markdown$HtmlParser$docType,
            $dillonkearns$elm_markdown$HtmlParser$cyclic$element()
        ]));
    }
    function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("<")), $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
    }
    var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
    $dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
        return $dillonkearns$elm_markdown$HtmlParser$html;
    };
    var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
    $dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
        return $dillonkearns$elm_markdown$HtmlParser$element;
    };
    var $dillonkearns$elm_markdown$Parser$Token$tab = $elm$parser$Parser$Advanced$Token_fn("\t", $elm$parser$Parser$Expecting("a tab"));
    var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("   ", $elm$parser$Parser$ExpectingSymbol("Indentation"))),
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn(" \t", $elm$parser$Parser$ExpectingSymbol("Indentation"))),
            $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("  \t", $elm$parser$Parser$ExpectingSymbol("Indentation")))
        ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock), $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
        return !_Basics_modBy_fn(2, _int);
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Loose = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$Tight = 1;
    var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
        return isTight ? 1 : 0;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn = function (joinWith, string1, string2) {
        var _v0 = _Utils_Tuple2(string1, string2);
        if (_v0.a === "") {
            return string2;
        }
        else {
            if (_v0.b === "") {
                return string1;
            }
            else {
                return _Utils_ap(string1, _Utils_ap(joinWith, string2));
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn = function (string1, string2) {
        return string1 + ("\n" + string2);
    }, $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn);
    var $elm$core$Tuple$mapSecond_fn = function (func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(x, func(y));
    }, $elm$core$Tuple$mapSecond = F2($elm$core$Tuple$mapSecond_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (rawLine, _v0) {
        return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
    }, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
    var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem_fn = function (order, intended, marker, body) {
        return { iL: body, f8: intended, gg: marker, go: order };
    }, $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem_fn);
    var $elm$parser$Parser$Advanced$getCol = function (s) {
        return $elm$parser$Parser$Advanced$Good_fn(false, s.ex, s);
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(function (bodyStartPos) {
        return _Utils_Tuple2(bodyStartPos, "");
    }), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
        return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn(condition, $elm$parser$Parser$Problem("Expected one or more character")), $elm$parser$Parser$Advanced$chompWhile(condition));
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(F2(function (bodyStartPos, item) {
        return _Utils_Tuple2(bodyStartPos, item);
    })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$getCol), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = 0;
    var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = 1;
    var $dillonkearns$elm_markdown$Parser$Token$closingParen = $elm$parser$Parser$Advanced$Token_fn(")", $elm$parser$Parser$Expecting("a `)`"));
    var $dillonkearns$elm_markdown$Parser$Token$dot = $elm$parser$Parser$Advanced$Token_fn(".", $elm$parser$Parser$Expecting("a `.`"));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
    ]));
    var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (str, _v0) {
        return $elm$core$Maybe$withDefault_fn(0, $elm$core$String$toInt(str));
    }, $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = $elm$parser$Parser$Advanced$andThen_fn(function (parsed) {
        return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Starting numbers must be nine digits or less."));
    }, $dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
    var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
    var $elm$core$List$repeatHelp_fn = function (result, n, value) {
        repeatHelp: while (true) {
            if (n <= 0) {
                return result;
            }
            else {
                var $temp$result = _List_Cons(value, result), $temp$n = n - 1;
                result = $temp$result;
                n = $temp$n;
                continue repeatHelp;
            }
        }
    }, $elm$core$List$repeatHelp = F3($elm$core$List$repeatHelp_fn);
    var $elm$core$List$repeat_fn = function (n, value) {
        return $elm$core$List$repeatHelp_fn(_List_Nil, n, value);
    }, $elm$core$List$repeat = F2($elm$core$List$repeat_fn);
    var $dillonkearns$elm_markdown$Parser$Extra$upTo_fn = function (n, parser) {
        var _v0 = $elm$core$List$repeat_fn(n, parser);
        if (!_v0.b) {
            return $elm$parser$Parser$Advanced$succeed(0);
        }
        else {
            var firstParser = _v0.a;
            var remainingParsers = _v0.b;
            return $elm$core$List$foldl_fn_unwrapped(function (p, parsers) {
                return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                    $elm$parser$Parser$Advanced$ignorer_fn(p, parsers),
                    $elm$parser$Parser$Advanced$succeed(0)
                ]));
            }, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                firstParser,
                $elm$parser$Parser$Advanced$succeed(0)
            ])), remainingParsers);
        }
    }, $dillonkearns$elm_markdown$Parser$Extra$upTo = F2($dillonkearns$elm_markdown$Parser$Extra$upTo_fn);
    var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
        if (parsed === 1) {
            return $elm$parser$Parser$Advanced$succeed(parsed);
        }
        else {
            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Lists inside a paragraph or after a paragraph without a blank line must start with 1"));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
        return previousWasBody ? $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1, $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Parser$Extra$upTo_fn(3, $dillonkearns$elm_markdown$Whitespace$space)), $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Parser$Extra$upTo_fn(3, $dillonkearns$elm_markdown$Whitespace$space)), $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
        var parseSubsequentItem = F5(function (start, order, marker, mid, _v0) {
            var end = _v0.a;
            var body = _v0.b;
            return ((end - mid) <= 4) ? $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem_fn(order, end - start, marker, body) : $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem_fn(order, (mid - start) + 1, marker, _Utils_ap($elm$core$String$repeat_fn((end - mid) - 1, " "), body));
        });
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(parseSubsequentItem), $elm$parser$Parser$Advanced$getCol), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)), $elm$parser$Parser$Advanced$getCol), previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
        return $elm$parser$Parser$Advanced$map_fn(function (item) {
            return $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(true, item.f8, item.gg, item.go, _List_Nil, item.iL);
        }, $dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = { $: 1 };
    var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Image_fn = function (a, b, c) {
        return { $: 4, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Inline$Image = F3($dillonkearns$elm_markdown$Markdown$Inline$Image_fn);
    var $dillonkearns$elm_markdown$Markdown$Inline$Link_fn = function (a, b, c) {
        return { $: 3, a: a, b: b, c: c };
    }, $dillonkearns$elm_markdown$Markdown$Inline$Link = F3($dillonkearns$elm_markdown$Markdown$Inline$Link_fn);
    var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
        return { $: 7, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
        var match = _v0;
        var _v1 = match.A;
        switch (_v1.$) {
            case 0:
                return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.ii);
            case 1:
                return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
            case 2:
                return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.ii);
            case 3:
                var _v2 = _v1.a;
                var text = _v2.a;
                var url = _v2.b;
                return $dillonkearns$elm_markdown$Markdown$Inline$Link_fn(url, $elm$core$Maybe$Nothing, _List_fromArray([
                    $dillonkearns$elm_markdown$Markdown$Inline$Text(text)
                ]));
            case 4:
                var _v3 = _v1.a;
                var url = _v3.a;
                var maybeTitle = _v3.b;
                return $dillonkearns$elm_markdown$Markdown$Inline$Link_fn(url, maybeTitle, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.d2));
            case 5:
                var _v4 = _v1.a;
                var url = _v4.a;
                var maybeTitle = _v4.b;
                return $dillonkearns$elm_markdown$Markdown$Inline$Image_fn(url, maybeTitle, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.d2));
            case 6:
                var model = _v1.a;
                return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
            case 7:
                var length = _v1.a;
                return $dillonkearns$elm_markdown$Markdown$Inline$Emphasis_fn(length, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.d2));
            default:
                return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough($dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.d2));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
        return $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch_fn = function (parentMatch, childMatch) {
        return { o: childMatch.o - parentMatch.O, d2: childMatch.d2, q: childMatch.q - parentMatch.O, ii: childMatch.ii, ak: childMatch.ak - parentMatch.O, O: childMatch.O - parentMatch.O, A: childMatch.A };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild_fn = function (parentMatch, childMatch) {
        return {
            o: parentMatch.o,
            d2: _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch_fn(parentMatch, childMatch), parentMatch.d2),
            q: parentMatch.q,
            ii: parentMatch.ii,
            ak: parentMatch.ak,
            O: parentMatch.O,
            A: parentMatch.A
        };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild_fn);
    var $elm$core$List$sortBy = _List_sortBy;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
        var match = _v4;
        return {
            o: match.o,
            d2: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.d2),
            q: match.q,
            ii: match.ii,
            ak: match.ak,
            O: match.O,
            A: match.A
        };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
        var _v2 = _List_sortBy_fn(function (_v3) {
            var match = _v3;
            return match.q;
        }, matches);
        if (!_v2.b) {
            return _List_Nil;
        }
        else {
            var first = _v2.a;
            var rest = _v2.b;
            return $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp_fn(rest, first, _List_Nil);
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp_fn = function (remaining, _v0, matchesTail) {
        organizeMatchesHelp: while (true) {
            var prevMatch = _v0;
            if (!remaining.b) {
                return _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(prevMatch), matchesTail);
            }
            else {
                var match = remaining.a;
                var rest = remaining.b;
                if (_Utils_cmp(prevMatch.o, match.q) < 1) {
                    var $temp$remaining = rest, $temp$_v0 = match, $temp$matchesTail = _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(prevMatch), matchesTail);
                    remaining = $temp$remaining;
                    _v0 = $temp$_v0;
                    matchesTail = $temp$matchesTail;
                    continue organizeMatchesHelp;
                }
                else {
                    if ((_Utils_cmp(prevMatch.q, match.q) < 0) && (_Utils_cmp(prevMatch.o, match.o) > 0)) {
                        var $temp$remaining = rest, $temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$addChild_fn(prevMatch, match);
                        remaining = $temp$remaining;
                        _v0 = $temp$_v0;
                        continue organizeMatchesHelp;
                    }
                    else {
                        var $temp$remaining = rest, $temp$_v0 = prevMatch;
                        remaining = $temp$remaining;
                        _v0 = $temp$_v0;
                        continue organizeMatchesHelp;
                    }
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = { $: 0 };
    var $elm$core$String$contains = _String_contains;
    var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
        return _String_contains_fn("&", string);
    };
    var $elm$regex$Regex$Match_fn = function (match, index, number, submatches) {
        return { d: index, d1: match, gn: number, gF: submatches };
    }, $elm$regex$Regex$Match = F4($elm$regex$Regex$Match_fn);
    var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
    var $elm$regex$Regex$fromString = function (string) {
        return _Regex_fromStringWith_fn({ iQ: false, jL: false }, string);
    };
    var $elm$regex$Regex$never = _Regex_never;
    var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("&#([0-9]{1,8});"));
    var $elm$regex$Regex$replace_a0 = _Regex_infinity, $elm$regex$Regex$replace = _Regex_replaceAtMost($elm$regex$Regex$replace_a0);
    var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
        var remain_ = _Basics_modBy_fn(16, _int);
        var remain = _Basics_modBy_fn(131070, _int);
        return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
        return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
        return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar($elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar($elm$core$Char$fromCode(65533));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
        var _v0 = match.gF;
        if (_v0.b && (!_v0.a.$)) {
            var first = _v0.a.a;
            var _v1 = $elm$core$String$toInt(first);
            if (!_v1.$) {
                var v = _v1.a;
                return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
            }
            else {
                return match.d1;
            }
        }
        else {
            return match.d1;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
    var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("&([0-9a-zA-Z]+);"));
    var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(_List_fromArray([
        _Utils_Tuple2("quot", 34),
        _Utils_Tuple2("amp", 38),
        _Utils_Tuple2("apos", 39),
        _Utils_Tuple2("lt", 60),
        _Utils_Tuple2("gt", 62),
        _Utils_Tuple2("nbsp", 160),
        _Utils_Tuple2("iexcl", 161),
        _Utils_Tuple2("cent", 162),
        _Utils_Tuple2("pound", 163),
        _Utils_Tuple2("curren", 164),
        _Utils_Tuple2("yen", 165),
        _Utils_Tuple2("brvbar", 166),
        _Utils_Tuple2("sect", 167),
        _Utils_Tuple2("uml", 168),
        _Utils_Tuple2("copy", 169),
        _Utils_Tuple2("ordf", 170),
        _Utils_Tuple2("laquo", 171),
        _Utils_Tuple2("not", 172),
        _Utils_Tuple2("shy", 173),
        _Utils_Tuple2("reg", 174),
        _Utils_Tuple2("macr", 175),
        _Utils_Tuple2("deg", 176),
        _Utils_Tuple2("plusmn", 177),
        _Utils_Tuple2("sup2", 178),
        _Utils_Tuple2("sup3", 179),
        _Utils_Tuple2("acute", 180),
        _Utils_Tuple2("micro", 181),
        _Utils_Tuple2("para", 182),
        _Utils_Tuple2("middot", 183),
        _Utils_Tuple2("cedil", 184),
        _Utils_Tuple2("sup1", 185),
        _Utils_Tuple2("ordm", 186),
        _Utils_Tuple2("raquo", 187),
        _Utils_Tuple2("frac14", 188),
        _Utils_Tuple2("frac12", 189),
        _Utils_Tuple2("frac34", 190),
        _Utils_Tuple2("iquest", 191),
        _Utils_Tuple2("Agrave", 192),
        _Utils_Tuple2("Aacute", 193),
        _Utils_Tuple2("Acirc", 194),
        _Utils_Tuple2("Atilde", 195),
        _Utils_Tuple2("Auml", 196),
        _Utils_Tuple2("Aring", 197),
        _Utils_Tuple2("AElig", 198),
        _Utils_Tuple2("Ccedil", 199),
        _Utils_Tuple2("Egrave", 200),
        _Utils_Tuple2("Eacute", 201),
        _Utils_Tuple2("Ecirc", 202),
        _Utils_Tuple2("Euml", 203),
        _Utils_Tuple2("Igrave", 204),
        _Utils_Tuple2("Iacute", 205),
        _Utils_Tuple2("Icirc", 206),
        _Utils_Tuple2("Iuml", 207),
        _Utils_Tuple2("ETH", 208),
        _Utils_Tuple2("Ntilde", 209),
        _Utils_Tuple2("Ograve", 210),
        _Utils_Tuple2("Oacute", 211),
        _Utils_Tuple2("Ocirc", 212),
        _Utils_Tuple2("Otilde", 213),
        _Utils_Tuple2("Ouml", 214),
        _Utils_Tuple2("times", 215),
        _Utils_Tuple2("Oslash", 216),
        _Utils_Tuple2("Ugrave", 217),
        _Utils_Tuple2("Uacute", 218),
        _Utils_Tuple2("Ucirc", 219),
        _Utils_Tuple2("Uuml", 220),
        _Utils_Tuple2("Yacute", 221),
        _Utils_Tuple2("THORN", 222),
        _Utils_Tuple2("szlig", 223),
        _Utils_Tuple2("agrave", 224),
        _Utils_Tuple2("aacute", 225),
        _Utils_Tuple2("acirc", 226),
        _Utils_Tuple2("atilde", 227),
        _Utils_Tuple2("auml", 228),
        _Utils_Tuple2("aring", 229),
        _Utils_Tuple2("aelig", 230),
        _Utils_Tuple2("ccedil", 231),
        _Utils_Tuple2("egrave", 232),
        _Utils_Tuple2("eacute", 233),
        _Utils_Tuple2("ecirc", 234),
        _Utils_Tuple2("euml", 235),
        _Utils_Tuple2("igrave", 236),
        _Utils_Tuple2("iacute", 237),
        _Utils_Tuple2("icirc", 238),
        _Utils_Tuple2("iuml", 239),
        _Utils_Tuple2("eth", 240),
        _Utils_Tuple2("ntilde", 241),
        _Utils_Tuple2("ograve", 242),
        _Utils_Tuple2("oacute", 243),
        _Utils_Tuple2("ocirc", 244),
        _Utils_Tuple2("otilde", 245),
        _Utils_Tuple2("ouml", 246),
        _Utils_Tuple2("divide", 247),
        _Utils_Tuple2("oslash", 248),
        _Utils_Tuple2("ugrave", 249),
        _Utils_Tuple2("uacute", 250),
        _Utils_Tuple2("ucirc", 251),
        _Utils_Tuple2("uuml", 252),
        _Utils_Tuple2("yacute", 253),
        _Utils_Tuple2("thorn", 254),
        _Utils_Tuple2("yuml", 255),
        _Utils_Tuple2("OElig", 338),
        _Utils_Tuple2("oelig", 339),
        _Utils_Tuple2("Scaron", 352),
        _Utils_Tuple2("scaron", 353),
        _Utils_Tuple2("Yuml", 376),
        _Utils_Tuple2("fnof", 402),
        _Utils_Tuple2("circ", 710),
        _Utils_Tuple2("tilde", 732),
        _Utils_Tuple2("Alpha", 913),
        _Utils_Tuple2("Beta", 914),
        _Utils_Tuple2("Gamma", 915),
        _Utils_Tuple2("Delta", 916),
        _Utils_Tuple2("Epsilon", 917),
        _Utils_Tuple2("Zeta", 918),
        _Utils_Tuple2("Eta", 919),
        _Utils_Tuple2("Theta", 920),
        _Utils_Tuple2("Iota", 921),
        _Utils_Tuple2("Kappa", 922),
        _Utils_Tuple2("Lambda", 923),
        _Utils_Tuple2("Mu", 924),
        _Utils_Tuple2("Nu", 925),
        _Utils_Tuple2("Xi", 926),
        _Utils_Tuple2("Omicron", 927),
        _Utils_Tuple2("Pi", 928),
        _Utils_Tuple2("Rho", 929),
        _Utils_Tuple2("Sigma", 931),
        _Utils_Tuple2("Tau", 932),
        _Utils_Tuple2("Upsilon", 933),
        _Utils_Tuple2("Phi", 934),
        _Utils_Tuple2("Chi", 935),
        _Utils_Tuple2("Psi", 936),
        _Utils_Tuple2("Omega", 937),
        _Utils_Tuple2("alpha", 945),
        _Utils_Tuple2("beta", 946),
        _Utils_Tuple2("gamma", 947),
        _Utils_Tuple2("delta", 948),
        _Utils_Tuple2("epsilon", 949),
        _Utils_Tuple2("zeta", 950),
        _Utils_Tuple2("eta", 951),
        _Utils_Tuple2("theta", 952),
        _Utils_Tuple2("iota", 953),
        _Utils_Tuple2("kappa", 954),
        _Utils_Tuple2("lambda", 955),
        _Utils_Tuple2("mu", 956),
        _Utils_Tuple2("nu", 957),
        _Utils_Tuple2("xi", 958),
        _Utils_Tuple2("omicron", 959),
        _Utils_Tuple2("pi", 960),
        _Utils_Tuple2("rho", 961),
        _Utils_Tuple2("sigmaf", 962),
        _Utils_Tuple2("sigma", 963),
        _Utils_Tuple2("tau", 964),
        _Utils_Tuple2("upsilon", 965),
        _Utils_Tuple2("phi", 966),
        _Utils_Tuple2("chi", 967),
        _Utils_Tuple2("psi", 968),
        _Utils_Tuple2("omega", 969),
        _Utils_Tuple2("thetasym", 977),
        _Utils_Tuple2("upsih", 978),
        _Utils_Tuple2("piv", 982),
        _Utils_Tuple2("ensp", 8194),
        _Utils_Tuple2("emsp", 8195),
        _Utils_Tuple2("thinsp", 8201),
        _Utils_Tuple2("zwnj", 8204),
        _Utils_Tuple2("zwj", 8205),
        _Utils_Tuple2("lrm", 8206),
        _Utils_Tuple2("rlm", 8207),
        _Utils_Tuple2("ndash", 8211),
        _Utils_Tuple2("mdash", 8212),
        _Utils_Tuple2("lsquo", 8216),
        _Utils_Tuple2("rsquo", 8217),
        _Utils_Tuple2("sbquo", 8218),
        _Utils_Tuple2("ldquo", 8220),
        _Utils_Tuple2("rdquo", 8221),
        _Utils_Tuple2("bdquo", 8222),
        _Utils_Tuple2("dagger", 8224),
        _Utils_Tuple2("Dagger", 8225),
        _Utils_Tuple2("bull", 8226),
        _Utils_Tuple2("hellip", 8230),
        _Utils_Tuple2("permil", 8240),
        _Utils_Tuple2("prime", 8242),
        _Utils_Tuple2("Prime", 8243),
        _Utils_Tuple2("lsaquo", 8249),
        _Utils_Tuple2("rsaquo", 8250),
        _Utils_Tuple2("oline", 8254),
        _Utils_Tuple2("frasl", 8260),
        _Utils_Tuple2("euro", 8364),
        _Utils_Tuple2("image", 8465),
        _Utils_Tuple2("weierp", 8472),
        _Utils_Tuple2("real", 8476),
        _Utils_Tuple2("trade", 8482),
        _Utils_Tuple2("alefsym", 8501),
        _Utils_Tuple2("larr", 8592),
        _Utils_Tuple2("uarr", 8593),
        _Utils_Tuple2("rarr", 8594),
        _Utils_Tuple2("darr", 8595),
        _Utils_Tuple2("harr", 8596),
        _Utils_Tuple2("crarr", 8629),
        _Utils_Tuple2("lArr", 8656),
        _Utils_Tuple2("uArr", 8657),
        _Utils_Tuple2("rArr", 8658),
        _Utils_Tuple2("dArr", 8659),
        _Utils_Tuple2("hArr", 8660),
        _Utils_Tuple2("forall", 8704),
        _Utils_Tuple2("part", 8706),
        _Utils_Tuple2("exist", 8707),
        _Utils_Tuple2("empty", 8709),
        _Utils_Tuple2("nabla", 8711),
        _Utils_Tuple2("isin", 8712),
        _Utils_Tuple2("notin", 8713),
        _Utils_Tuple2("ni", 8715),
        _Utils_Tuple2("prod", 8719),
        _Utils_Tuple2("sum", 8721),
        _Utils_Tuple2("minus", 8722),
        _Utils_Tuple2("lowast", 8727),
        _Utils_Tuple2("radic", 8730),
        _Utils_Tuple2("prop", 8733),
        _Utils_Tuple2("infin", 8734),
        _Utils_Tuple2("ang", 8736),
        _Utils_Tuple2("and", 8743),
        _Utils_Tuple2("or", 8744),
        _Utils_Tuple2("cap", 8745),
        _Utils_Tuple2("cup", 8746),
        _Utils_Tuple2("int", 8747),
        _Utils_Tuple2("there4", 8756),
        _Utils_Tuple2("sim", 8764),
        _Utils_Tuple2("cong", 8773),
        _Utils_Tuple2("asymp", 8776),
        _Utils_Tuple2("ne", 8800),
        _Utils_Tuple2("equiv", 8801),
        _Utils_Tuple2("le", 8804),
        _Utils_Tuple2("ge", 8805),
        _Utils_Tuple2("sub", 8834),
        _Utils_Tuple2("sup", 8835),
        _Utils_Tuple2("nsub", 8836),
        _Utils_Tuple2("sube", 8838),
        _Utils_Tuple2("supe", 8839),
        _Utils_Tuple2("oplus", 8853),
        _Utils_Tuple2("otimes", 8855),
        _Utils_Tuple2("perp", 8869),
        _Utils_Tuple2("sdot", 8901),
        _Utils_Tuple2("lceil", 8968),
        _Utils_Tuple2("rceil", 8969),
        _Utils_Tuple2("lfloor", 8970),
        _Utils_Tuple2("rfloor", 8971),
        _Utils_Tuple2("lang", 9001),
        _Utils_Tuple2("rang", 9002),
        _Utils_Tuple2("loz", 9674),
        _Utils_Tuple2("spades", 9824),
        _Utils_Tuple2("clubs", 9827),
        _Utils_Tuple2("hearts", 9829),
        _Utils_Tuple2("diams", 9830)
    ]));
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
        var _v0 = match.gF;
        if (_v0.b && (!_v0.a.$)) {
            var first = _v0.a.a;
            var _v1 = $elm$core$Dict$get_fn(first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
            if (!_v1.$) {
                var code = _v1.a;
                return $elm$core$String$fromChar($elm$core$Char$fromCode(code));
            }
            else {
                return match.d1;
            }
        }
        else {
            return match.d1;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
    var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\+)([!\"#$%&\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])"));
    var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex, function (regexMatch) {
        var _v0 = regexMatch.gF;
        if (((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) {
            var backslashes = _v0.a.a;
            var _v1 = _v0.b;
            var escapedStr = _v1.a.a;
            return _Utils_ap($elm$core$String$repeat_fn(($elm$core$String$length(backslashes) / 2) | 0, "\\"), escapedStr);
        }
        else {
            return regexMatch.d1;
        }
    });
    var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("&#[Xx]([0-9a-fA-F]{1,8});"));
    var $elm$core$String$foldl = _String_foldl;
    var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
        var folder = F2(function (hexDigit, _int) {
            return ((_int * 16) + _Basics_modBy_fn(39, $elm$core$Char$toCode(hexDigit))) - 9;
        });
        return _String_foldl_fn(folder, 0, $elm$core$String$toLower(string));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
        var _v0 = match.gF;
        if (_v0.b && (!_v0.a.$)) {
            var first = _v0.a.a;
            return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode($dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
        }
        else {
            return match.d1;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
    var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
        var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
        return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals($dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals($dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
        return {
            o: 0,
            d2: _List_Nil,
            q: 0,
            ii: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
            ak: 0,
            O: 0,
            A: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
        };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch_fn = function (rawText, _v2, parsedMatches) {
        var matchModel = _v2;
        var updtMatch = {
            o: matchModel.o,
            d2: $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches_fn(matchModel.ii, _List_Nil, matchModel.d2),
            q: matchModel.q,
            ii: matchModel.ii,
            ak: matchModel.ak,
            O: matchModel.O,
            A: matchModel.A
        };
        if (!parsedMatches.b) {
            var finalStr = $elm$core$String$dropLeft_fn(matchModel.o, rawText);
            return $elm$core$String$isEmpty(finalStr) ? _List_fromArray([updtMatch]) : _List_fromArray([
                updtMatch,
                $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
            ]);
        }
        else {
            var matchHead = parsedMatches.a;
            var _v4 = matchHead.A;
            if (!_v4.$) {
                return _List_Cons(updtMatch, parsedMatches);
            }
            else {
                return _Utils_eq(matchModel.o, matchHead.q) ? _List_Cons(updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.o, matchHead.q) < 0) ? _List_Cons(updtMatch, _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(_String_slice_fn(matchModel.o, matchHead.q, rawText)), parsedMatches)) : parsedMatches);
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches_fn = function (rawText, parsedMatches, matches) {
        parseTextMatches: while (true) {
            if (!matches.b) {
                if (!parsedMatches.b) {
                    return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray([
                        $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
                    ]);
                }
                else {
                    var matchModel = parsedMatches.a;
                    return (matchModel.q > 0) ? _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch($elm$core$String$left_fn(matchModel.q, rawText)), parsedMatches) : parsedMatches;
                }
            }
            else {
                var match = matches.a;
                var matchesTail = matches.b;
                var $temp$parsedMatches = $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch_fn(rawText, match, parsedMatches), $temp$matches = matchesTail;
                parsedMatches = $temp$parsedMatches;
                matches = $temp$matches;
                continue parseTextMatches;
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn = function (tokensL, tokensR, countL) {
        cleanAngleBracketTokens: while (true) {
            if (!tokensR.b) {
                return _List_Nil;
            }
            else {
                var hd1 = tokensR.a;
                var rest1 = tokensR.b;
                if (!tokensL.b) {
                    if (countL > 1) {
                        var $temp$tokensR = rest1, $temp$countL = countL - 1;
                        tokensR = $temp$tokensR;
                        countL = $temp$countL;
                        continue cleanAngleBracketTokens;
                    }
                    else {
                        if (countL === 1) {
                            return _List_Cons(hd1, $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn(tokensL, rest1, countL - 1));
                        }
                        else {
                            var $temp$tokensR = rest1, $temp$countL = 0;
                            tokensR = $temp$tokensR;
                            countL = $temp$countL;
                            continue cleanAngleBracketTokens;
                        }
                    }
                }
                else {
                    var hd = tokensL.a;
                    var rest = tokensL.b;
                    if (_Utils_cmp(hd.d, hd1.d) < 0) {
                        if (!countL) {
                            return _List_Cons(hd, $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn(rest, tokensR, countL + 1));
                        }
                        else {
                            var $temp$tokensL = rest, $temp$countL = countL + 1;
                            tokensL = $temp$tokensL;
                            countL = $temp$countL;
                            continue cleanAngleBracketTokens;
                        }
                    }
                    else {
                        if (countL > 1) {
                            var $temp$tokensR = rest1, $temp$countL = countL - 1;
                            tokensR = $temp$tokensR;
                            countL = $temp$countL;
                            continue cleanAngleBracketTokens;
                        }
                        else {
                            if (countL === 1) {
                                return _List_Cons(hd1, $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn(tokensL, rest1, countL - 1));
                            }
                            else {
                                var $temp$tokensR = rest1, $temp$countL = 0;
                                tokensR = $temp$tokensR;
                                countL = $temp$countL;
                                continue cleanAngleBracketTokens;
                            }
                        }
                    }
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens = F3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\<)"));
    var $elm$regex$Regex$find_a0 = _Regex_infinity, $elm$regex$Regex$find = _Regex_findAtMost($elm$regex$Regex$find_a0);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = { $: 4 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ d: regMatch.d + backslashesLength, gf: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen }) : $elm$core$Maybe$Nothing;
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\>)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = 0;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = 1;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            return $elm$core$Maybe$Just({
                d: regMatch.d + backslashesLength,
                gf: 1,
                k: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose(1) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose(0)
            });
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)([^*])?(\\*+)([^*])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken_fn = function (a, b) {
        return { $: 7, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2($dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
        switch (c) {
            case "!":
                return true;
            case "\"":
                return true;
            case "#":
                return true;
            case "%":
                return true;
            case "&":
                return true;
            case "'":
                return true;
            case "(":
                return true;
            case ")":
                return true;
            case "*":
                return true;
            case ",":
                return true;
            case "-":
                return true;
            case ".":
                return true;
            case "/":
                return true;
            case ":":
                return true;
            case ";":
                return true;
            case "?":
                return true;
            case "@":
                return true;
            case "[":
                return true;
            case "]":
                return true;
            case "_":
                return true;
            case "{":
                return true;
            case "}":
                return true;
            case "~":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a0 = F2(function (c, accum) {
        return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
    }), $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a1 = false, $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2($elm$core$String$foldl, $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a1);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
        switch (c) {
            case " ":
                return true;
            case "\f":
                return true;
            case "\n":
                return true;
            case "\r":
                return true;
            case "\t":
                return true;
            case "\v":
                return true;
            case "\u00A0":
                return true;
            case "\u2028":
                return true;
            case "\u2029":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a0 = F2(function (c, accum) {
        return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
    }), $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a1 = false, $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2($elm$core$String$foldl, $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a1);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
        if (!mstring.$) {
            var string = mstring.a;
            return ($elm$core$String$isEmpty(string) || _String_foldl_fn($dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace_a1, string)) ? 0 : (_String_foldl_fn($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation_a1, string) ? 1 : 2);
        }
        else {
            return 0;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken_fn = function (_char, rawText, regMatch) {
        var _v0 = regMatch.gF;
        if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var maybeLeftFringe = _v1.a;
            var _v2 = _v1.b;
            var delimiter = _v2.a.a;
            var _v3 = _v2.b;
            var maybeRightFringe = _v3.a;
            var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
            var leftFringeLength = function () {
                if (!maybeLeftFringe.$) {
                    var left = maybeLeftFringe.a;
                    return $elm$core$String$length(left);
                }
                else {
                    return 0;
                }
            }();
            var mLeftFringe = ((!(!regMatch.d)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(_String_slice_fn(regMatch.d - 1, regMatch.d, rawText)) : maybeLeftFringe;
            var backslashesLength = function () {
                if (!maybeBackslashes.$) {
                    var backslashes = maybeBackslashes.a;
                    return $elm$core$String$length(backslashes);
                }
                else {
                    return 0;
                }
            }();
            var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
                if ((!mLeftFringe.$) && (mLeftFringe.a === "\\")) {
                    return true;
                }
                else {
                    return false;
                }
            }();
            var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
            var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
            if ((delimiterLength <= 0) || ((_char === "_") && ((lFringeRank === 2) && (rFringeRank === 2)))) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var index = ((regMatch.d + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
                return $elm$core$Maybe$Just({
                    d: index,
                    gf: delimiterLength,
                    k: $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken_fn(_char, { c1: lFringeRank, dm: rFringeRank })
                });
            }
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
        return $elm$core$List$filterMap_fn(A2($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken, "*", str), _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\`+)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var backtick = _v1.a.a;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            return $elm$core$Maybe$Just({
                d: regMatch.d + backslashesLength,
                gf: $elm$core$String$length(backtick),
                k: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken(1) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken(0)
            });
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(?:(\\\\+)|( {2,}))\\n"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
        var _v0 = regMatch.gF;
        _v0$2: while (true) {
            if (_v0.b) {
                if (!_v0.a.$) {
                    var backslashes = _v0.a.a;
                    var backslashesLength = $elm$core$String$length(backslashes);
                    return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just({ d: (regMatch.d + backslashesLength) - 1, gf: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken }) : $elm$core$Maybe$Nothing;
                }
                else {
                    if (_v0.b.b && (!_v0.b.a.$)) {
                        var _v1 = _v0.b;
                        return $elm$core$Maybe$Just({
                            d: regMatch.d,
                            gf: $elm$core$String$length(regMatch.d1),
                            k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
                        });
                    }
                    else {
                        break _v0$2;
                    }
                }
            }
            else {
                break _v0$2;
            }
        }
        return $elm$core$Maybe$Nothing;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
        var _v0 = regMatch.gF;
        _v0$2: while (true) {
            if (_v0.b) {
                if (!_v0.a.$) {
                    var backslashes = _v0.a.a;
                    var backslashesLength = $elm$core$String$length(backslashes);
                    return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ d: regMatch.d + backslashesLength, gf: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken }) : $elm$core$Maybe$Just({ d: (regMatch.d + backslashesLength) - 1, gf: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken });
                }
                else {
                    if (_v0.b.b) {
                        var _v1 = _v0.b;
                        return $elm$core$Maybe$Just({
                            d: regMatch.d,
                            gf: $elm$core$String$length(regMatch.d1),
                            k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
                        });
                    }
                    else {
                        break _v0$2;
                    }
                }
            }
            else {
                break _v0$2;
            }
        }
        return $elm$core$Maybe$Nothing;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(?:(\\\\+)|( *))\\n"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
        return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\])"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = { $: 3 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ d: regMatch.d + backslashesLength, gf: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose }) : $elm$core$Maybe$Nothing;
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\!)?(\\[)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = 0;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var maybeImageOpen = _v1.a;
            var _v2 = _v1.b;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
            var index = isEscaped ? ((regMatch.d + backslashesLength) + 1) : (regMatch.d + backslashesLength);
            if (isEscaped) {
                if (!maybeImageOpen.$) {
                    return $elm$core$Maybe$Just({
                        d: index,
                        gf: 1,
                        k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(0)
                    });
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
            else {
                if (!maybeImageOpen.$) {
                    return $elm$core$Maybe$Just({ d: index, gf: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken });
                }
                else {
                    return $elm$core$Maybe$Just({
                        d: index,
                        gf: 1,
                        k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(0)
                    });
                }
            }
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
        return { $: 9, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
        var _v0 = regMatch.gF;
        if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
            var maybeBackslashes = _v0.a;
            var _v1 = _v0.b;
            var tilde = _v1.a.a;
            var backslashesLength = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn($elm$core$String$length, maybeBackslashes));
            var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2($elm$core$String$length(tilde), $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken(1)) : _Utils_Tuple2($elm$core$String$length(tilde), $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken(0));
            var length = _v2.a;
            var meaning = _v2.b;
            return $elm$core$Maybe$Just({ d: regMatch.d + backslashesLength, gf: length, k: meaning });
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(~{2,})([^~])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken, _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)([^_])?(\\_+)([^_])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
        return $elm$core$List$filterMap_fn(A2($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken, "_", str), _Regex_findAtMost_fn($elm$regex$Regex$find_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn = function (left, right) {
        if (left.b) {
            var lfirst = left.a;
            var lrest = left.b;
            if (right.b) {
                var rfirst = right.a;
                var rrest = right.b;
                return (_Utils_cmp(lfirst.d, rfirst.d) < 0) ? _List_Cons(lfirst, $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn(lrest, right)) : _List_Cons(rfirst, $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn(left, rrest));
            }
            else {
                return left;
            }
        }
        else {
            return right;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
        return $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens_fn(_List_sortBy_fn(function ($) {
            return $.d;
        }, $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText)), _List_sortBy_fn(function ($) {
            return $.d;
        }, $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText)), 0), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex_fn($dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText))))))));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
        return { $: 7, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
        return { $: 6, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
        return { $: 5, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = 1;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
        return { $: 3, a: a };
    };
    var $elm$regex$Regex$contains = _Regex_contains;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)"));
    var $elm$url$Url$percentDecode = _Url_percentDecode;
    var $elm$url$Url$percentEncode = _Url_percentEncode;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a0 = $elm$url$Url$percentEncode, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a1 = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex, function (match) {
        return $elm$core$Maybe$withDefault_fn(match.d1, $elm$url$Url$percentDecode(match.d1));
    }), $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a1);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
        var match = _v0;
        return _Regex_contains_fn($dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.ii) ? $elm$core$Result$Ok(_Utils_update(match, {
            A: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(_Utils_Tuple2(match.ii, $elm$core$Basics$composeR_fn($dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a1, match.ii)))
        })) : $elm$core$Result$Err(match);
    };
    var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
    var $elm$core$List$head = function (list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(x);
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = "[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*";
    var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("^\\[\\s*(" + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ")\\s*\\]")));
    var $elm$core$Maybe$andThen_fn = function (callback, maybeValue) {
        if (!maybeValue.$) {
            var value = maybeValue.a;
            return callback(value);
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $elm$core$Maybe$andThen = F2($elm$core$Maybe$andThen_fn);
    var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
        return original;
    };
    var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a0 = $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a1 = $elm$core$String$toLower, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a0, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a1);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle_fn = function (rawUrl, maybeTitle) {
        return _Utils_Tuple2($elm$core$Basics$composeR_fn($dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a1, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)), $elm$core$Maybe$map_fn($dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch_fn = function (matchModel, references, maybeRegexMatch) {
        var refLabel = function (str) {
            return $elm$core$String$isEmpty(str) ? matchModel.ii : str;
        }($elm$core$Maybe$withDefault_fn(matchModel.ii, $elm$core$Maybe$withDefault_fn($elm$core$Maybe$Nothing, $elm$core$Maybe$andThen_fn(A2($elm$core$Basics$composeR, function ($) {
            return $.gF;
        }, $elm$core$List$head), maybeRegexMatch))));
        var _v0 = $elm$core$Dict$get_fn($elm$core$Basics$composeR_fn($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a0, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel_a1, refLabel), references);
        if (_v0.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v1 = _v0.a;
            var rawUrl = _v1.a;
            var maybeTitle = _v1.b;
            var type_ = function () {
                var _v3 = matchModel.A;
                if (_v3.$ === 5) {
                    return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle_fn(rawUrl, maybeTitle));
                }
                else {
                    return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle_fn(rawUrl, maybeTitle));
                }
            }();
            var regexMatchLength = function () {
                if (!maybeRegexMatch.$) {
                    var match = maybeRegexMatch.a.d1;
                    return $elm$core$String$length(match);
                }
                else {
                    return 0;
                }
            }();
            return $elm$core$Maybe$Just(_Utils_update(matchModel, { o: matchModel.o + regexMatchLength, A: type_ }));
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3($dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences_fn = function (remainText, _v0, references) {
        var tempMatch = _v0;
        var matches = _Regex_findAtMost_fn(1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
        return $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch_fn(tempMatch, references, $elm$core$List$head(matches));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences_fn);
    var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = "\\f\\v\\r\\n";
    var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = " \\t\\f\\v\\r\\n";
    var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = "(?:<([^<>" + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + ("]*)>|([^" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ("\\(\\)\\\\]*(?:\\\\.[^" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + "\\(\\)\\\\]*)*))")))));
    var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = "(?:[" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ("]+" + ("(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|" + ("\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|" + "\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?"))));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("^\\(\\s*" + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + "\\s*\\)"))));
    var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
        var process = F2(function (a, maybeFound) {
            if (!maybeFound.$) {
                var found = maybeFound.a;
                return $elm$core$Maybe$Just(found);
            }
            else {
                return a;
            }
        });
        return $elm$core$List$foldl_fn(process, $elm$core$Maybe$Nothing, maybes);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch_fn = function (matchModel, regexMatch) {
        var _v0 = regexMatch.gF;
        if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
            var maybeRawUrlAngleBrackets = _v0.a;
            var _v1 = _v0.b;
            var maybeRawUrlWithoutBrackets = _v1.a;
            var _v2 = _v1.b;
            var maybeTitleSingleQuotes = _v2.a;
            var _v3 = _v2.b;
            var maybeTitleDoubleQuotes = _v3.a;
            var _v4 = _v3.b;
            var maybeTitleParenthesis = _v4.a;
            var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(_List_fromArray([maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
            var toMatch = function (rawUrl) {
                return _Utils_update(matchModel, {
                    o: matchModel.o + $elm$core$String$length(regexMatch.d1),
                    A: function () {
                        var _v5 = matchModel.A;
                        if (_v5.$ === 5) {
                            return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
                        }
                        else {
                            return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
                        }
                    }()($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle_fn(rawUrl, maybeTitle))
                });
            };
            var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(_List_fromArray([maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
            return $elm$core$Maybe$Just(toMatch($elm$core$Maybe$withDefault_fn("", maybeRawUrl)));
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType_fn = function (remainText, _v0, refs) {
        var tempMatch = _v0;
        var _v1 = _Regex_findAtMost_fn(1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
        if (_v1.b) {
            var first = _v1.a;
            var _v2 = $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch_fn(tempMatch, first);
            if (!_v2.$) {
                var match = _v2.a;
                return $elm$core$Maybe$Just(match);
            }
            else {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences_fn(remainText, tempMatch, refs);
            }
        }
        else {
            return $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences_fn(remainText, tempMatch, refs);
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping_fn = function (_v0, remainMatches) {
        var match = _v0;
        var overlappingMatches = $elm$core$List$filter(function (_v1) {
            var testMatch = _v1;
            return (_Utils_cmp(match.o, testMatch.q) > 0) && (_Utils_cmp(match.o, testMatch.o) < 0);
        });
        return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(_List_Cons(match, remainMatches)) : $elm$core$Maybe$Nothing;
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = $elm$core$Maybe$withDefault_fn($elm$regex$Regex$never, $elm$regex$Regex$fromString("^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
        var match = _v0;
        return _Regex_contains_fn($dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.ii) ? $elm$core$Result$Ok(_Utils_update(match, {
            A: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(_Utils_Tuple2(match.ii, "mailto:" + $elm$core$Basics$composeR_fn($dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a0, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl_a1, match.ii)))
        })) : $elm$core$Result$Err(match);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp_fn = function (innerTokens, isToken, tokens) {
        findTokenHelp: while (true) {
            if (!tokens.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var nextToken = tokens.a;
                var remainingTokens = tokens.b;
                if (isToken(nextToken)) {
                    return $elm$core$Maybe$Just(_Utils_Tuple3(nextToken, $elm$core$List$reverse(innerTokens), remainingTokens));
                }
                else {
                    var $temp$innerTokens = _List_Cons(nextToken, innerTokens), $temp$tokens = remainingTokens;
                    innerTokens = $temp$innerTokens;
                    tokens = $temp$tokens;
                    continue findTokenHelp;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn = function (isToken, tokens) {
        return $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp_fn(_List_Nil, isToken, tokens);
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken_fn = function (a, b) {
        return { $: 6, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = 0;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken_fn = function (rawText, _v0) {
        var match = _v0;
        var consumedCharacters = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(F3(function (startOffset, htmlTag, endOffset) {
            return { hz: htmlTag, gf: endOffset - startOffset };
        })), $elm$parser$Parser$Advanced$getOffset), $dillonkearns$elm_markdown$HtmlParser$html), $elm$parser$Parser$Advanced$getOffset);
        var parsed = $elm$parser$Parser$Advanced$run_fn(consumedCharacters, $elm$core$String$dropLeft_fn(match.q, rawText));
        if (!parsed.$) {
            var length = parsed.a.gf;
            var htmlTag = parsed.a.hz;
            var htmlToken = $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken_fn(0, htmlTag);
            return $elm$core$Maybe$Just({ d: match.q, gf: length, k: htmlToken });
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken_fn);
    var $dillonkearns$elm_markdown$Markdown$Helpers$ifError_fn = function (_function, result) {
        if (!result.$) {
            return result;
        }
        else {
            var err = result.a;
            return _function(err);
        }
    }, $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2($dillonkearns$elm_markdown$Markdown$Helpers$ifError_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair_fn = function (closeToken, openToken) {
        var _v0 = openToken.k;
        if (!_v0.$) {
            if (!_v0.a) {
                var _v1 = _v0.a;
                return openToken.gf - 1 === closeToken.gf;
            }
            else {
                var _v2 = _v0.a;
                return _Utils_eq(openToken.gf, closeToken.gf);
            }
        }
        else {
            return false;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2($dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
        var _v0 = token.k;
        switch (_v0.$) {
            case 1:
                return true;
            case 2:
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken_fn = function (closeToken, openToken) {
        var _v0 = openToken.k;
        if (_v0.$ === 7) {
            var openChar = _v0.a;
            var open = _v0.b;
            var _v1 = closeToken.k;
            if (_v1.$ === 7) {
                var closeChar = _v1.a;
                var close = _v1.b;
                return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.c1, open.dm) || _Utils_eq(close.c1, close.dm)) ? ((!(!_Basics_modBy_fn(3, closeToken.gf + openToken.gf))) || ((!_Basics_modBy_fn(3, closeToken.gf)) && (!_Basics_modBy_fn(3, openToken.gf)))) : true) : false;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2($dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair_fn = function (closeToken, openToken) {
        var _v0 = function () {
            var _v1 = openToken.k;
            if (_v1.$ === 9) {
                if (!_v1.a) {
                    var _v2 = _v1.a;
                    return _Utils_Tuple2(true, openToken.gf - 1);
                }
                else {
                    var _v3 = _v1.a;
                    return _Utils_Tuple2(true, openToken.gf);
                }
            }
            else {
                return _Utils_Tuple2(false, 0);
            }
        }();
        var openTokenIsStrikethrough = _v0.a;
        var openTokenLength = _v0.b;
        var _v4 = function () {
            var _v5 = closeToken.k;
            if (_v5.$ === 9) {
                if (!_v5.a) {
                    var _v6 = _v5.a;
                    return _Utils_Tuple2(true, closeToken.gf - 1);
                }
                else {
                    var _v7 = _v5.a;
                    return _Utils_Tuple2(true, closeToken.gf);
                }
            }
            else {
                return _Utils_Tuple2(false, 0);
            }
        }();
        var closeTokenIsStrikethrough = _v4.a;
        var closeTokenLength = _v4.b;
        return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2($dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = { $: 1 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch_fn = function (token, type_) {
        return { o: token.d + token.gf, d2: _List_Nil, q: token.d, ii: "", ak: 0, O: 0, A: type_ };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM_fn = function (remaining, matches) {
        lineBreakTTM: while (true) {
            if (!remaining.b) {
                return matches;
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v1 = token.k;
                if (_v1.$ === 8) {
                    var $temp$remaining = tokensTail, $temp$matches = _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch_fn(token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType), matches);
                    remaining = $temp$remaining;
                    matches = $temp$matches;
                    continue lineBreakTTM;
                }
                else {
                    var $temp$remaining = tokensTail;
                    remaining = $temp$remaining;
                    continue lineBreakTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F2($dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens_fn = function (_v0, tokensTail) {
        var match = _v0;
        return $elm$core$List$filter_fn(function (token) {
            return _Utils_cmp(token.d, match.o) > -1;
        }, tokensTail);
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch_fn = function (closeToken, escaped, matches, references, rawText, _v44) {
        var openToken = _v44.a;
        var remainTokens = _v44.c;
        var result = $dillonkearns$elm_markdown$Markdown$Helpers$ifError_fn($dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch, $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn(references, rawText, function (s) {
            return s;
        }, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, openToken, closeToken, _List_Nil)));
        if (result.$ === 1) {
            var tempMatch = result.a;
            if (escaped === 1) {
                var _v47 = $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken_fn(rawText, tempMatch);
                if (!_v47.$) {
                    var newToken = _v47.a;
                    return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Cons(newToken, remainTokens), matches));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        }
        else {
            var newMatch = result.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(remainTokens, _List_Cons(newMatch, matches)));
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM_fn = function (remaining, tokens, matches, references, rawText) {
        codeAutolinkTypeHtmlTagTTM: while (true) {
            if (!remaining.b) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM_fn($elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v36 = token.k;
                switch (_v36.$) {
                    case 0:
                        var _v37 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn($dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token), tokens);
                        if (!_v37.$) {
                            var code = _v37.a;
                            var _v38 = $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch_fn(token, matches, references, rawText, code);
                            var newTokens = _v38.a;
                            var newMatches = _v38.b;
                            var $temp$remaining = tokensTail, $temp$tokens = newTokens, $temp$matches = newMatches;
                            remaining = $temp$remaining;
                            tokens = $temp$tokens;
                            matches = $temp$matches;
                            continue codeAutolinkTypeHtmlTagTTM;
                        }
                        else {
                            var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                            remaining = $temp$remaining;
                            tokens = $temp$tokens;
                            continue codeAutolinkTypeHtmlTagTTM;
                        }
                    case 5:
                        var isEscaped = _v36.a;
                        var isAngleBracketOpen = function (_v43) {
                            var meaning = _v43.k;
                            if (meaning.$ === 4) {
                                return true;
                            }
                            else {
                                return false;
                            }
                        };
                        var _v39 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn(isAngleBracketOpen, tokens);
                        if (!_v39.$) {
                            var found = _v39.a;
                            var _v40 = $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch_fn(token, isEscaped, matches, references, rawText, found);
                            if (!_v40.$) {
                                var _v41 = _v40.a;
                                var newTokens = _v41.a;
                                var newMatches = _v41.b;
                                var $temp$remaining = tokensTail, $temp$tokens = $elm$core$List$filter_fn(A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), newTokens), $temp$matches = newMatches;
                                remaining = $temp$remaining;
                                tokens = $temp$tokens;
                                matches = $temp$matches;
                                continue codeAutolinkTypeHtmlTagTTM;
                            }
                            else {
                                var $temp$remaining = tokensTail, $temp$tokens = $elm$core$List$filter_fn(A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), tokens);
                                remaining = $temp$remaining;
                                tokens = $temp$tokens;
                                continue codeAutolinkTypeHtmlTagTTM;
                            }
                        }
                        else {
                            var $temp$remaining = tokensTail, $temp$tokens = $elm$core$List$filter_fn(A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), tokens);
                            remaining = $temp$remaining;
                            tokens = $temp$tokens;
                            continue codeAutolinkTypeHtmlTagTTM;
                        }
                    default:
                        var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                        remaining = $temp$remaining;
                        tokens = $temp$tokens;
                        continue codeAutolinkTypeHtmlTagTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch_fn = function (closeToken, matches, references, rawText, _v32) {
        var openToken = _v32.a;
        var remainTokens = _v32.c;
        var updatedOpenToken = function () {
            var _v33 = openToken.k;
            if ((!_v33.$) && (!_v33.a)) {
                var _v34 = _v33.a;
                return _Utils_update(openToken, { d: openToken.d + 1, gf: openToken.gf - 1 });
            }
            else {
                return openToken;
            }
        }();
        var match = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn(references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
        return _Utils_Tuple2(remainTokens, _List_Cons(match, matches));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM_fn = function (remaining, tokens, matches, references, rawText) {
        emphasisTTM: while (true) {
            if (!remaining.b) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM_fn($elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v27 = token.k;
                if (_v27.$ === 7) {
                    var _char = _v27.a;
                    var rightFringeRank = _v27.b.dm;
                    var leftFringeRank = _v27.b.c1;
                    if (_Utils_eq(leftFringeRank, rightFringeRank)) {
                        if ((!(!rightFringeRank)) && ((_char !== "_") || (rightFringeRank === 1))) {
                            var _v28 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn($dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token), tokens);
                            if (!_v28.$) {
                                var found = _v28.a;
                                var _v29 = $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch_fn(references, rawText, token, tokensTail, found);
                                var newRemaining = _v29.a;
                                var match = _v29.b;
                                var newTokens = _v29.c;
                                var $temp$remaining = newRemaining, $temp$tokens = newTokens, $temp$matches = _List_Cons(match, matches);
                                remaining = $temp$remaining;
                                tokens = $temp$tokens;
                                matches = $temp$matches;
                                continue emphasisTTM;
                            }
                            else {
                                var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                                remaining = $temp$remaining;
                                tokens = $temp$tokens;
                                continue emphasisTTM;
                            }
                        }
                        else {
                            var $temp$remaining = tokensTail;
                            remaining = $temp$remaining;
                            continue emphasisTTM;
                        }
                    }
                    else {
                        if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
                            var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                            remaining = $temp$remaining;
                            tokens = $temp$tokens;
                            continue emphasisTTM;
                        }
                        else {
                            var _v30 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn($dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token), tokens);
                            if (!_v30.$) {
                                var found = _v30.a;
                                var _v31 = $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch_fn(references, rawText, token, tokensTail, found);
                                var newRemaining = _v31.a;
                                var match = _v31.b;
                                var newTokens = _v31.c;
                                var $temp$remaining = newRemaining, $temp$tokens = newTokens, $temp$matches = _List_Cons(match, matches);
                                remaining = $temp$remaining;
                                tokens = $temp$tokens;
                                matches = $temp$matches;
                                continue emphasisTTM;
                            }
                            else {
                                var $temp$remaining = tokensTail;
                                remaining = $temp$remaining;
                                continue emphasisTTM;
                            }
                        }
                    }
                }
                else {
                    var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    continue emphasisTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch_fn = function (references, rawText, closeToken, tokensTail, _v25) {
        var openToken = _v25.a;
        var innerTokens = _v25.b;
        var remainTokens = _v25.c;
        var remainLength = openToken.gf - closeToken.gf;
        var updt = (!remainLength) ? { ew: closeToken, d7: openToken, e5: remainTokens, fn: tokensTail } : ((remainLength > 0) ? {
            ew: closeToken,
            d7: _Utils_update(openToken, { d: openToken.d + remainLength, gf: closeToken.gf }),
            e5: _List_Cons(_Utils_update(openToken, { gf: remainLength }), remainTokens),
            fn: tokensTail
        } : {
            ew: _Utils_update(closeToken, { gf: openToken.gf }),
            d7: openToken,
            e5: remainTokens,
            fn: _List_Cons(_Utils_update(closeToken, { d: closeToken.d + openToken.gf, gf: -remainLength }), tokensTail)
        });
        var match = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn(references, rawText, function (s) {
            return s;
        }, $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.d7.gf), updt.d7, updt.ew, $elm$core$List$reverse(innerTokens));
        return _Utils_Tuple3(updt.fn, match, updt.e5);
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM_fn = function (remaining, tokens, matches, references, rawText) {
        htmlElementTTM: while (true) {
            if (!remaining.b) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM_fn($elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v23 = token.k;
                if (_v23.$ === 6) {
                    var isOpen = _v23.a;
                    var htmlModel = _v23.b;
                    var $temp$remaining = tokensTail, $temp$matches = _List_Cons($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch_fn(token, $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)), matches);
                    remaining = $temp$remaining;
                    matches = $temp$matches;
                    continue htmlElementTTM;
                }
                else {
                    var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    continue htmlElementTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5($dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM_fn = function (remaining, tokens, matches, references, rawText) {
        linkImageTypeTTM: while (true) {
            if (!remaining.b) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM_fn($elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v18 = token.k;
                if (_v18.$ === 3) {
                    var _v19 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn($dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
                    if (!_v19.$) {
                        var found = _v19.a;
                        var _v20 = $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch_fn(token, tokensTail, matches, references, rawText, found);
                        if (!_v20.$) {
                            var _v21 = _v20.a;
                            var x = _v21.a;
                            var newMatches = _v21.b;
                            var newTokens = _v21.c;
                            var $temp$remaining = x, $temp$tokens = newTokens, $temp$matches = newMatches;
                            remaining = $temp$remaining;
                            tokens = $temp$tokens;
                            matches = $temp$matches;
                            continue linkImageTypeTTM;
                        }
                        else {
                            var $temp$remaining = tokensTail;
                            remaining = $temp$remaining;
                            continue linkImageTypeTTM;
                        }
                    }
                    else {
                        var $temp$remaining = tokensTail;
                        remaining = $temp$remaining;
                        continue linkImageTypeTTM;
                    }
                }
                else {
                    var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    continue linkImageTypeTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5($dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch_fn = function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
        var openToken = _v8.a;
        var innerTokens = _v8.b;
        var remainTokens = _v8.c;
        var removeOpenToken = _Utils_Tuple3(tokensTail, oldMatches, _Utils_ap(innerTokens, remainTokens));
        var remainText = $elm$core$String$dropLeft_fn(closeToken.d + 1, rawText);
        var inactivateLinkOpenToken = function (token) {
            var _v16 = token.k;
            if (_v16.$ === 1) {
                return _Utils_update(token, {
                    k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(1)
                });
            }
            else {
                return token;
            }
        };
        var findTempMatch = function (isLinkType) {
            return $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn(references, rawText, function (s) {
                return s;
            }, isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(_Utils_Tuple2("", $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(_Utils_Tuple2("", $elm$core$Maybe$Nothing)), openToken, closeToken, $elm$core$List$reverse(innerTokens));
        };
        var _v9 = openToken.k;
        switch (_v9.$) {
            case 2:
                var tempMatch = findTempMatch(false);
                var _v10 = $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType_fn(remainText, tempMatch, references);
                if (_v10.$ === 1) {
                    return $elm$core$Maybe$Just(removeOpenToken);
                }
                else {
                    var match = _v10.a;
                    var _v11 = $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping_fn(match, oldMatches);
                    if (!_v11.$) {
                        var matches = _v11.a;
                        return $elm$core$Maybe$Just(_Utils_Tuple3($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens_fn(match, tokensTail), matches, remainTokens));
                    }
                    else {
                        return $elm$core$Maybe$Just(removeOpenToken);
                    }
                }
            case 1:
                if (!_v9.a) {
                    var _v12 = _v9.a;
                    var tempMatch = findTempMatch(true);
                    var _v13 = $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType_fn(remainText, tempMatch, references);
                    if (_v13.$ === 1) {
                        return $elm$core$Maybe$Just(removeOpenToken);
                    }
                    else {
                        var match = _v13.a;
                        var _v14 = $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping_fn(match, oldMatches);
                        if (!_v14.$) {
                            var matches = _v14.a;
                            return $elm$core$Maybe$Just(_Utils_Tuple3($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens_fn(match, tokensTail), matches, $elm$core$List$map_fn(inactivateLinkOpenToken, remainTokens)));
                        }
                        else {
                            return $elm$core$Maybe$Just(removeOpenToken);
                        }
                    }
                }
                else {
                    var _v15 = _v9.a;
                    return $elm$core$Maybe$Just(removeOpenToken);
                }
            default:
                return $elm$core$Maybe$Nothing;
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM_fn = function (remaining, tokens, matches, references, rawText) {
        strikethroughTTM: while (true) {
            if (!remaining.b) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM_fn($elm$core$List$reverse(tokens), matches);
            }
            else {
                var token = remaining.a;
                var tokensTail = remaining.b;
                var _v5 = token.k;
                if (_v5.$ === 9) {
                    var _v6 = $dillonkearns$elm_markdown$Markdown$InlineParser$findToken_fn($dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token), tokens);
                    if (!_v6.$) {
                        var content = _v6.a;
                        var _v7 = $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch_fn(token, matches, references, rawText, content);
                        var newTokens = _v7.a;
                        var newMatches = _v7.b;
                        var $temp$remaining = tokensTail, $temp$tokens = newTokens, $temp$matches = newMatches;
                        remaining = $temp$remaining;
                        tokens = $temp$tokens;
                        matches = $temp$matches;
                        continue strikethroughTTM;
                    }
                    else {
                        var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                        remaining = $temp$remaining;
                        tokens = $temp$tokens;
                        continue strikethroughTTM;
                    }
                }
                else {
                    var $temp$remaining = tokensTail, $temp$tokens = _List_Cons(token, tokens);
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    continue strikethroughTTM;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch_fn = function (closeToken, matches, references, rawText, _v1) {
        var openToken = _v1.a;
        var remainTokens = _v1.c;
        var updatedOpenToken = function () {
            var _v2 = openToken.k;
            if ((_v2.$ === 9) && (!_v2.a)) {
                var _v3 = _v2.a;
                return _Utils_update(openToken, { d: openToken.d + 1, gf: openToken.gf - 1 });
            }
            else {
                return openToken;
            }
        }();
        var match = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn(references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
        return _Utils_Tuple2(remainTokens, _List_Cons(match, matches));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn = function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
        var textStart = openToken.d + openToken.gf;
        var textEnd = closeToken.d;
        var text = processText(_String_slice_fn(textStart, textEnd, rawText));
        var start = openToken.d;
        var end = closeToken.d + closeToken.gf;
        var match = { o: end, d2: _List_Nil, q: start, ii: text, ak: textEnd, O: textStart, A: type_ };
        var matches = $elm$core$List$map_fn(function (_v0) {
            var matchModel = _v0;
            return $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch_fn(match, matchModel);
        }, $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches_fn(innerTokens, _List_Nil, references, rawText));
        return { o: end, d2: matches, q: start, ii: text, ak: textEnd, O: textStart, A: type_ };
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch_fn);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches_fn = function (tokens, matches, references, rawText) {
        return $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM_fn(tokens, _List_Nil, matches, references, rawText);
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches_fn);
    var $elm$core$String$trim = _String_trim;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parse_fn = function (refs, rawText_) {
        var rawText = $elm$core$String$trim(rawText_);
        var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
        return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches_fn(rawText, _List_Nil, $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches_fn(tokens, _List_Nil, refs, rawText))));
    }, $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2($dillonkearns$elm_markdown$Markdown$InlineParser$parse_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(" ", $elm$parser$Parser$Expecting(" "))),
        $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(">", $elm$parser$Parser$Expecting(">"))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($elm$core$Char$isAlpha, $elm$parser$Parser$Expecting("Alpha")), $elm$parser$Parser$Advanced$chompWhile(function (c) {
            return $elm$core$Char$isAlphaNum(c) || (c === "-");
        })), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(":", $elm$parser$Parser$Expecting(":"))),
            $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn("@", $elm$parser$Parser$Expecting("@"))),
            $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn("\\", $elm$parser$Parser$Expecting("\\"))),
            $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn("+", $elm$parser$Parser$Expecting("+"))),
            $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(".", $elm$parser$Parser$Expecting(".")))
        ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (rawLine, _v0) {
        return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
    }, $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn("<", $elm$parser$Parser$Expecting("<"))), $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag), $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
    var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
        return $elm$parser$Parser$Advanced$token($elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$Expecting(str)));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
        var curr = _v0.a;
        var acc = _v0.b;
        var _return = $elm$core$Maybe$withDefault_fn($elm$parser$Parser$Advanced$Done(acc), $elm$core$Maybe$map_fn(function (cell) {
            return $elm$parser$Parser$Advanced$Done(_List_Cons(cell, acc));
        }, curr));
        var finishCell = $elm$core$Maybe$withDefault_fn($elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Nothing, acc)), $elm$core$Maybe$map_fn(function (cell) {
            return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Cons(cell, acc)));
        }, curr));
        var addToCurrent = function (c) {
            return _Utils_ap($elm$core$Maybe$withDefault_fn("", curr), c);
        };
        var continueCell = function (c) {
            return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Just(addToCurrent(c)), acc));
        };
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (_v1) {
                return _return;
            }, $dillonkearns$elm_markdown$Parser$Token$parseString("|\n")),
            $elm$parser$Parser$Advanced$map_fn(function (_v2) {
                return _return;
            }, $dillonkearns$elm_markdown$Parser$Token$parseString("\n")),
            $elm$parser$Parser$Advanced$map_fn(function (_v3) {
                return _return;
            }, $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end"))),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("|"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\\\|")),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("\\"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\\\")),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("|"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\|")),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(finishCell)), $dillonkearns$elm_markdown$Parser$Token$parseString("|")),
            $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (_char, _v4) {
                return continueCell(_char);
            }, $elm$parser$Parser$Advanced$chompIf_fn($elm$core$Basics$always(true), $elm$parser$Parser$Problem("No character found")))
        ]));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = $elm$parser$Parser$Advanced$map_fn(A2($elm$core$List$foldl, F2(function (cell, acc) {
        return _List_Cons($elm$core$String$trim(cell), acc);
    }), _List_Nil), $elm$parser$Parser$Advanced$loop_fn(_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil), $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
    var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Parser$Token$parseString("|"),
        $elm$parser$Parser$Advanced$succeed(0)
    ]))), $dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader_fn = function (_v0, headersRow) {
        var columnAlignments = _v0.b;
        var headersWithAlignment = function (headers) {
            return _List_map2_fn_unwrapped(function (headerCell, alignment) {
                return { cw: alignment, bM: headerCell };
            }, headers, columnAlignments);
        };
        var combineHeaderAndDelimiter = function (headers) {
            return _Utils_eq($elm$core$List$length(headers), $elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(headersWithAlignment(headers)) : $elm$core$Result$Err("Tables must have the same number of header columns (" + ($elm$core$String$fromInt($elm$core$List$length(headers)) + (") as delimiter columns (" + ($elm$core$String$fromInt($elm$core$List$length(columnAlignments)) + ")"))));
        };
        var _v1 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
        if (!_v1.$) {
            var headers = _v1.a;
            return combineHeaderAndDelimiter(headers);
        }
        else {
            return $elm$core$Result$Err("Unable to parse previous line as a table header");
        }
    }, $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2($dillonkearns$elm_markdown$Markdown$TableParser$parseHeader_fn);
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock_fn = function (language, body) {
        return { iL: body, hH: language };
    }, $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock_fn);
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
        var toInfoString = F2(function (str, _v2) {
            var _v1 = $elm$core$String$trim(str);
            if (_v1 === "") {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var trimmed = _v1;
                return $elm$core$Maybe$Just(trimmed);
            }
        });
        var _v0 = fenceCharacter.av;
        if (!_v0) {
            return $elm$parser$Parser$Advanced$mapChompedString_fn(toInfoString, $elm$parser$Parser$Advanced$chompWhile(function (c) {
                return (c !== "`") && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
            }));
        }
        else {
            return $elm$parser$Parser$Advanced$mapChompedString_fn(toInfoString, $elm$parser$Parser$Advanced$chompWhile(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = 0;
    var $dillonkearns$elm_markdown$Parser$Token$backtick = $elm$parser$Parser$Advanced$Token_fn("`", $elm$parser$Parser$Expecting("a '`'"));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = { cE: "`", av: 0, dB: $dillonkearns$elm_markdown$Parser$Token$backtick };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
        switch (_int) {
            case 1:
                return $elm$parser$Parser$Advanced$succeed(0);
            case 2:
                return $elm$parser$Parser$Advanced$succeed(1);
            case 3:
                return $elm$parser$Parser$Advanced$succeed(2);
            case 4:
                return $elm$parser$Parser$Advanced$succeed(3);
            default:
                return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("Fenced code blocks should be indented no more than 3 spaces"));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast_fn = function (minLength, fenceCharacter) {
        var builtTokens = $elm$core$List$foldl_fn_unwrapped(function (t, p) {
            return $elm$parser$Parser$Advanced$ignorer_fn(p, t);
        }, $elm$parser$Parser$Advanced$succeed(0), $elm$core$List$repeat_fn(minLength, $elm$parser$Parser$Advanced$token(fenceCharacter.dB)));
        return $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (str, _v0) {
            return _Utils_Tuple2(fenceCharacter, $elm$core$String$length(str));
        }, $elm$parser$Parser$Advanced$ignorer_fn(builtTokens, $elm$parser$Parser$Advanced$chompWhile($elm$core$Basics$eq(fenceCharacter.cE))));
    }, $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast_fn);
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = 1;
    var $dillonkearns$elm_markdown$Parser$Token$tilde = $elm$parser$Parser$Advanced$Token_fn("~", $elm$parser$Parser$Expecting("a `~`"));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = { cE: "~", av: 1, dB: $dillonkearns$elm_markdown$Parser$Token$tilde };
    var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Whitespace$space, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Whitespace$space,
            $elm$parser$Parser$Advanced$succeed(0)
        ]))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Whitespace$space,
            $elm$parser$Parser$Advanced$succeed(0)
        ]))),
        $elm$parser$Parser$Advanced$succeed(0)
    ]));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(F2(function (indent, _v0) {
        var character = _v0.a;
        var length = _v0.b;
        return { cF: character, dW: indent, gf: length };
    })), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast_fn(3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
        $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast_fn(3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
    ])));
    var $dillonkearns$elm_markdown$Whitespace$isSpace_a0 = " ", $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq($dillonkearns$elm_markdown$Whitespace$isSpace_a0);
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence_fn = function (minLength, fenceCharacter) {
        return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast_fn(minLength, fenceCharacter)), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    }, $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence_fn);
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Parser$Extra$upTo_fn(indented, $dillonkearns$elm_markdown$Whitespace$space)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    };
    var $elm$parser$Parser$Advanced$getSource = function (s) {
        return $elm$parser$Parser$Advanced$Good_fn(false, s.ky, s);
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
        var fence = _v0.a;
        var body = _v0.b;
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(body)), $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
            $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (lineEnd, _v1) {
                return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2(fence, _Utils_ap(body, lineEnd)));
            }, $dillonkearns$elm_markdown$Whitespace$lineEnd),
            $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(body)), $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence_fn(fence.gf, fence.cF))),
            $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(F3(function (start, end, source) {
                return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2(fence, _Utils_ap(body, _String_slice_fn(start, end, source))));
            })), $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.dW)), $elm$parser$Parser$Advanced$getOffset), $elm$parser$Parser$Advanced$getSource)
        ]));
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
        return $elm$parser$Parser$Advanced$loop_fn(_Utils_Tuple2(fence, ""), $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = $elm$parser$Parser$Advanced$andThen_fn(function (fence) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.cF), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)), $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
    }, $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
    var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
        dropTrailingHashes: while (true) {
            if (_String_endsWith_fn("#", headingString)) {
                var $temp$headingString = $elm$core$String$dropRight_fn(1, headingString);
                headingString = $temp$headingString;
                continue dropTrailingHashes;
            }
            else {
                return headingString;
            }
        }
    };
    var $elm$core$String$trimRight = _String_trimRight;
    var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
        var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
        return (_String_endsWith_fn(" ", droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
    };
    var $dillonkearns$elm_markdown$Parser$Token$hash = $elm$parser$Parser$Advanced$Token_fn("#", $elm$parser$Parser$Expecting("a `#`"));
    var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
        if ("#" === c) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(function (c) {
        return (c === " ") || ((c === "\n") || (c === "\r"));
    });
    var $dillonkearns$elm_markdown$Markdown$Heading$parser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading), $elm$parser$Parser$Advanced$andThen_fn(function (startingSpaces) {
        var startSpace = $elm$core$String$length(startingSpaces);
        return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("heading with < 4 spaces in front")) : $elm$parser$Parser$Advanced$succeed(startSpace);
    }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)), $elm$parser$Parser$Advanced$andThen_fn(function (additionalHashes) {
        var level = $elm$core$String$length(additionalHashes) + 1;
        return (level >= 7) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("heading with < 7 #'s")) : $elm$parser$Parser$Advanced$succeed(level);
    }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(""), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
            $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
        ]))), $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (headingText, _v0) {
            return $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence($elm$core$String$trim(headingText));
        }, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
    ])));
    var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
    var $elm$parser$Parser$Advanced$fromInfo_fn = function (row, col, x, context) {
        return $elm$parser$Parser$Advanced$AddRight_fn($elm$parser$Parser$Advanced$Empty, $elm$parser$Parser$Advanced$DeadEnd_fn(row, col, x, context));
    }, $elm$parser$Parser$Advanced$fromInfo = F4($elm$parser$Parser$Advanced$fromInfo_fn);
    var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
        var str = _v0.a;
        var expecting = _v0.b;
        return function (s) {
            var _v1 = _Parser_findSubString_fn(str, s.eS, s.kk, s.ex, s.ky);
            var newOffset = _v1.a;
            var newRow = _v1.b;
            var newCol = _v1.c;
            return newOffset === -1 ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromInfo_fn(newRow, newCol, expecting, s.j)) : $elm$parser$Parser$Advanced$Good_fn(_Utils_cmp(s.eS, newOffset) < 0, 0, { ex: newCol, j: s.j, dV: s.dV, eS: newOffset, kk: newRow, ky: s.ky });
        };
    };
    var $dillonkearns$elm_markdown$Parser$Token$greaterThan = $elm$parser$Parser$Advanced$Token_fn(">", $elm$parser$Parser$Expecting("a `>`"));
    var $elm$parser$Parser$Advanced$Located_fn = function (row, col, context) {
        return { ex: col, j: context, kk: row };
    }, $elm$parser$Parser$Advanced$Located = F3($elm$parser$Parser$Advanced$Located_fn);
    var $elm$parser$Parser$Advanced$changeContext_fn = function (newContext, s) {
        return { ex: s.ex, j: newContext, dV: s.dV, eS: s.eS, kk: s.kk, ky: s.ky };
    }, $elm$parser$Parser$Advanced$changeContext = F2($elm$parser$Parser$Advanced$changeContext_fn);
    var $elm$parser$Parser$Advanced$inContext_fn = function (context, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse($elm$parser$Parser$Advanced$changeContext_fn(_List_Cons($elm$parser$Parser$Advanced$Located_fn(s0.kk, s0.ex, context), s0.j), s0));
            if (!_v1.$) {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, a, $elm$parser$Parser$Advanced$changeContext_fn(s0.j, s1));
            }
            else {
                var step = _v1;
                return step;
            }
        };
    }, $elm$parser$Parser$Advanced$inContext = F2($elm$parser$Parser$Advanced$inContext_fn);
    var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
        switch (_char) {
            case " ":
                return true;
            case "\n":
                return true;
            case "\t":
                return true;
            case "\v":
                return true;
            case "\f":
                return true;
            case "\r":
                return true;
            default:
                return false;
        }
    };
    var $dillonkearns$elm_markdown$Parser$Token$lessThan = $elm$parser$Parser$Advanced$Token_fn("<", $elm$parser$Parser$Expecting("a `<`"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = $elm$parser$Parser$Advanced$inContext_fn("link destination", $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
        $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
    ])));
    var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = $elm$parser$Parser$Advanced$Token_fn("]", $elm$parser$Parser$Expecting("a `]`"));
    var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = $elm$parser$Parser$Advanced$Token_fn("[", $elm$parser$Parser$Expecting("a `[`"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("]:", $elm$parser$Parser$Expecting("]:")))));
    var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = $elm$parser$Parser$Advanced$Token_fn("\"", $elm$parser$Parser$Expecting("a double quote"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
        return _String_contains_fn("\n\n", str) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("no blank line")) : $elm$parser$Parser$Advanced$succeed(str);
    };
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompWhile(function (c) {
        return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
    }), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$chompIf_fn($dillonkearns$elm_markdown$Whitespace$isWhitespace, $elm$parser$Parser$Expecting("Required whitespace")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
    var $dillonkearns$elm_markdown$Parser$Token$singleQuote = $elm$parser$Parser$Advanced$Token_fn("'", $elm$parser$Parser$Expecting("a single quote"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
        var inSingleQuotes = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
        var inDoubleQuotes = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
        return $elm$parser$Parser$Advanced$inContext_fn("title", $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$requiredWhitespace), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                inDoubleQuotes,
                inSingleQuotes,
                $elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
            ])))),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
        ])));
    }();
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = $elm$parser$Parser$Advanced$inContext_fn("link reference definition", $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(F3(function (label, destination, title) {
        return _Utils_Tuple2(label, { fS: destination, dz: title });
    })), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser, $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Whitespace$lineEnd,
        $elm$parser$Parser$Advanced$succeed(0)
    ]))), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
    var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = 0;
    var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
    var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
        var token = $dillonkearns$elm_markdown$Parser$Token$parseString($elm$core$String$fromChar(tchar));
        return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), token), $dillonkearns$elm_markdown$ThematicBreak$whitespace), token), $dillonkearns$elm_markdown$ThematicBreak$whitespace), token), $elm$parser$Parser$Advanced$chompWhile(function (c) {
            return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
        })), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    };
    var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$ThematicBreak$withChar("-"),
        $dillonkearns$elm_markdown$ThematicBreak$withChar("*"),
        $dillonkearns$elm_markdown$ThematicBreak$withChar("_")
    ]));
    var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$space), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Whitespace$space,
            $elm$parser$Parser$Advanced$succeed(0)
        ]))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Whitespace$space,
            $elm$parser$Parser$Advanced$succeed(0)
        ]))), $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
        $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
    ]));
    var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = 0;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = 1;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine_fn = function (a, b) {
        return { $: 13, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine_fn);
    var $dillonkearns$elm_markdown$Parser$Token$equals = $elm$parser$Parser$Advanced$Token_fn("=", $elm$parser$Parser$Expecting("a `=`"));
    var $dillonkearns$elm_markdown$Parser$Token$minus = $elm$parser$Parser$Advanced$Token_fn("-", $elm$parser$Parser$Expecting("a `-`"));
    var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
        var setextLevel = F3(function (level, levelToken, levelChar) {
            return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(level), $elm$parser$Parser$Advanced$token(levelToken)), $elm$parser$Parser$Advanced$chompWhile($elm$core$Basics$eq(levelChar)));
        });
        return $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (raw, level) {
            return $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine_fn(level, raw);
        }, $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            A3(setextLevel, 0, $dillonkearns$elm_markdown$Parser$Token$equals, "="),
            A3(setextLevel, 1, $dillonkearns$elm_markdown$Parser$Token$minus, "-")
        ])), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
    }();
    var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
        return { $: 9, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
    var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$chompIf_fn(condition, $elm$parser$Parser$Problem("Character not found")),
            $elm$parser$Parser$Advanced$succeed(0)
        ]));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
        return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Parser$Token$parseString("|"),
            $elm$parser$Parser$Advanced$succeed(0)
        ])) : $dillonkearns$elm_markdown$Parser$Token$parseString("|");
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
            }, $dillonkearns$elm_markdown$Parser$Token$parseString("|\n"))),
            $elm$parser$Parser$Advanced$map_fn(function (_v1) {
                return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
            }, $dillonkearns$elm_markdown$Parser$Token$parseString("\n")),
            $elm$parser$Parser$Advanced$map_fn(function (_v2) {
                return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
            }, $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end"))),
            $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(revDelimiterColumns)), $dillonkearns$elm_markdown$Parser$Token$parseString("|")), $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end")))),
            $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(function (column) {
                return $elm$parser$Parser$Advanced$Loop(_List_Cons(column, revDelimiterColumns));
            }), $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)), $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), $dillonkearns$elm_markdown$Parser$Extra$maybeChomp(function (c) {
                return c === ":";
            })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(function (c) {
                return c === "-";
            })), $dillonkearns$elm_markdown$Parser$Extra$maybeChomp(function (c) {
                return c === ":";
            }))), $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
        ]));
    };
    var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = 2;
    var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = 1;
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
        var _v0 = _Utils_Tuple2(_String_startsWith_fn(":", cell), _String_endsWith_fn(":", cell));
        if (_v0.a) {
            if (_v0.b) {
                return $elm$core$Maybe$Just(2);
            }
            else {
                return $elm$core$Maybe$Just(0);
            }
        }
        else {
            if (_v0.b) {
                return $elm$core$Maybe$Just(1);
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        }
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = $elm$parser$Parser$Advanced$andThen_fn(function (delimiterRow) {
        var trimmed = delimiterRow.a.ip;
        var headers = delimiterRow.b;
        return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("Must have at least one column in delimiter row.")) : ((($elm$core$List$length(headers) === 1) && (!(_String_startsWith_fn("|", trimmed) && _String_endsWith_fn("|", trimmed)))) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.")) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
    }, $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped(function (delimiterText, revDelimiterColumns) {
        return $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow_fn({
            h_: delimiterText,
            ip: $elm$core$String$trim(delimiterText)
        }, $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment, $elm$core$List$reverse(revDelimiterColumns)));
    }, $elm$parser$Parser$Advanced$loop_fn(_List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
    var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = $elm$parser$Parser$Advanced$map_fn($dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
    var $elm$core$List$all_fn = function (isOkay, list) {
        all: while (true) {
            if (!list.b) {
                return true;
            }
            else {
                var x = list.a;
                if (!isOkay(x)) {
                    return false;
                }
                list = list.b;
                continue all;
            }
        }
    }, $elm$core$List$all = F2($elm$core$List$all_fn);
    var $elm$core$List$takeReverse_fn = function (n, list, kept) {
        takeReverse: while (true) {
            if (n <= 0) {
                return kept;
            }
            else {
                if (!list.b) {
                    return kept;
                }
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs, $temp$kept = _List_Cons(x, kept);
                    n = $temp$n;
                    list = $temp$list;
                    kept = $temp$kept;
                    continue takeReverse;
                }
            }
        }
    }, $elm$core$List$takeReverse = F3($elm$core$List$takeReverse_fn);
    var $elm$core$List$takeTailRec_fn = function (n, list) {
        return $elm$core$List$reverse($elm$core$List$takeReverse_fn(n, list, _List_Nil));
    }, $elm$core$List$takeTailRec = F2($elm$core$List$takeTailRec_fn);
    var $elm$core$List$takeFast_fn = function (ctr, n, list) {
        if (n <= 0) {
            return _List_Nil;
        }
        else {
            var _v0 = _Utils_Tuple2(n, list);
            _v0$1: while (true) {
                _v0$5: while (true) {
                    if (!_v0.b.b) {
                        return list;
                    }
                    else {
                        if (_v0.b.b.b) {
                            switch (_v0.a) {
                                case 1:
                                    break _v0$1;
                                case 2:
                                    var _v2 = _v0.b;
                                    var x = _v2.a;
                                    var _v3 = _v2.b;
                                    var y = _v3.a;
                                    return _List_fromArray([x, y]);
                                case 3:
                                    if (_v0.b.b.b.b) {
                                        var _v4 = _v0.b;
                                        var x = _v4.a;
                                        var _v5 = _v4.b;
                                        var y = _v5.a;
                                        var _v6 = _v5.b;
                                        var z = _v6.a;
                                        return _List_fromArray([x, y, z]);
                                    }
                                    else {
                                        break _v0$5;
                                    }
                                default:
                                    if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
                                        var _v7 = _v0.b;
                                        var x = _v7.a;
                                        var _v8 = _v7.b;
                                        var y = _v8.a;
                                        var _v9 = _v8.b;
                                        var z = _v9.a;
                                        var _v10 = _v9.b;
                                        var w = _v10.a;
                                        var tl = _v10.b;
                                        return (ctr > 1000) ? _List_Cons(x, _List_Cons(y, _List_Cons(z, _List_Cons(w, $elm$core$List$takeTailRec_fn(n - 4, tl))))) : _List_Cons(x, _List_Cons(y, _List_Cons(z, _List_Cons(w, $elm$core$List$takeFast_fn(ctr + 1, n - 4, tl)))));
                                    }
                                    else {
                                        break _v0$5;
                                    }
                            }
                        }
                        else {
                            if (_v0.a === 1) {
                                break _v0$1;
                            }
                            else {
                                break _v0$5;
                            }
                        }
                    }
                }
                return list;
            }
            var _v1 = _v0.b;
            var x = _v1.a;
            return _List_fromArray([x]);
        }
    }, $elm$core$List$takeFast = F3($elm$core$List$takeFast_fn);
    var $elm$core$List$take_fn = function (n, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; i < n && xs.b; xs = xs.
            b, i++) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$take = F2($elm$core$List$take_fn);
    var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength_fn = function (expectedLength, row) {
        var rowLength = $elm$core$List$length(row);
        var _v0 = _Utils_compare_fn(expectedLength, rowLength);
        switch (_v0) {
            case 0:
                return $elm$core$List$take_fn(expectedLength, row);
            case 1:
                return row;
            default:
                return _Utils_ap(row, $elm$core$List$repeat_fn(expectedLength - rowLength, ""));
        }
    }, $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength_fn);
    var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
        return $elm$parser$Parser$Advanced$andThen_fn(function (row) {
            return ($elm$core$List$isEmpty(row) || $elm$core$List$all_fn($elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("A line must have at least one column")) : $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength_fn(expectedRowLength, row));
        }, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
        var headers = _v0.a;
        var body = _v0.b;
        return $elm$parser$Parser$Advanced$map_fn(function (row) {
            return $dillonkearns$elm_markdown$Markdown$RawBlock$Table($dillonkearns$elm_markdown$Markdown$Table$Table_fn(headers, _Utils_ap(body, _List_fromArray([row]))));
        }, $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser($elm$core$List$length(headers)));
    };
    var $dillonkearns$elm_markdown$Markdown$Block$H1 = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$H2 = 1;
    var $dillonkearns$elm_markdown$Markdown$Block$H3 = 2;
    var $dillonkearns$elm_markdown$Markdown$Block$H4 = 3;
    var $dillonkearns$elm_markdown$Markdown$Block$H5 = 4;
    var $dillonkearns$elm_markdown$Markdown$Block$H6 = 5;
    var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
        switch (level) {
            case 1:
                return $elm$core$Result$Ok(0);
            case 2:
                return $elm$core$Result$Ok(1);
            case 3:
                return $elm$core$Result$Ok(2);
            case 4:
                return $elm$core$Result$Ok(3);
            case 5:
                return $elm$core$Result$Ok(4);
            case 6:
                return $elm$core$Result$Ok(5);
            default:
                return $elm$core$Result$Err($elm$parser$Parser$Expecting("A heading with 1 to 6 #'s, but found " + $elm$core$String$fromInt(level)));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem_fn);
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem_fn = function (markerStartPos, listMarker, markerEndPos, _v0) {
        var bodyStartPos = _v0.a;
        var item = _v0.b;
        var spaceNum = bodyStartPos - markerEndPos;
        if (spaceNum <= 4) {
            return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
        }
        else {
            var intendedCodeItem = function () {
                switch (item.$) {
                    case 0:
                        var completion = item.a;
                        var string = item.b;
                        return $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem_fn(completion, _Utils_ap($elm$core$String$repeat_fn(spaceNum - 1, " "), string));
                    case 1:
                        var string = item.a;
                        return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(_Utils_ap($elm$core$String$repeat_fn(spaceNum - 1, " "), string));
                    default:
                        return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
                }
            }();
            return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
        }
    }, $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem_fn);
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed(function (bodyStartPos) {
        return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
    }), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = 1;
    var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = 0;
    var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("[x] ", $elm$parser$Parser$ExpectingSymbol("[x] ")))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("[X] ", $elm$parser$Parser$ExpectingSymbol("[X] ")))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("[ ] ", $elm$parser$Parser$ExpectingSymbol("[ ] "))))
    ]));
    var $dillonkearns$elm_markdown$Markdown$ListItem$parser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem), $elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser, $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
        $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
    ])), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(F2(function (bodyStartPos, item) {
        return _Utils_Tuple2(bodyStartPos, item);
    })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$getCol), $dillonkearns$elm_markdown$Markdown$ListItem$parser);
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = 2;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = 0;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = 1;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(0), $dillonkearns$elm_markdown$Parser$Extra$upTo_fn(3, $dillonkearns$elm_markdown$Whitespace$space)), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("-", $elm$parser$Parser$ExpectingSymbol("-")))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("+", $elm$parser$Parser$ExpectingSymbol("+")))),
        $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed(2), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn("*", $elm$parser$Parser$ExpectingSymbol("*"))))
    ]));
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function (previousWasBody) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem), $elm$parser$Parser$Advanced$getCol), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)), $elm$parser$Parser$Advanced$getCol), previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
        var parseListItem = F2(function (listmarker, unparsedListItem) {
            switch (unparsedListItem.$) {
                case 0:
                    var completion = unparsedListItem.a;
                    var body = unparsedListItem.b;
                    return {
                        iL: body,
                        gg: listmarker,
                        K: $elm$core$Maybe$Just(function () {
                            if (completion === 1) {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }())
                    };
                case 1:
                    var body = unparsedListItem.a;
                    return { iL: body, gg: listmarker, K: $elm$core$Maybe$Nothing };
                default:
                    return { iL: "", gg: listmarker, K: $elm$core$Maybe$Nothing };
            }
        });
        return $elm$parser$Parser$Advanced$map_fn(function (_v0) {
            var listmarker = _v0.a;
            var intended = _v0.b;
            var unparsedListItem = _v0.c;
            return $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(true, intended, _List_Nil, A2(parseListItem, listmarker, unparsedListItem));
        }, $dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks_fn = function (node, blocks) {
        switch (node.$) {
            case 0:
                var tag = node.a;
                var attributes = node.b;
                var children = node.c;
                var _v106 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
                if (!_v106.$) {
                    var childrenAsBlocks = _v106.a;
                    var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlElement_fn(tag, attributes, childrenAsBlocks));
                    return $elm$core$Result$Ok(_List_Cons(block, blocks));
                }
                else {
                    var err = _v106.a;
                    return $elm$core$Result$Err(err);
                }
            case 1:
                var innerText = node.a;
                var _v107 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
                if (!_v107.$) {
                    var value = _v107.a;
                    return $elm$core$Result$Ok(_Utils_ap($elm$core$List$reverse(value), blocks));
                }
                else {
                    var error = _v107.a;
                    return $elm$core$Result$Err($elm$parser$Parser$Expecting($elm$core$String$join_fn("\n", $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
                }
            case 2:
                var string = node.a;
                return $elm$core$Result$Ok(_List_Cons($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)), blocks));
            case 3:
                var string = node.a;
                return $elm$core$Result$Ok(_List_Cons($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$Cdata(string)), blocks));
            case 4:
                var string = node.a;
                return $elm$core$Result$Ok(_List_Cons($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)), blocks));
            default:
                var declarationType = node.a;
                var content = node.b;
                return $elm$core$Result$Ok(_List_Cons($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration_fn(declarationType, content)), blocks));
        }
    }, $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function (state) {
        var _v91 = state.b;
        _v91$5: while (true) {
            if (_v91.b) {
                switch (_v91.a.$) {
                    case 11:
                        var body2 = _v91.a.a;
                        var rest = _v91.b;
                        var _v92 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                        if (!_v92.$) {
                            var value = _v92.a;
                            return $elm$parser$Parser$Advanced$succeed({
                                a: _Utils_ap(state.a, value.a),
                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.b), rest)
                            });
                        }
                        else {
                            var error = _v92.a;
                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
                        }
                    case 3:
                        var _v93 = _v91.a;
                        var tight = _v93.a;
                        var intended = _v93.b;
                        var closeListItems = _v93.c;
                        var openListItem = _v93.d;
                        var rest = _v91.b;
                        var _v94 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem.iL);
                        if (!_v94.$) {
                            var value = _v94.a;
                            var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                            return $elm$parser$Parser$Advanced$succeed({
                                a: _Utils_ap(state.a, value.a),
                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight2, intended, _List_Cons({ iL: value.b, K: openListItem.K }, closeListItems), openListItem), rest)
                            });
                        }
                        else {
                            var e = _v94.a;
                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                        }
                    case 4:
                        var _v99 = _v91.a;
                        var tight = _v99.a;
                        var intended = _v99.b;
                        var marker = _v99.c;
                        var order = _v99.d;
                        var closeListItems = _v99.e;
                        var openListItem = _v99.f;
                        var rest = _v91.b;
                        var _v100 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem);
                        if (!_v100.$) {
                            var value = _v100.a;
                            var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                            return $elm$parser$Parser$Advanced$succeed({
                                a: _Utils_ap(state.a, value.a),
                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight2, intended, marker, order, _List_Cons(value.b, closeListItems), openListItem), rest)
                            });
                        }
                        else {
                            var e = _v100.a;
                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                        }
                    case 10:
                        if (_v91.b.b) {
                            switch (_v91.b.a.$) {
                                case 3:
                                    var _v95 = _v91.a;
                                    var _v96 = _v91.b;
                                    var _v97 = _v96.a;
                                    var tight = _v97.a;
                                    var intended = _v97.b;
                                    var closeListItems = _v97.c;
                                    var openListItem = _v97.d;
                                    var rest = _v96.b;
                                    var _v98 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem.iL);
                                    if (!_v98.$) {
                                        var value = _v98.a;
                                        var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight2, intended, _List_Cons({ iL: value.b, K: openListItem.K }, closeListItems), openListItem), rest)
                                        });
                                    }
                                    else {
                                        var e = _v98.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                case 4:
                                    var _v101 = _v91.a;
                                    var _v102 = _v91.b;
                                    var _v103 = _v102.a;
                                    var tight = _v103.a;
                                    var intended = _v103.b;
                                    var marker = _v103.c;
                                    var order = _v103.d;
                                    var closeListItems = _v103.e;
                                    var openListItem = _v103.f;
                                    var rest = _v102.b;
                                    var _v104 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem);
                                    if (!_v104.$) {
                                        var value = _v104.a;
                                        var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight2, intended, marker, order, _List_Cons(value.b, closeListItems), openListItem), rest)
                                        });
                                    }
                                    else {
                                        var e = _v104.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                default:
                                    break _v91$5;
                            }
                        }
                        else {
                            break _v91$5;
                        }
                    default:
                        break _v91$5;
                }
            }
            else {
                break _v91$5;
            }
        }
        return $elm$parser$Parser$Advanced$succeed(state);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks_fn = function (state, newRawBlock) {
        var _v41 = _Utils_Tuple2(newRawBlock, state.b);
        _v41$13: while (true) {
            if (_v41.b.b) {
                switch (_v41.b.a.$) {
                    case 5:
                        if (_v41.a.$ === 5) {
                            var block1 = _v41.a.a;
                            var _v42 = _v41.b;
                            var block2 = _v42.a.a;
                            var rest = _v42.b;
                            return $elm$parser$Parser$Advanced$succeed({
                                a: state.a,
                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock({
                                    iL: $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn(block2.iL, block1.iL),
                                    hH: $elm$core$Maybe$Nothing
                                }), rest)
                            });
                        }
                        else {
                            break _v41$13;
                        }
                    case 6:
                        switch (_v41.a.$) {
                            case 6:
                                var block1 = _v41.a.a;
                                var _v43 = _v41.b;
                                var block2 = _v43.a.a;
                                var rest = _v43.b;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn(block2, block1)), rest)
                                });
                            case 10:
                                var _v44 = _v41.a;
                                var _v45 = _v41.b;
                                var block = _v45.a.a;
                                var rest = _v45.b;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn(block, "\n")), rest)
                                });
                            default:
                                break _v41$13;
                        }
                    case 11:
                        var _v46 = _v41.b;
                        var body2 = _v46.a.a;
                        var rest = _v46.b;
                        switch (newRawBlock.$) {
                            case 11:
                                var body1 = newRawBlock.a;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn(body2, body1)), rest)
                                });
                            case 1:
                                var body1 = newRawBlock.a;
                                var _v48 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                if (!_v48.$) {
                                    var value = _v48.a;
                                    var _v49 = value.b;
                                    if (_v49.b) {
                                        var last = _v49.a;
                                        if ($dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph(last) && (!_String_endsWith_fn("\n", body2))) {
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: state.a,
                                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll_fn(body2, body1)), rest)
                                            });
                                        }
                                        else {
                                            var _v50 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                            if (!_v50.$) {
                                                var value1 = _v50.a;
                                                return $elm$parser$Parser$Advanced$succeed({
                                                    a: _Utils_ap(state.a, value.a),
                                                    b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                                                });
                                            }
                                            else {
                                                var e1 = _v50.a;
                                                return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                                            }
                                        }
                                    }
                                    else {
                                        var _v51 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                        if (!_v51.$) {
                                            var value1 = _v51.a;
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                                            });
                                        }
                                        else {
                                            var e1 = _v51.a;
                                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                                        }
                                    }
                                }
                                else {
                                    var e = _v48.a;
                                    return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                }
                            case 6:
                                var body1 = newRawBlock.a;
                                var _v52 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                if (!_v52.$) {
                                    var value = _v52.a;
                                    var _v53 = value.b;
                                    if (_v53.b && (_v53.a.$ === 1)) {
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: state.a,
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn(" ", body2, body1)), rest)
                                        });
                                    }
                                    else {
                                        var _v54 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                        if (!_v54.$) {
                                            var value1 = _v54.a;
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                                            });
                                        }
                                        else {
                                            var e1 = _v54.a;
                                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                                        }
                                    }
                                }
                                else {
                                    var e = _v52.a;
                                    return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                }
                            default:
                                var _v55 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                                if (!_v55.$) {
                                    var value = _v55.a;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: _Utils_ap(state.a, value.a),
                                        b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.b), rest))
                                    });
                                }
                                else {
                                    var e = _v55.a;
                                    return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                }
                        }
                    case 3:
                        var _v56 = _v41.b;
                        var _v57 = _v56.a;
                        var tight = _v57.a;
                        var intended1 = _v57.b;
                        var closeListItems2 = _v57.c;
                        var openListItem2 = _v57.d;
                        var rest = _v56.b;
                        switch (newRawBlock.$) {
                            case 3:
                                var intended2 = newRawBlock.b;
                                var openListItem1 = newRawBlock.d;
                                if (_Utils_eq(openListItem2.gg, openListItem1.gg)) {
                                    var _v59 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.iL);
                                    if (!_v59.$) {
                                        var value = _v59.a;
                                        return $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(false, intended2, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem1), rest)
                                        }) : $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended2, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem1), rest)
                                        });
                                    }
                                    else {
                                        var e = _v59.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                }
                                else {
                                    var _v60 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.iL);
                                    if (!_v60.$) {
                                        var value = _v60.a;
                                        var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight2, intended1, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem1), rest))
                                        });
                                    }
                                    else {
                                        var e = _v60.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                }
                            case 1:
                                var body1 = newRawBlock.a;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended1, closeListItems2, _Utils_update(openListItem2, {
                                        iL: $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("\n", openListItem2.iL, body1)
                                    })), rest)
                                });
                            default:
                                var _v61 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.iL);
                                if (!_v61.$) {
                                    var value = _v61.a;
                                    var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: _Utils_ap(state.a, value.a),
                                        b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight2, intended1, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem2), rest))
                                    });
                                }
                                else {
                                    var e = _v61.a;
                                    return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                }
                        }
                    case 4:
                        var _v62 = _v41.b;
                        var _v63 = _v62.a;
                        var tight = _v63.a;
                        var intended1 = _v63.b;
                        var marker = _v63.c;
                        var order = _v63.d;
                        var closeListItems2 = _v63.e;
                        var openListItem2 = _v63.f;
                        var rest = _v62.b;
                        switch (newRawBlock.$) {
                            case 4:
                                var intended2 = newRawBlock.b;
                                var marker2 = newRawBlock.c;
                                var openListItem1 = newRawBlock.f;
                                if (_Utils_eq(marker, marker2)) {
                                    var _v65 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                                    if (!_v65.$) {
                                        var value = _v65.a;
                                        var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight2, intended2, marker, order, _List_Cons(value.b, closeListItems2), openListItem1), rest)
                                        });
                                    }
                                    else {
                                        var e = _v65.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                }
                                else {
                                    var _v66 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                                    if (!_v66.$) {
                                        var value = _v66.a;
                                        var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                        return $elm$parser$Parser$Advanced$succeed({
                                            a: _Utils_ap(state.a, value.a),
                                            b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight2, intended1, marker, order, _List_Cons(value.b, closeListItems2), openListItem2), rest))
                                        });
                                    }
                                    else {
                                        var e = _v66.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                }
                            case 1:
                                var body1 = newRawBlock.a;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended1, marker, order, closeListItems2, openListItem2 + ("\n" + body1)), rest)
                                });
                            default:
                                var _v67 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                                if (!_v67.$) {
                                    var value = _v67.a;
                                    var tight2 = $elm$core$List$member_fn($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: _Utils_ap(state.a, value.a),
                                        b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight2, intended1, marker, order, _List_Cons(value.b, closeListItems2), openListItem2), rest))
                                    });
                                }
                                else {
                                    var e = _v67.a;
                                    return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                }
                        }
                    case 1:
                        switch (_v41.a.$) {
                            case 1:
                                var body1 = _v41.a.a;
                                var _v68 = _v41.b;
                                var body2 = _v68.a.a;
                                var rest = _v68.b;
                                return $elm$parser$Parser$Advanced$succeed({
                                    a: state.a,
                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("\n", body2, body1)), rest)
                                });
                            case 13:
                                if (!_v41.a.a) {
                                    var _v69 = _v41.a;
                                    var _v70 = _v69.a;
                                    var _v71 = _v41.b;
                                    var unparsedInlines = _v71.a.a;
                                    var rest = _v71.b;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: state.a,
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$Heading_fn(1, unparsedInlines), rest)
                                    });
                                }
                                else {
                                    var _v72 = _v41.a;
                                    var _v73 = _v72.a;
                                    var _v74 = _v41.b;
                                    var unparsedInlines = _v74.a.a;
                                    var rest = _v74.b;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: state.a,
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$Heading_fn(2, unparsedInlines), rest)
                                    });
                                }
                            case 9:
                                var _v75 = _v41.a.a;
                                var text = _v75.a;
                                var alignments = _v75.b;
                                var _v76 = _v41.b;
                                var rawHeaders = _v76.a.a;
                                var rest = _v76.b;
                                var _v77 = $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader_fn($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow_fn(text, alignments), rawHeaders);
                                if (!_v77.$) {
                                    var headers = _v77.a;
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: state.a,
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$Table($dillonkearns$elm_markdown$Markdown$Table$Table_fn(headers, _List_Nil)), rest)
                                    });
                                }
                                else {
                                    return $elm$parser$Parser$Advanced$succeed({
                                        a: state.a,
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("\n", rawHeaders, text.h_)), rest)
                                    });
                                }
                            default:
                                break _v41$13;
                        }
                    case 8:
                        if (_v41.a.$ === 8) {
                            var updatedTable = _v41.a.a;
                            var _v78 = _v41.b;
                            var rest = _v78.b;
                            return $elm$parser$Parser$Advanced$succeed({
                                a: state.a,
                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable), rest)
                            });
                        }
                        else {
                            break _v41$13;
                        }
                    case 10:
                        if (_v41.b.b.b) {
                            switch (_v41.b.b.a.$) {
                                case 4:
                                    var _v79 = _v41.b;
                                    var _v80 = _v79.a;
                                    var _v81 = _v79.b;
                                    var _v82 = _v81.a;
                                    var tight = _v82.a;
                                    var intended1 = _v82.b;
                                    var marker = _v82.c;
                                    var order = _v82.d;
                                    var closeListItems2 = _v82.e;
                                    var openListItem2 = _v82.f;
                                    var rest = _v81.b;
                                    var _v83 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                                    if (!_v83.$) {
                                        var value = _v83.a;
                                        if (newRawBlock.$ === 4) {
                                            var intended2 = newRawBlock.b;
                                            var openListItem = newRawBlock.f;
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(false, intended2, marker, order, _List_Cons(value.b, closeListItems2), openListItem), rest)
                                            });
                                        }
                                        else {
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended1, marker, order, _List_Cons(value.b, closeListItems2), openListItem2), rest)))
                                            });
                                        }
                                    }
                                    else {
                                        var e = _v83.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                case 3:
                                    var _v85 = _v41.b;
                                    var _v86 = _v85.a;
                                    var _v87 = _v85.b;
                                    var _v88 = _v87.a;
                                    var tight = _v88.a;
                                    var intended1 = _v88.b;
                                    var closeListItems2 = _v88.c;
                                    var openListItem2 = _v88.d;
                                    var rest = _v87.b;
                                    var _v89 = $elm$parser$Parser$Advanced$run_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.iL);
                                    if (!_v89.$) {
                                        var value = _v89.a;
                                        if (newRawBlock.$ === 3) {
                                            var openListItem = newRawBlock.d;
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(false, intended1, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem), rest)
                                            });
                                        }
                                        else {
                                            return $elm$parser$Parser$Advanced$succeed({
                                                a: _Utils_ap(state.a, value.a),
                                                b: _List_Cons(newRawBlock, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended1, _List_Cons({ iL: value.b, K: openListItem2.K }, closeListItems2), openListItem2), rest)))
                                            });
                                        }
                                    }
                                    else {
                                        var e = _v89.a;
                                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                                    }
                                default:
                                    break _v41$13;
                            }
                        }
                        else {
                            break _v41$13;
                        }
                    default:
                        break _v41$13;
                }
            }
            else {
                break _v41$13;
            }
        }
        return $elm$parser$Parser$Advanced$succeed({
            a: state.a,
            b: _List_Cons(newRawBlock, state.b)
        });
    }, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn = function (referencesDict, _v36) {
        var unparsedInlines = _v36;
        var mappedReferencesDict = $elm$core$Dict$fromList($elm$core$List$map_fn($elm$core$Tuple$mapSecond(function (_v37) {
            var title = _v37.dz;
            var destination = _v37.fS;
            return _Utils_Tuple2(destination, title);
        }), referencesDict));
        return $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, $dillonkearns$elm_markdown$Markdown$InlineParser$parse_fn(mappedReferencesDict, unparsedInlines));
    }, $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
        switch (inline.$) {
            case 0:
                var string = inline.a;
                return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
            case 1:
                return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
            case 2:
                var string = inline.a;
                return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
            case 3:
                var string = inline.a;
                var maybeString = inline.b;
                var inlines = inline.c;
                return $dillonkearns$elm_markdown$Markdown$Block$Link_fn(string, maybeString, $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
            case 4:
                var string = inline.a;
                var maybeString = inline.b;
                var inlines = inline.c;
                return $dillonkearns$elm_markdown$Markdown$Block$Image_fn(string, maybeString, $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
            case 5:
                var node = inline.a;
                return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline($dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
            case 6:
                var level = inline.a;
                var inlines = inline.b;
                switch (level) {
                    case 1:
                        return $dillonkearns$elm_markdown$Markdown$Block$Emphasis($elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
                    case 2:
                        return $dillonkearns$elm_markdown$Markdown$Block$Strong($elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
                    default:
                        return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(_List_fromArray([
                            $dillonkearns$elm_markdown$Markdown$Parser$mapInline($dillonkearns$elm_markdown$Markdown$Inline$Emphasis_fn(level - 2, inlines))
                        ])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(_List_fromArray([
                            $dillonkearns$elm_markdown$Markdown$Parser$mapInline($dillonkearns$elm_markdown$Markdown$Inline$Emphasis_fn(level - 1, inlines))
                        ]));
                }
            default:
                var inlines = inline.a;
                return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough($elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
        switch (node.$) {
            case 1:
                return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment("TODO this never happens, but use types to drop this case.");
            case 0:
                var tag = node.a;
                var attributes = node.b;
                var children = node.c;
                var parseChild = function (child) {
                    if (child.$ === 1) {
                        var text = child.a;
                        return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
                    }
                    else {
                        return _List_fromArray([
                            $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
                        ]);
                    }
                };
                return $dillonkearns$elm_markdown$Markdown$Block$HtmlElement_fn(tag, attributes, $elm$core$List$concatMap_fn(parseChild, children));
            case 2:
                var string = node.a;
                return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
            case 3:
                var string = node.a;
                return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
            case 4:
                var string = node.a;
                return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
            default:
                var declarationType = node.a;
                var content = node.b;
                return $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration_fn(declarationType, content);
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
        return $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp_fn(children, _List_Nil);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp_fn = function (remaining, soFar) {
        nodesToBlocksHelp: while (true) {
            if (remaining.b) {
                var node = remaining.a;
                var rest = remaining.b;
                var _v31 = $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks_fn(node, soFar);
                if (!_v31.$) {
                    var newSoFar = _v31.a;
                    var $temp$remaining = rest, $temp$soFar = newSoFar;
                    remaining = $temp$remaining;
                    soFar = $temp$soFar;
                    continue nodesToBlocksHelp;
                }
                else {
                    var e = _v31.a;
                    return $elm$core$Result$Err(e);
                }
            }
            else {
                return $elm$core$Result$Ok($elm$core$List$reverse(soFar));
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
        var _v27 = $elm$parser$Parser$Advanced$run_fn($elm$parser$Parser$Advanced$ignorer_fn($dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), $dillonkearns$elm_markdown$Helpers$endOfFile), input);
        if (_v27.$ === 1) {
            var e = _v27.a;
            return $elm$core$Result$Err(e);
        }
        else {
            var v = _v27.a;
            var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
            if (_v28.$ === 1) {
                var e = _v28.a;
                return $elm$parser$Parser$Advanced$run_fn($elm$parser$Parser$Advanced$problem(e), "");
            }
            else {
                var blocks = _v28.a;
                var isNotEmptyParagraph = function (block) {
                    if ((block.$ === 5) && (!block.a.b)) {
                        return false;
                    }
                    else {
                        return true;
                    }
                };
                return $elm$core$Result$Ok($elm$core$List$filter_fn(isNotEmptyParagraph, blocks));
            }
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
        return $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp_fn(state, state.b, _List_Nil);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp_fn = function (state, rawBlocks, parsedBlocks) {
        parseAllInlinesHelp: while (true) {
            if (rawBlocks.b) {
                var rawBlock = rawBlocks.a;
                var rest = rawBlocks.b;
                var _v26 = $dillonkearns$elm_markdown$Markdown$Parser$parseInlines_fn(state.a, rawBlock);
                switch (_v26.$) {
                    case 1:
                        var newParsedBlock = _v26.a;
                        var $temp$rawBlocks = rest, $temp$parsedBlocks = _List_Cons(newParsedBlock, parsedBlocks);
                        rawBlocks = $temp$rawBlocks;
                        parsedBlocks = $temp$parsedBlocks;
                        continue parseAllInlinesHelp;
                    case 0:
                        var $temp$rawBlocks = rest;
                        rawBlocks = $temp$rawBlocks;
                        continue parseAllInlinesHelp;
                    default:
                        var e = _v26.a;
                        return $elm$core$Result$Err(e);
                }
            }
            else {
                return $elm$core$Result$Ok(parsedBlocks);
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines_fn = function (linkReferences, header) {
        return $elm$core$List$map_fn(function (_v24) {
            var alignment = _v24.cw;
            var label = _v24.bM;
            return $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline_fn(linkReferences, function (parsedHeaderLabel) {
                return { cw: alignment, bM: parsedHeaderLabel };
            }, label);
        }, header);
    }, $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines_fn = function (linkReferences, rawBlock) {
        switch (rawBlock.$) {
            case 0:
                var level = rawBlock.a;
                var unparsedInlines = rawBlock.b;
                var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
                if (!_v17.$) {
                    var parsedLevel = _v17.a;
                    return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Heading_fn(parsedLevel, $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn(linkReferences, unparsedInlines)));
                }
                else {
                    var e = _v17.a;
                    return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
                }
            case 1:
                var unparsedInlines = rawBlock.a;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn(linkReferences, unparsedInlines)));
            case 2:
                var html = rawBlock.a;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
            case 3:
                var tight = rawBlock.a;
                var unparsedItems = rawBlock.c;
                var parseItem = F2(function (rawBlockTask, rawBlocks) {
                    var blocksTask = function () {
                        if (!rawBlockTask.$) {
                            if (!rawBlockTask.a) {
                                return 1;
                            }
                            else {
                                return 2;
                            }
                        }
                        else {
                            return 0;
                        }
                    }();
                    var blocks = function () {
                        var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks });
                        if (!_v18.$) {
                            var parsedBlocks = _v18.a;
                            return parsedBlocks;
                        }
                        else {
                            return _List_Nil;
                        }
                    }();
                    return $dillonkearns$elm_markdown$Markdown$Block$ListItem_fn(blocksTask, blocks);
                });
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$UnorderedList_fn($dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight), $elm$core$List$reverse($elm$core$List$map_fn(function (item) {
                    return A2(parseItem, item.K, item.iL);
                }, unparsedItems))));
            case 4:
                var tight = rawBlock.a;
                var startingIndex = rawBlock.d;
                var unparsedItems = rawBlock.e;
                var parseItem = function (rawBlocks) {
                    var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks });
                    if (!_v20.$) {
                        var parsedBlocks = _v20.a;
                        return parsedBlocks;
                    }
                    else {
                        return _List_Nil;
                    }
                };
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$OrderedList_fn($dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight), startingIndex, $elm$core$List$reverse($elm$core$List$map_fn(parseItem, unparsedItems))));
            case 5:
                var codeBlock = rawBlock.a;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
            case 7:
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
            case 10:
                return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
            case 11:
                return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
            case 12:
                var rawBlocks = rawBlock.a;
                var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks });
                if (!_v21.$) {
                    var parsedBlocks = _v21.a;
                    return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
                }
                else {
                    var e = _v21.a;
                    return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
                }
            case 6:
                var codeBlockBody = rawBlock.a;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$CodeBlock({ iL: codeBlockBody, hH: $elm$core$Maybe$Nothing }));
            case 8:
                var _v22 = rawBlock.a;
                var header = _v22.a;
                var rows = _v22.b;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Table_fn($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines_fn(linkReferences, header), $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines_fn(linkReferences, rows)));
            case 9:
                var _v23 = rawBlock.a;
                var text = _v23.a;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn(linkReferences, text.h_)));
            default:
                var raw = rawBlock.b;
                return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn(linkReferences, raw)));
        }
    }, $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline_fn = function (linkReferences, wrap, unparsedInlines) {
        return wrap($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper_fn(linkReferences, unparsedInlines));
    }, $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3($dillonkearns$elm_markdown$Markdown$Parser$parseRawInline_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines_fn = function (linkReferences, rows) {
        return $elm$core$List$map_fn(function (row) {
            return $elm$core$List$map_fn(function (column) {
                return $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline_fn(linkReferences, $elm$core$Basics$identity, column);
            }, row);
        }, rows);
    }, $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines_fn);
    var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (_v2) {
                return $elm$parser$Parser$Advanced$Done(revStmts);
            }, $dillonkearns$elm_markdown$Helpers$endOfFile),
            $elm$parser$Parser$Advanced$map_fn(function (reference) {
                return $elm$parser$Parser$Advanced$Loop($dillonkearns$elm_markdown$Markdown$Parser$addReference_fn(revStmts, reference));
            }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
            function () {
                var _v3 = revStmts.b;
                _v3$6: while (true) {
                    if (_v3.b) {
                        switch (_v3.a.$) {
                            case 1:
                                return $elm$parser$Parser$Advanced$map_fn(function (block) {
                                    return $elm$parser$Parser$Advanced$Loop(block);
                                }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
                            case 8:
                                var table = _v3.a.a;
                                return $elm$parser$Parser$Advanced$map_fn(function (block) {
                                    return $elm$parser$Parser$Advanced$Loop(block);
                                }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                                    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
                                    $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
                                ]))));
                            case 3:
                                var _v4 = _v3.a;
                                var tight = _v4.a;
                                var intended = _v4.b;
                                var closeListItems = _v4.c;
                                var openListItem = _v4.d;
                                var rest = _v3.b;
                                var completeOrMergeUnorderedListBlockBlankLine = F2(function (state, newString) {
                                    return _Utils_update(state, {
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended, closeListItems, _Utils_update(openListItem, {
                                            iL: $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("", openListItem.iL, newString)
                                        })), rest))
                                    });
                                });
                                var completeOrMergeUnorderedListBlock = F2(function (state, newString) {
                                    return _Utils_update(state, {
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended, closeListItems, _Utils_update(openListItem, {
                                            iL: $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("\n", openListItem.iL, newString)
                                        })), rest)
                                    });
                                });
                                return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$map_fn(function (_v5) {
                                        return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, "\n");
                                    }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$map_fn(completeOrMergeUnorderedListBlock(revStmts), $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn($elm$core$String$repeat_fn(intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
                                ]));
                            case 4:
                                var _v10 = _v3.a;
                                var tight = _v10.a;
                                var intended = _v10.b;
                                var marker = _v10.c;
                                var order = _v10.d;
                                var closeListItems = _v10.e;
                                var openListItem = _v10.f;
                                var rest = _v3.b;
                                var completeOrMergeUnorderedListBlockBlankLine = F2(function (state, newString) {
                                    return _Utils_update(state, {
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended, marker, order, closeListItems, openListItem + ("\n" + newString)), rest))
                                    });
                                });
                                var completeOrMergeUnorderedListBlock = F2(function (state, newString) {
                                    return _Utils_update(state, {
                                        b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended, marker, order, closeListItems, openListItem + ("\n" + newString)), rest)
                                    });
                                });
                                return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$map_fn(function (_v11) {
                                        return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, "\n");
                                    }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$map_fn(completeOrMergeUnorderedListBlock(revStmts), $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn($elm$core$String$repeat_fn(intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                                    $elm$parser$Parser$Advanced$map_fn(function (block) {
                                        return $elm$parser$Parser$Advanced$Loop(block);
                                    }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
                                ]));
                            case 10:
                                if (_v3.b.b) {
                                    switch (_v3.b.a.$) {
                                        case 3:
                                            var _v6 = _v3.a;
                                            var _v7 = _v3.b;
                                            var _v8 = _v7.a;
                                            var tight = _v8.a;
                                            var intended = _v8.b;
                                            var closeListItems = _v8.c;
                                            var openListItem = _v8.d;
                                            var rest = _v7.b;
                                            var completeOrMergeUnorderedListBlockBlankLine = F2(function (state, newString) {
                                                return _Utils_update(state, {
                                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended, closeListItems, _Utils_update(openListItem, {
                                                        iL: $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("", openListItem.iL, newString)
                                                    })), rest))
                                                });
                                            });
                                            var completeOrMergeUnorderedListBlock = F2(function (state, newString) {
                                                return _Utils_update(state, {
                                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock_fn(tight, intended, closeListItems, _Utils_update(openListItem, {
                                                        iL: $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith_fn("\n", openListItem.iL, newString)
                                                    })), rest)
                                                });
                                            });
                                            return ($elm$core$String$trim(openListItem.iL) === "") ? $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                return $elm$parser$Parser$Advanced$Loop(block);
                                            }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$map_fn(function (_v9) {
                                                    return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, "\n");
                                                }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$map_fn(completeOrMergeUnorderedListBlock(revStmts), $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn($elm$core$String$repeat_fn(intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
                                            ]));
                                        case 4:
                                            var _v12 = _v3.a;
                                            var _v13 = _v3.b;
                                            var _v14 = _v13.a;
                                            var tight = _v14.a;
                                            var intended = _v14.b;
                                            var marker = _v14.c;
                                            var order = _v14.d;
                                            var closeListItems = _v14.e;
                                            var openListItem = _v14.f;
                                            var rest = _v13.b;
                                            var completeOrMergeUnorderedListBlockBlankLine = F2(function (state, newString) {
                                                return _Utils_update(state, {
                                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended, marker, order, closeListItems, openListItem + ("\n" + newString)), rest))
                                                });
                                            });
                                            var completeOrMergeUnorderedListBlock = F2(function (state, newString) {
                                                return _Utils_update(state, {
                                                    b: _List_Cons($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock_fn(tight, intended, marker, order, closeListItems, openListItem + ("\n" + newString)), rest)
                                                });
                                            });
                                            return ($elm$core$String$trim(openListItem) === "") ? $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                return $elm$parser$Parser$Advanced$Loop(block);
                                            }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$map_fn(function (_v15) {
                                                    return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, "\n");
                                                }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$map_fn(completeOrMergeUnorderedListBlock(revStmts), $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn($elm$core$String$repeat_fn(intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                                                $elm$parser$Parser$Advanced$map_fn(function (block) {
                                                    return $elm$parser$Parser$Advanced$Loop(block);
                                                }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
                                            ]));
                                        default:
                                            break _v3$6;
                                    }
                                }
                                else {
                                    break _v3$6;
                                }
                            default:
                                break _v3$6;
                        }
                    }
                    else {
                        break _v3$6;
                    }
                }
                return $elm$parser$Parser$Advanced$map_fn(function (block) {
                    return $elm$parser$Parser$Advanced$Loop(block);
                }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
            }(),
            $elm$parser$Parser$Advanced$map_fn(function (block) {
                return $elm$parser$Parser$Advanced$Loop(block);
            }, $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
        ]));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
        return $elm$core$Result$withDefault_fn(_List_Nil, $dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
        switch (xmlNode.$) {
            case 1:
                var innerText = xmlNode.a;
                return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(innerText));
            case 0:
                var tag = xmlNode.a;
                var attributes = xmlNode.b;
                var children = xmlNode.c;
                var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
                if (!_v1.$) {
                    var parsedChildren = _v1.a;
                    return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$HtmlElement_fn(tag, attributes, parsedChildren)));
                }
                else {
                    var err = _v1.a;
                    return $elm$parser$Parser$Advanced$problem(err);
                }
            case 2:
                var string = xmlNode.a;
                return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
            case 3:
                var string = xmlNode.a;
                return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
            case 4:
                var string = xmlNode.a;
                return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
            default:
                var declarationType = xmlNode.a;
                var content = xmlNode.b;
                return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration_fn(declarationType, content)));
        }
    };
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
        return $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$completeBlocks, $elm$parser$Parser$Advanced$loop_fn({ a: _List_Nil, b: _List_Nil }, $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
            $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
            $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
            $elm$parser$Parser$Advanced$map_fn($dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
            $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
            $elm$parser$Parser$Advanced$map_fn(function (_v40) {
                return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
            }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
            $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
            $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
            $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
            $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
        ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
            $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
            $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
            $elm$parser$Parser$Advanced$map_fn($dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
            $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
            $elm$parser$Parser$Advanced$map_fn(function (_v39) {
                return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
            }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
            $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
            $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
            $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
            $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
            $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
        ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
            $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
            $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
            $elm$parser$Parser$Advanced$map_fn($dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
            $elm$parser$Parser$Advanced$map_fn(function (_v38) {
                return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
            }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
            $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
            $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
            $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
            $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
        ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
        return $elm$parser$Parser$Advanced$andThen_fn($dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
    }
    var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
        return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
        return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
        return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
        return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
        return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
    };
    var $elm$core$Result$map2_fn = function (func, ra, rb) {
        if (ra.$ === 1) {
            var x = ra.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var a = ra.a;
            if (rb.$ === 1) {
                var x = rb.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var b = rb.a;
                return $elm$core$Result$Ok(A2(func, a, b));
            }
        }
    }, $elm$core$Result$map2_fn_unwrapped = function (func, ra, rb) {
        if (ra.$ === 1) {
            var x = ra.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var a = ra.a;
            if (rb.$ === 1) {
                var x = rb.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var b = rb.a;
                return $elm$core$Result$Ok(func(a, b));
            }
        }
    }, $elm$core$Result$map2 = F3($elm$core$Result$map2_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0 = $elm$core$Result$map2($elm$core$List$cons), $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1 = $elm$core$Result$Ok(_List_Nil), $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2($elm$core$List$foldr, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1);
    var $elm$core$List$drop_fn = function (n, list) {
        drop: while (true) {
            if (n <= 0) {
                return list;
            }
            else {
                if (!list.b) {
                    return list;
                }
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs;
                    n = $temp$n;
                    list = $temp$list;
                    continue drop;
                }
            }
        }
    }, $elm$core$List$drop = F2($elm$core$List$drop_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$foldl_fn = function (_function, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var block = list.a;
                var remainingBlocks = list.b;
                switch (block.$) {
                    case 0:
                        var html = block.a;
                        if (!html.$) {
                            var children = html.c;
                            var $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(children, remainingBlocks);
                            acc = $temp$acc;
                            list = $temp$list;
                            continue foldl;
                        }
                        else {
                            var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                            acc = $temp$acc;
                            list = $temp$list;
                            continue foldl;
                        }
                    case 1:
                        var blocks = block.b;
                        var childBlocks = $elm$core$List$concatMap_fn(function (_v3) {
                            var children = _v3.b;
                            return children;
                        }, blocks);
                        var $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(childBlocks, remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 2:
                        var blocks = block.c;
                        var $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap($elm$core$List$concat(blocks), remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 3:
                        var blocks = block.a;
                        var $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(blocks, remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 4:
                        var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 5:
                        var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 6:
                        var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 7:
                        var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    default:
                        var $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$Block$foldl_fn_unwrapped = function (_function, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var block = list.a;
                var remainingBlocks = list.b;
                switch (block.$) {
                    case 0:
                        var html = block.a;
                        if (!html.$) {
                            var children = html.c;
                            var $temp$acc = _function(block, acc), $temp$list = _Utils_ap(children, remainingBlocks);
                            acc = $temp$acc;
                            list = $temp$list;
                            continue foldl;
                        }
                        else {
                            var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                            acc = $temp$acc;
                            list = $temp$list;
                            continue foldl;
                        }
                    case 1:
                        var blocks = block.b;
                        var childBlocks = $elm$core$List$concatMap_fn(function (_v3) {
                            var children = _v3.b;
                            return children;
                        }, blocks);
                        var $temp$acc = _function(block, acc), $temp$list = _Utils_ap(childBlocks, remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 2:
                        var blocks = block.c;
                        var $temp$acc = _function(block, acc), $temp$list = _Utils_ap($elm$core$List$concat(blocks), remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 3:
                        var blocks = block.a;
                        var $temp$acc = _function(block, acc), $temp$list = _Utils_ap(blocks, remainingBlocks);
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 4:
                        var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 5:
                        var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 6:
                        var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    case 7:
                        var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                    default:
                        var $temp$acc = _function(block, acc), $temp$list = remainingBlocks;
                        acc = $temp$acc;
                        list = $temp$list;
                        continue foldl;
                }
            }
        }
    }, $dillonkearns$elm_markdown$Markdown$Block$foldl = F3($dillonkearns$elm_markdown$Markdown$Block$foldl_fn);
    var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
        switch (block.$) {
            case 5:
                var inlines = block.a;
                return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
            case 0:
                var html = block.a;
                if (!html.$) {
                    var blocks = html.c;
                    return $dillonkearns$elm_markdown$Markdown$Block$foldl_fn_unwrapped(function (nestedBlock, soFar) {
                        return _Utils_ap(soFar, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
                    }, "", blocks);
                }
                else {
                    return "";
                }
            case 1:
                var items = block.b;
                return $elm$core$String$join_fn("\n", $elm$core$List$map_fn(function (_v4) {
                    var blocks = _v4.b;
                    return $elm$core$String$join_fn("\n", $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
                }, items));
            case 2:
                var items = block.c;
                return $elm$core$String$join_fn("\n", $elm$core$List$map_fn(function (blocks) {
                    return $elm$core$String$join_fn("\n", $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
                }, items));
            case 3:
                var blocks = block.a;
                return $elm$core$String$join_fn("\n", $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
            case 4:
                var inlines = block.b;
                return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
            case 6:
                var header = block.a;
                var rows = block.b;
                return $elm$core$String$join_fn("\n", $elm$core$List$concat(_List_fromArray([
                    $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Block$extractInlineText, $elm$core$List$map_fn(function ($) {
                        return $.bM;
                    }, header)),
                    $elm$core$List$concat($elm$core$List$map_fn($elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText), rows))
                ])));
            case 7:
                var body = block.a.iL;
                return body;
            default:
                return "";
        }
    };
    var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
        return $elm$core$List$foldl_fn($dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, "", inlines);
    };
    var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp_fn = function (inline, text) {
        switch (inline.$) {
            case 7:
                var str = inline.a;
                return _Utils_ap(text, str);
            case 8:
                return text + " ";
            case 6:
                var str = inline.a;
                return _Utils_ap(text, str);
            case 1:
                var inlines = inline.c;
                return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
            case 2:
                var inlines = inline.c;
                return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
            case 0:
                var html = inline.a;
                if (!html.$) {
                    var blocks = html.c;
                    return $dillonkearns$elm_markdown$Markdown$Block$foldl_fn_unwrapped(function (block, soFar) {
                        return _Utils_ap(soFar, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
                    }, text, blocks);
                }
                else {
                    return text;
                }
            case 4:
                var inlines = inline.a;
                return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
            case 3:
                var inlines = inline.a;
                return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
            default:
                var inlines = inline.a;
                return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
        }
    }, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2($dillonkearns$elm_markdown$Markdown$Block$extractTextHelp_fn);
    var $elm$core$Tuple$pair_fn = function (a, b) {
        return _Utils_Tuple2(a, b);
    }, $elm$core$Tuple$pair = F2($elm$core$Tuple$pair_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml_fn = function (tagName, attributes, children, _v0, renderedChildren) {
        var htmlRenderer = _v0;
        return $elm$core$Result$andThen_fn(function (okChildren) {
            return $elm$core$Result$map_fn(function (myRenderer) {
                return myRenderer(okChildren);
            }, A3(htmlRenderer, tagName, attributes, children));
        }, $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, renderedChildren));
    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5($dillonkearns$elm_markdown$Markdown$Renderer$renderHtml_fn);
    var $elm$core$List$singleton = function (value) {
        return _List_fromArray([value]);
    };
    var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing_fn = function (renderer, topLevelInline, soFar) {
        var _v12 = $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline_fn(renderer, topLevelInline);
        if (!_v12.$) {
            var inline = _v12.a;
            return _List_Cons(inline, soFar);
        }
        else {
            return soFar;
        }
    }, $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3($dillonkearns$elm_markdown$Markdown$Renderer$foldThing_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper_fn = function (renderer, blocks) {
        return $elm$core$List$filterMap_fn($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer), blocks);
    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
        return function (block) {
            switch (block.$) {
                case 4:
                    var level = block.a;
                    var content = block.b;
                    return $elm$core$Maybe$Just($elm$core$Result$map_fn(function (children) {
                        return renderer.hx({
                            g7: children,
                            jA: level,
                            kc: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
                        });
                    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, content)));
                case 5:
                    var content = block.a;
                    return $elm$core$Maybe$Just($elm$core$Result$map_fn(renderer.hW, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, content)));
                case 0:
                    var html = block.a;
                    if (!html.$) {
                        var tag = html.a;
                        var attributes = html.b;
                        var children = html.c;
                        return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode_fn(renderer, tag, attributes, children));
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                case 1:
                    var tight = block.a;
                    var items = block.b;
                    return $elm$core$Maybe$Just($elm$core$Result$map_fn(function (listItems) {
                        return renderer.ir($elm$core$List$map_fn(function (_v7) {
                            var task = _v7.a;
                            var children = _v7.b;
                            return $dillonkearns$elm_markdown$Markdown$Block$ListItem_fn(task, $elm$core$List$concat(children));
                        }, listItems));
                    }, $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$map_fn(function (_v4) {
                        var task = _v4.a;
                        var children = _v4.b;
                        return $elm$core$Result$map_fn($dillonkearns$elm_markdown$Markdown$Block$ListItem(task), $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, function (blocks) {
                            return $elm$core$List$filterMap_fn(function (listItemBlock) {
                                var _v5 = _Utils_Tuple2(tight, listItemBlock);
                                if ((_v5.a === 1) && (_v5.b.$ === 5)) {
                                    var _v6 = _v5.a;
                                    var content = _v5.b.a;
                                    return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, content));
                                }
                                else {
                                    return $elm$core$Maybe$map_fn($elm$core$Result$map($elm$core$List$singleton), A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
                                }
                            }, blocks);
                        }(children)));
                    }, items))));
                case 2:
                    var tight = block.a;
                    var startingIndex = block.b;
                    var items = block.c;
                    return $elm$core$Maybe$Just($elm$core$Result$map_fn(function (listItems) {
                        return A2(renderer.hT, startingIndex, $elm$core$List$map_fn(function (children) {
                            return $elm$core$List$concat(children);
                        }, listItems));
                    }, $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$map_fn(function (itemsblocks) {
                        return $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, function (blocks) {
                            return $elm$core$List$filterMap_fn(function (listItemBlock) {
                                var _v8 = _Utils_Tuple2(tight, listItemBlock);
                                if ((_v8.a === 1) && (_v8.b.$ === 5)) {
                                    var _v9 = _v8.a;
                                    var content = _v8.b.a;
                                    return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, content));
                                }
                                else {
                                    return $elm$core$Maybe$map_fn($elm$core$Result$map($elm$core$List$singleton), A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
                                }
                            }, blocks);
                        }(itemsblocks));
                    }, items))));
                case 7:
                    var codeBlock = block.a;
                    return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.g8(codeBlock)));
                case 8:
                    return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.ik));
                case 3:
                    var nestedBlocks = block.a;
                    return $elm$core$Maybe$Just($elm$core$Result$map_fn(renderer.g2, $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper_fn(renderer, nestedBlocks))));
                default:
                    var header = block.a;
                    var rows = block.b;
                    var renderedHeaderCells = $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$map_fn(function (_v11) {
                        var alignment = _v11.cw;
                        var label = _v11.bM;
                        return $elm$core$Result$map_fn($elm$core$Tuple$pair(alignment), $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, label));
                    }, header));
                    var renderedHeader = $elm$core$Result$map_fn(function (listListView) {
                        return renderer.ie($elm$core$List$singleton(renderer.ig($elm$core$List$map_fn(function (_v10) {
                            var maybeAlignment = _v10.a;
                            var item = _v10.b;
                            return A2(renderer.$8, maybeAlignment, item);
                        }, listListView))));
                    }, renderedHeaderCells);
                    var renderedBody = function (r) {
                        return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray([
                            renderer.ic(r)
                        ]);
                    };
                    var alignmentForColumn = function (columnIndex) {
                        return $elm$core$Maybe$andThen_fn(function ($) {
                            return $.cw;
                        }, $elm$core$List$head($elm$core$List$drop_fn(columnIndex, header)));
                    };
                    var renderRow = function (cells) {
                        return $elm$core$Result$map_fn(renderer.ig, $elm$core$Result$map_fn($elm$core$List$indexedMap(F2(function (index, cell) {
                            return A2(renderer.id, alignmentForColumn(index), cell);
                        })), $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$map_fn($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer), cells))));
                    };
                    var renderedRows = $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$map_fn(renderRow, rows));
                    return $elm$core$Maybe$Just($elm$core$Result$map2_fn_unwrapped(function (h, r) {
                        return renderer.ib(_List_Cons(h, renderedBody(r)));
                    }, renderedHeader, renderedRows));
            }
        };
    };
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode_fn = function (renderer, tag, attributes, children) {
        return $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml_fn(tag, attributes, children, renderer.hy, $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper_fn(renderer, children));
    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline_fn = function (renderer, inline) {
        switch (inline.$) {
            case 4:
                var innerInlines = inline.a;
                return $elm$core$Maybe$Just($elm$core$Result$map_fn(renderer.ia, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, innerInlines)));
            case 3:
                var innerInlines = inline.a;
                return $elm$core$Maybe$Just($elm$core$Result$map_fn(renderer.hg, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, innerInlines)));
            case 5:
                var innerInlines = inline.a;
                return $elm$core$Maybe$Just($elm$core$Result$map_fn(renderer.h9, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, innerInlines)));
            case 2:
                var src = inline.a;
                var title = inline.b;
                var children = inline.c;
                return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.hB({
                    gY: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
                    ky: src,
                    dz: title
                })));
            case 7:
                var string = inline.a;
                return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.ii(string)));
            case 6:
                var string = inline.a;
                return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.g9(string)));
            case 1:
                var destination = inline.a;
                var title = inline.b;
                var inlines = inline.c;
                return $elm$core$Maybe$Just($elm$core$Result$andThen_fn(function (children) {
                    return $elm$core$Result$Ok(A2(renderer.hJ, { fS: destination, dz: title }, children));
                }, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn(renderer, inlines)));
            case 8:
                return $elm$core$Maybe$Just($elm$core$Result$Ok(renderer.hw));
            default:
                var html = inline.a;
                if (!html.$) {
                    var tag = html.a;
                    var attributes = html.b;
                    var children = html.c;
                    return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode_fn(renderer, tag, attributes, children));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
        }
    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn = function (renderer, styledStrings) {
        return $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer), _List_Nil, styledStrings));
    }, $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled_fn);
    var $dillonkearns$elm_markdown$Markdown$Renderer$render_fn = function (renderer, ast) {
        return $elm$core$List$foldr_fn($dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a0, $dillonkearns$elm_markdown$Markdown$Renderer$combineResults_a1, $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper_fn(renderer, ast));
    }, $dillonkearns$elm_markdown$Markdown$Renderer$render = F2($dillonkearns$elm_markdown$Markdown$Renderer$render_fn);
    var $author$project$BlogPost$trim = function (s) {
        var len = 200;
        return (_Utils_cmp($elm$core$String$length(s), len) > 0) ? ($elm$core$String$left_fn(len, s) + "\u2026\u2026") : s;
    };
    var $author$project$BlogPost$omitAndTrim = function (content) {
        var _v0 = $elm$core$Result$andThen_fn(function (blocks) {
            return $elm$core$Result$map_fn(A2($elm$core$Basics$composeR, $elm$core$String$join(" "), $author$project$BlogPost$trim), $elm$core$Result$mapError_fn($elm$core$Basics$always("Markdown rendering failed"), $dillonkearns$elm_markdown$Markdown$Renderer$render_fn($author$project$MarkdownRenderer$omittedStringRenderer, blocks)));
        }, $elm$core$Result$mapError_fn($elm$core$Basics$always("Markdown parsing failed"), $dillonkearns$elm_markdown$Markdown$Parser$parse(content)));
        if (!_v0.$) {
            var rendered = _v0.a;
            return rendered;
        }
        else {
            var error = _v0.a;
            return error;
        }
    };
    var $author$project$Route$Article$Slug_$head = function (app) {
        var seo = $author$project$Shared$seo;
        return $dillonkearns$elm_pages$Head$Seo$website($dillonkearns$elm_pages$Head$Seo$summary(_Utils_update(seo, {
            i$: $author$project$BlogPost$omitAndTrim(""),
            dz: ""
        })));
    };
    var $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob = F2($dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn);
    var $dillonkearns$elm_pages$BackendTask$Glob$capture_fn = function (_v0, _v1) {
        var matcherPattern = _v0.a;
        var apply1 = _v0.b;
        var pattern = _v1.a;
        var apply2 = _v1.b;
        return $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn(_Utils_ap(pattern, matcherPattern), F3(function (fileStats, fullPath, captures) {
            var _v2 = A3(apply1, fileStats, fullPath, captures);
            var applied1 = _v2.a;
            var captured1 = _v2.b;
            var _v3 = A3(apply2, fileStats, fullPath, captured1);
            var applied2 = _v3.a;
            var captured2 = _v3.b;
            return _Utils_Tuple2(applied2(applied1), captured2);
        }));
    }, $dillonkearns$elm_pages$BackendTask$Glob$capture = F2($dillonkearns$elm_pages$BackendTask$Glob$capture_fn);
    var $dillonkearns$elm_pages$BackendTask$Glob$fullFilePath = $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn("", F3(function (_v0, fullPath, captures) {
        return _Utils_Tuple2(fullPath, captures);
    }));
    var $dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0 = $dillonkearns$elm_pages$BackendTask$Glob$fullFilePath, $dillonkearns$elm_pages$BackendTask$Glob$captureFilePath = $dillonkearns$elm_pages$BackendTask$Glob$capture($dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0);
    var $dillonkearns$elm_pages$BackendTask$Glob$literal = function (string) {
        return $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn(string, F3(function (_v0, _v1, captures) {
            return _Utils_Tuple2(string, captures);
        }));
    };
    var $dillonkearns$elm_pages$BackendTask$Glob$match_fn = function (_v0, _v1) {
        var matcherPattern = _v0.a;
        var apply1 = _v0.b;
        var pattern = _v1.a;
        var apply2 = _v1.b;
        return $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn(_Utils_ap(pattern, matcherPattern), F3(function (fileStats_, fullPath, captures) {
            var _v2 = A3(apply1, fileStats_, fullPath, captures);
            var captured1 = _v2.b;
            var _v3 = A3(apply2, fileStats_, fullPath, captured1);
            var applied2 = _v3.a;
            var captured2 = _v3.b;
            return _Utils_Tuple2(applied2, captured2);
        }));
    }, $dillonkearns$elm_pages$BackendTask$Glob$match = F2($dillonkearns$elm_pages$BackendTask$Glob$match_fn);
    var $dillonkearns$elm_pages$BackendTask$Glob$succeed = function (constructor) {
        return $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn("", F3(function (_v0, _v1, captures) {
            return _Utils_Tuple2(constructor, captures);
        }));
    };
    var $dillonkearns$elm_pages$BackendTask$Glob$OnlyFiles = 0;
    var $dillonkearns$elm_pages$BackendTask$Glob$defaultOptions = { dL: true, dR: true, dS: false, bj: 0, dU: false, d3: $elm$core$Maybe$Nothing };
    var $dillonkearns$elm_pages$BackendTask$Glob$FilesAndFolders = 2;
    var $dillonkearns$elm_pages$BackendTask$Glob$OnlyFolders = 1;
    var $elm$json$Json$Encode$bool = _Json_wrap;
    var $elm$json$Json$Encode$int = _Json_wrap;
    var $elm$json$Json$Encode$object = function (pairs) {
        return _Json_wrap($elm$core$List$foldl_fn_unwrapped(function (_v0, obj) {
            var k = _v0.a;
            var v = _v0.b;
            return _Json_addField_fn(k, v, obj);
        }, _Json_emptyObject(0), pairs));
    };
    var $dillonkearns$elm_pages$BackendTask$Glob$encodeOptions = function (options) {
        return $elm$json$Json$Encode$object($elm$core$List$filterMap_fn($elm$core$Basics$identity, _List_fromArray([
            $elm$core$Maybe$Just(_Utils_Tuple2("dot", $elm$json$Json$Encode$bool(options.dU))),
            $elm$core$Maybe$Just(_Utils_Tuple2("followSymbolicLinks", $elm$json$Json$Encode$bool(options.dR))),
            $elm$core$Maybe$Just(_Utils_Tuple2("caseSensitiveMatch", $elm$json$Json$Encode$bool(options.dL))),
            $elm$core$Maybe$Just(_Utils_Tuple2("gitignore", $elm$json$Json$Encode$bool(options.dS))),
            $elm$core$Maybe$map_fn(function (depth) {
                return _Utils_Tuple2("deep", $elm$json$Json$Encode$int(depth));
            }, options.d3),
            $elm$core$Maybe$Just(_Utils_Tuple2("onlyFiles", $elm$json$Json$Encode$bool((options.bj === 2) ? false : (!options.bj)))),
            $elm$core$Maybe$Just(_Utils_Tuple2("onlyDirectories", $elm$json$Json$Encode$bool((options.bj === 2) ? false : (options.bj === 1)))),
            $elm$core$Maybe$Just(_Utils_Tuple2("stats", $elm$json$Json$Encode$bool(true)))
        ])));
    };
    var $dillonkearns$elm_pages$BackendTask$Http$ExpectJson = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$BackendTask$Http$expectJson = $dillonkearns$elm_pages$BackendTask$Http$ExpectJson;
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $dillonkearns$elm_pages$BackendTask$Glob$FileStats_fn = function (fullPath, sizeInBytes, lastContentChange, lastAccess, lastFileChange, createdAt, isDirectory) {
        return { eB: createdAt, cT: fullPath, eI: isDirectory, eK: lastAccess, eL: lastContentChange, eM: lastFileChange, fc: sizeInBytes };
    }, $dillonkearns$elm_pages$BackendTask$Glob$FileStats = F7($dillonkearns$elm_pages$BackendTask$Glob$FileStats_fn);
    var $elm$json$Json$Decode$bool = _Json_decodeBool;
    var $elm$json$Json$Decode$int = _Json_decodeInt;
    var $elm$json$Json$Decode$map7 = _Json_map7;
    var $elm$time$Time$Posix = $elm$core$Basics$identity;
    var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $dillonkearns$elm_pages$BackendTask$Glob$fileStatsDecoder = _Json_map7_fn($dillonkearns$elm_pages$BackendTask$Glob$FileStats, _Json_decodeField_fn("fullPath", $elm$json$Json$Decode$string), _Json_decodeField_fn("size", $elm$json$Json$Decode$int), _Json_map1_fn($elm$time$Time$millisToPosix, _Json_decodeField_fn("mtime", $elm$json$Json$Decode$int)), _Json_map1_fn($elm$time$Time$millisToPosix, _Json_decodeField_fn("atime", $elm$json$Json$Decode$int)), _Json_map1_fn($elm$time$Time$millisToPosix, _Json_decodeField_fn("ctime", $elm$json$Json$Decode$int)), _Json_map1_fn($elm$time$Time$millisToPosix, _Json_decodeField_fn("birthtime", $elm$json$Json$Decode$int)), _Json_decodeField_fn("isDirectory", $elm$json$Json$Decode$bool));
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$JsonBody = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$BackendTask$Http$jsonBody = function (content) {
        return $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$JsonBody(content);
    };
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $elm$json$Json$Decode$oneOf = _Json_oneOf;
    var $elm$json$Json$Decode$maybe = function (decoder) {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            _Json_map1_fn($elm$core$Maybe$Just, decoder),
            $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
        ]));
    };
    var $dillonkearns$elm_pages$BackendTask$onError_fn = function (fromError, backendTask) {
        onError: while (true) {
            if (backendTask.$ === 1) {
                var a = backendTask.a;
                if (!a.$) {
                    var okA = a.a;
                    return $dillonkearns$elm_pages$BackendTask$succeed(okA);
                }
                else {
                    var errA = a.a;
                    return fromError(errA);
                }
            }
            else {
                var urls = backendTask.a;
                var lookupFn = backendTask.b;
                if ($elm$core$List$isEmpty(urls)) {
                    var $temp$backendTask = A2(lookupFn, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_Nil));
                    backendTask = $temp$backendTask;
                    continue onError;
                }
                else {
                    return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn(urls, F2(function (maybeMockResolver, responses) {
                        return $dillonkearns$elm_pages$BackendTask$onError_fn(fromError, A2(lookupFn, maybeMockResolver, responses));
                    }));
                }
            }
        }
    }, $dillonkearns$elm_pages$BackendTask$onError = F2($dillonkearns$elm_pages$BackendTask$onError_fn);
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $dillonkearns$elm_pages$BackendTask$Http$encodeOptions = function (options) {
        return $elm$json$Json$Encode$object($elm$core$List$filterMap_fn(function (_v1) {
            var a = _v1.a;
            var b = _v1.b;
            return $elm$core$Maybe$map_fn($elm$core$Tuple$pair(a), b);
        }, _List_fromArray([
            _Utils_Tuple2("cache", $elm$core$Maybe$map_fn($elm$json$Json$Encode$string, $elm$core$Maybe$map_fn(function (cacheStrategy) {
                switch (cacheStrategy) {
                    case 0:
                        return "no-store";
                    case 1:
                        return "no-cache";
                    case 2:
                        return "reload";
                    case 3:
                        return "force-cache";
                    default:
                        return "only-if-cached";
                }
            }, options.cD))),
            _Utils_Tuple2("retry", $elm$core$Maybe$map_fn($elm$json$Json$Encode$int, options.kh)),
            _Utils_Tuple2("timeout", $elm$core$Maybe$map_fn($elm$json$Json$Encode$int, options.kD)),
            _Utils_Tuple2("cachePath", $elm$core$Maybe$map_fn($elm$json$Json$Encode$string, options.cC))
        ])));
    };
    var $dillonkearns$elm_pages$BackendTask$Http$BadBody_fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $dillonkearns$elm_pages$BackendTask$Http$BadBody = F2($dillonkearns$elm_pages$BackendTask$Http$BadBody_fn);
    var $dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $dillonkearns$elm_pages$BackendTask$Http$BadStatus = F2($dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn);
    var $dillonkearns$elm_pages$BackendTask$Http$NetworkError = { $: 2 };
    var $dillonkearns$elm_pages$BackendTask$Http$Timeout = { $: 1 };
    var $vito$elm_ansi$Ansi$Red = { $: 1 };
    var $dillonkearns$elm_pages$TerminalText$Style_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$TerminalText$Style = F2($dillonkearns$elm_pages$TerminalText$Style_fn);
    var $dillonkearns$elm_pages$TerminalText$blankStyle = { cA: false, aC: $elm$core$Maybe$Nothing, dC: false };
    var $dillonkearns$elm_pages$TerminalText$red = function (inner) {
        return $dillonkearns$elm_pages$TerminalText$Style_fn(_Utils_update($dillonkearns$elm_pages$TerminalText$blankStyle, {
            aC: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red)
        }), inner);
    };
    var $dillonkearns$elm_pages$TerminalText$text = function (value) {
        return $dillonkearns$elm_pages$TerminalText$Style_fn($dillonkearns$elm_pages$TerminalText$blankStyle, value);
    };
    var $elm$core$String$concat = function (strings) {
        return $elm$core$String$join_fn("", strings);
    };
    var $vito$elm_ansi$Ansi$White = { $: 7 };
    var $dillonkearns$elm_pages$TerminalText$ansiPrefix = "\u001B";
    var $dillonkearns$elm_pages$TerminalText$ansi = function (code) {
        return _Utils_ap($dillonkearns$elm_pages$TerminalText$ansiPrefix, code);
    };
    var $dillonkearns$elm_pages$TerminalText$colorToString = function (color) {
        return $dillonkearns$elm_pages$TerminalText$ansi(function () {
            switch (color.$) {
                case 1:
                    return "[31m";
                case 4:
                    return "[34m";
                case 2:
                    return "[32m";
                case 3:
                    return "[33m";
                case 6:
                    return "[36m";
                default:
                    return "";
            }
        }());
    };
    var $dillonkearns$elm_pages$TerminalText$resetColors = $dillonkearns$elm_pages$TerminalText$ansi("[0m");
    var $dillonkearns$elm_pages$TerminalText$toString_ = function (_v0) {
        var ansiStyle = _v0.a;
        var innerText = _v0.b;
        return $elm$core$String$concat(_List_fromArray([
            $dillonkearns$elm_pages$TerminalText$colorToString($elm$core$Maybe$withDefault_fn($vito$elm_ansi$Ansi$White, ansiStyle.aC)),
            innerText,
            $dillonkearns$elm_pages$TerminalText$resetColors
        ]));
    };
    var $dillonkearns$elm_pages$TerminalText$toString = function (list) {
        return $elm$core$String$concat($elm$core$List$map_fn($dillonkearns$elm_pages$TerminalText$toString_, list));
    };
    var $dillonkearns$elm_pages$BackendTask$Http$errorToString = function (error) {
        return {
            iL: $dillonkearns$elm_pages$TerminalText$toString(function () {
                switch (error.$) {
                    case 0:
                        var string = error.a;
                        return _List_fromArray([
                            $dillonkearns$elm_pages$TerminalText$text("BadUrl " + string)
                        ]);
                    case 1:
                        return _List_fromArray([
                            $dillonkearns$elm_pages$TerminalText$text("Timeout")
                        ]);
                    case 2:
                        return _List_fromArray([
                            $dillonkearns$elm_pages$TerminalText$text("NetworkError")
                        ]);
                    case 3:
                        var metadata = error.a;
                        return _List_fromArray([
                            $dillonkearns$elm_pages$TerminalText$text("BadStatus: "),
                            $dillonkearns$elm_pages$TerminalText$red($elm$core$String$fromInt(metadata._)),
                            $dillonkearns$elm_pages$TerminalText$text(" " + metadata.aj)
                        ]);
                    default:
                        var string = error.b;
                        return _List_fromArray([
                            $dillonkearns$elm_pages$TerminalText$text("BadBody: " + string)
                        ]);
                }
            }()),
            dz: "HTTP Error"
        };
    };
    var $dillonkearns$elm_pages$BackendTask$Http$expectToString = function (expect) {
        switch (expect.$) {
            case 0:
                return "ExpectJson";
            case 1:
                return "ExpectString";
            case 2:
                return "ExpectBytes";
            case 3:
                return "ExpectWhatever";
            default:
                var toExpect = expect.a;
                return $dillonkearns$elm_pages$BackendTask$Http$expectToString(toExpect({ jo: $elm$core$Dict$empty, _: 123, aj: "", kG: "" }));
        }
    };
    var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
        switch (builder.$) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 4;
            case 3:
                return 1;
            case 4:
                return 2;
            case 5:
                return 4;
            case 6:
                return 4;
            case 7:
                return 8;
            case 8:
                var w = builder.a;
                return w;
            case 9:
                var w = builder.a;
                return w;
            default:
                var bs = builder.a;
                return _Bytes_width(bs);
        }
    };
    var $elm$bytes$Bytes$LE = 0;
    var $elm$bytes$Bytes$Encode$write_fn = function (builder, mb, offset) {
        switch (builder.$) {
            case 0:
                var n = builder.a;
                return _Bytes_write_i8_fn(mb, offset, n);
            case 1:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_i16_fn(mb, offset, n, !e);
            case 2:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_i32_fn(mb, offset, n, !e);
            case 3:
                var n = builder.a;
                return _Bytes_write_u8_fn(mb, offset, n);
            case 4:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_u16_fn(mb, offset, n, !e);
            case 5:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_u32_fn(mb, offset, n, !e);
            case 6:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_f32_fn(mb, offset, n, !e);
            case 7:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_f64_fn(mb, offset, n, !e);
            case 8:
                var bs = builder.b;
                return $elm$bytes$Bytes$Encode$writeSequence_fn(bs, mb, offset);
            case 9:
                var s = builder.b;
                return _Bytes_write_string_fn(mb, offset, s);
            default:
                var bs = builder.a;
                return _Bytes_write_bytes_fn(mb, offset, bs);
        }
    }, $elm$bytes$Bytes$Encode$write = F3($elm$bytes$Bytes$Encode$write_fn);
    var $elm$bytes$Bytes$Encode$writeSequence_fn = function (builders, mb, offset) {
        writeSequence: while (true) {
            if (!builders.b) {
                return offset;
            }
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$builders = bs, $temp$offset = $elm$bytes$Bytes$Encode$write_fn(b, mb, offset);
                builders = $temp$builders;
                offset = $temp$offset;
                continue writeSequence;
            }
        }
    }, $elm$bytes$Bytes$Encode$writeSequence = F3($elm$bytes$Bytes$Encode$writeSequence_fn);
    var $elm$bytes$Bytes$Decode$decode_fn = function (_v0, bs) {
        var decoder = _v0;
        return _Bytes_decode_fn(decoder, bs);
    }, $elm$bytes$Bytes$Decode$decode = F2($elm$bytes$Bytes$Decode$decode_fn);
    var $elm$bytes$Bytes$Decode$Decoder = $elm$core$Basics$identity;
    var $elm$bytes$Bytes$Decode$loopHelp_fn = function (state, callback, bites, offset) {
        loopHelp: while (true) {
            var _v0 = callback(state);
            var decoder = _v0;
            var _v1 = A2(decoder, bites, offset);
            var newOffset = _v1.a;
            var step = _v1.b;
            if (!step.$) {
                var newState = step.a;
                var $temp$state = newState, $temp$offset = newOffset;
                state = $temp$state;
                offset = $temp$offset;
                continue loopHelp;
            }
            else {
                var result = step.a;
                return _Utils_Tuple2(newOffset, result);
            }
        }
    }, $elm$bytes$Bytes$Decode$loopHelp = F4($elm$bytes$Bytes$Decode$loopHelp_fn);
    var $elm$bytes$Bytes$Decode$loop_fn = function (state, callback) {
        return A2($elm$bytes$Bytes$Decode$loopHelp, state, callback);
    }, $elm$bytes$Bytes$Decode$loop = F2($elm$bytes$Bytes$Decode$loop_fn);
    var $elm$bytes$Bytes$Decode$Done = function (a) {
        return { $: 1, a: a };
    };
    var $elm$bytes$Bytes$Decode$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $danfishgold$base64_bytes$Decode$lowest6BitsMask = 63;
    var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
    var $danfishgold$base64_bytes$Decode$unsafeToChar = function (n) {
        if (n <= 25) {
            return $elm$core$Char$fromCode(65 + n);
        }
        else {
            if (n <= 51) {
                return $elm$core$Char$fromCode(97 + (n - 26));
            }
            else {
                if (n <= 61) {
                    return $elm$core$Char$fromCode(48 + (n - 52));
                }
                else {
                    switch (n) {
                        case 62:
                            return "+";
                        case 63:
                            return "/";
                        default:
                            return "\0";
                    }
                }
            }
        }
    };
    var $danfishgold$base64_bytes$Decode$bitsToChars_fn = function (bits, missing) {
        var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 18);
        switch (missing) {
            case 0:
                return _String_cons_fn(p, _String_cons_fn(q, _String_cons_fn(r, $elm$core$String$fromChar(s))));
            case 1:
                return _String_cons_fn(p, _String_cons_fn(q, _String_cons_fn(r, "=")));
            case 2:
                return _String_cons_fn(p, _String_cons_fn(q, "=="));
            default:
                return "";
        }
    }, $danfishgold$base64_bytes$Decode$bitsToChars = F2($danfishgold$base64_bytes$Decode$bitsToChars_fn);
    var $danfishgold$base64_bytes$Decode$bitsToCharSpecialized_fn = function (bits1, bits2, bits3, accum) {
        var z = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var y = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var x = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 18);
        var w = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 18);
        var d = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var c = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var b = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
        var a = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 18);
        return _String_cons_fn(x, _String_cons_fn(y, _String_cons_fn(z, _String_cons_fn(w, _String_cons_fn(a, _String_cons_fn(b, _String_cons_fn(c, _String_cons_fn(d, _String_cons_fn(p, _String_cons_fn(q, _String_cons_fn(r, _String_cons_fn(s, accum))))))))))));
    }, $danfishgold$base64_bytes$Decode$bitsToCharSpecialized = F4($danfishgold$base64_bytes$Decode$bitsToCharSpecialized_fn);
    var $elm$core$Bitwise$or = _Bitwise_or;
    var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
    var $danfishgold$base64_bytes$Decode$decode18Help_fn = function (a, b, c, d, e) {
        var combined6 = ((255 & d) << 16) | e;
        var combined5 = d >>> 8;
        var combined4 = 16777215 & c;
        var combined3 = ((65535 & b) << 8) | (c >>> 24);
        var combined2 = ((255 & a) << 16) | (b >>> 16);
        var combined1 = a >>> 8;
        return $danfishgold$base64_bytes$Decode$bitsToCharSpecialized_fn(combined3, combined2, combined1, $danfishgold$base64_bytes$Decode$bitsToCharSpecialized_fn(combined6, combined5, combined4, ""));
    }, $danfishgold$base64_bytes$Decode$decode18Help = F5($danfishgold$base64_bytes$Decode$decode18Help_fn);
    var $elm$bytes$Bytes$Decode$map5_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
        var decodeA = _v0;
        var decodeB = _v1;
        var decodeC = _v2;
        var decodeD = _v3;
        var decodeE = _v4;
        return F2(function (bites, offset) {
            var _v5 = A2(decodeA, bites, offset);
            var aOffset = _v5.a;
            var a = _v5.b;
            var _v6 = A2(decodeB, bites, aOffset);
            var bOffset = _v6.a;
            var b = _v6.b;
            var _v7 = A2(decodeC, bites, bOffset);
            var cOffset = _v7.a;
            var c = _v7.b;
            var _v8 = A2(decodeD, bites, cOffset);
            var dOffset = _v8.a;
            var d = _v8.b;
            var _v9 = A2(decodeE, bites, dOffset);
            var eOffset = _v9.a;
            var e = _v9.b;
            return _Utils_Tuple2(eOffset, A5(func, a, b, c, d, e));
        });
    }, $elm$bytes$Bytes$Decode$map5_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
        var decodeA = _v0;
        var decodeB = _v1;
        var decodeC = _v2;
        var decodeD = _v3;
        var decodeE = _v4;
        return F2(function (bites, offset) {
            var _v5 = A2(decodeA, bites, offset);
            var aOffset = _v5.a;
            var a = _v5.b;
            var _v6 = A2(decodeB, bites, aOffset);
            var bOffset = _v6.a;
            var b = _v6.b;
            var _v7 = A2(decodeC, bites, bOffset);
            var cOffset = _v7.a;
            var c = _v7.b;
            var _v8 = A2(decodeD, bites, cOffset);
            var dOffset = _v8.a;
            var d = _v8.b;
            var _v9 = A2(decodeE, bites, dOffset);
            var eOffset = _v9.a;
            var e = _v9.b;
            return _Utils_Tuple2(eOffset, func(a, b, c, d, e));
        });
    }, $elm$bytes$Bytes$Decode$map5 = F6($elm$bytes$Bytes$Decode$map5_fn);
    var $elm$bytes$Bytes$BE = 1;
    var $elm$bytes$Bytes$Decode$unsignedInt16 = function (endianness) {
        return _Bytes_read_u16(!endianness);
    };
    var $danfishgold$base64_bytes$Decode$u16BE = $elm$bytes$Bytes$Decode$unsignedInt16(1);
    var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
        return _Bytes_read_u32(!endianness);
    };
    var $danfishgold$base64_bytes$Decode$u32BE = $elm$bytes$Bytes$Decode$unsignedInt32(1);
    var $danfishgold$base64_bytes$Decode$decode18Bytes = $elm$bytes$Bytes$Decode$map5_fn($danfishgold$base64_bytes$Decode$decode18Help, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u16BE);
    var $elm$bytes$Bytes$Decode$map_fn = function (func, _v0) {
        var decodeA = _v0;
        return F2(function (bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var aOffset = _v1.a;
            var a = _v1.b;
            return _Utils_Tuple2(aOffset, func(a));
        });
    }, $elm$bytes$Bytes$Decode$map = F2($elm$bytes$Bytes$Decode$map_fn);
    var $elm$bytes$Bytes$Decode$map2_fn = function (func, _v0, _v1) {
        var decodeA = _v0;
        var decodeB = _v1;
        return F2(function (bites, offset) {
            var _v2 = A2(decodeA, bites, offset);
            var aOffset = _v2.a;
            var a = _v2.b;
            var _v3 = A2(decodeB, bites, aOffset);
            var bOffset = _v3.a;
            var b = _v3.b;
            return _Utils_Tuple2(bOffset, A2(func, a, b));
        });
    }, $elm$bytes$Bytes$Decode$map2_fn_unwrapped = function (func, _v0, _v1) {
        var decodeA = _v0;
        var decodeB = _v1;
        return F2(function (bites, offset) {
            var _v2 = A2(decodeA, bites, offset);
            var aOffset = _v2.a;
            var a = _v2.b;
            var _v3 = A2(decodeB, bites, aOffset);
            var bOffset = _v3.a;
            var b = _v3.b;
            return _Utils_Tuple2(bOffset, func(a, b));
        });
    }, $elm$bytes$Bytes$Decode$map2 = F3($elm$bytes$Bytes$Decode$map2_fn);
    var $elm$bytes$Bytes$Decode$map3_fn = function (func, _v0, _v1, _v2) {
        var decodeA = _v0;
        var decodeB = _v1;
        var decodeC = _v2;
        return F2(function (bites, offset) {
            var _v3 = A2(decodeA, bites, offset);
            var aOffset = _v3.a;
            var a = _v3.b;
            var _v4 = A2(decodeB, bites, aOffset);
            var bOffset = _v4.a;
            var b = _v4.b;
            var _v5 = A2(decodeC, bites, bOffset);
            var cOffset = _v5.a;
            var c = _v5.b;
            return _Utils_Tuple2(cOffset, A3(func, a, b, c));
        });
    }, $elm$bytes$Bytes$Decode$map3_fn_unwrapped = function (func, _v0, _v1, _v2) {
        var decodeA = _v0;
        var decodeB = _v1;
        var decodeC = _v2;
        return F2(function (bites, offset) {
            var _v3 = A2(decodeA, bites, offset);
            var aOffset = _v3.a;
            var a = _v3.b;
            var _v4 = A2(decodeB, bites, aOffset);
            var bOffset = _v4.a;
            var b = _v4.b;
            var _v5 = A2(decodeC, bites, bOffset);
            var cOffset = _v5.a;
            var c = _v5.b;
            return _Utils_Tuple2(cOffset, func(a, b, c));
        });
    }, $elm$bytes$Bytes$Decode$map3 = F4($elm$bytes$Bytes$Decode$map3_fn);
    var $elm$bytes$Bytes$Decode$succeed = function (a) {
        return F2(function (_v0, offset) {
            return _Utils_Tuple2(offset, a);
        });
    };
    var $elm$bytes$Bytes$Decode$unsignedInt8 = _Bytes_read_u8;
    var $danfishgold$base64_bytes$Decode$loopHelp = function (_v0) {
        var string = _v0.fg;
        var remaining = _v0.e6;
        if (remaining >= 18) {
            return $elm$bytes$Bytes$Decode$map_fn(function (result) {
                return $elm$bytes$Bytes$Decode$Loop({
                    e6: remaining - 18,
                    fg: _Utils_ap(string, result)
                });
            }, $danfishgold$base64_bytes$Decode$decode18Bytes);
        }
        else {
            if (remaining >= 3) {
                var helper = F3(function (a, b, c) {
                    var combined = ((a << 16) | (b << 8)) | c;
                    return $elm$bytes$Bytes$Decode$Loop({
                        e6: remaining - 3,
                        fg: _Utils_ap(string, $danfishgold$base64_bytes$Decode$bitsToChars_fn(combined, 0))
                    });
                });
                return $elm$bytes$Bytes$Decode$map3_fn(helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
            }
            else {
                if (!remaining) {
                    return $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done(string));
                }
                else {
                    if (remaining === 2) {
                        var helper = F2(function (a, b) {
                            var combined = (a << 16) | (b << 8);
                            return $elm$bytes$Bytes$Decode$Done(_Utils_ap(string, $danfishgold$base64_bytes$Decode$bitsToChars_fn(combined, 1)));
                        });
                        return $elm$bytes$Bytes$Decode$map2_fn(helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
                    }
                    else {
                        return $elm$bytes$Bytes$Decode$map_fn(function (a) {
                            return $elm$bytes$Bytes$Decode$Done(_Utils_ap(string, $danfishgold$base64_bytes$Decode$bitsToChars_fn(a << 16, 2)));
                        }, $elm$bytes$Bytes$Decode$unsignedInt8);
                    }
                }
            }
        }
    };
    var $danfishgold$base64_bytes$Decode$decoder = function (width) {
        return $elm$bytes$Bytes$Decode$loop_fn({ e6: width, fg: "" }, $danfishgold$base64_bytes$Decode$loopHelp);
    };
    var $elm$bytes$Bytes$width = _Bytes_width;
    var $danfishgold$base64_bytes$Decode$fromBytes = function (bytes) {
        return $elm$bytes$Bytes$Decode$decode_fn($danfishgold$base64_bytes$Decode$decoder($elm$bytes$Bytes$width(bytes)), bytes);
    };
    var $danfishgold$base64_bytes$Base64$fromBytes = $danfishgold$base64_bytes$Decode$fromBytes;
    var $dillonkearns$elm_pages$BackendTask$fromResult = function (result) {
        if (!result.$) {
            var okValue = result.a;
            return $dillonkearns$elm_pages$BackendTask$succeed(okValue);
        }
        else {
            var error = result.a;
            return $dillonkearns$elm_pages$BackendTask$fail(error);
        }
    };
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $dillonkearns$elm_pages$RequestsAndPending$Response_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$RequestsAndPending$Response = F2($dillonkearns$elm_pages$RequestsAndPending$Response_fn);
    var $dillonkearns$elm_pages$RequestsAndPending$BytesBody = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$RequestsAndPending$JsonBody = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$RequestsAndPending$StringBody = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$RequestsAndPending$WhateverBody = { $: 3 };
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
    var $danfishgold$base64_bytes$Encode$isValidChar = function (c) {
        if ($elm$core$Char$isAlphaNum(c)) {
            return true;
        }
        else {
            switch (c) {
                case "+":
                    return true;
                case "/":
                    return true;
                default:
                    return false;
            }
        }
    };
    var $elm$bytes$Bytes$Encode$Seq_fn = function (a, b) {
        return { $: 8, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$Seq = F2($elm$bytes$Bytes$Encode$Seq_fn);
    var $elm$bytes$Bytes$Encode$getWidths_fn = function (width, builders) {
        getWidths: while (true) {
            if (!builders.b) {
                return width;
            }
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b), $temp$builders = bs;
                width = $temp$width;
                builders = $temp$builders;
                continue getWidths;
            }
        }
    }, $elm$bytes$Bytes$Encode$getWidths = F2($elm$bytes$Bytes$Encode$getWidths_fn);
    var $elm$bytes$Bytes$Encode$sequence = function (builders) {
        return $elm$bytes$Bytes$Encode$Seq_fn($elm$bytes$Bytes$Encode$getWidths_fn(0, builders), builders);
    };
    var $danfishgold$base64_bytes$Encode$unsafeConvertChar = function (_char) {
        var key = $elm$core$Char$toCode(_char);
        if ((key >= 65) && (key <= 90)) {
            return key - 65;
        }
        else {
            if ((key >= 97) && (key <= 122)) {
                return (key - 97) + 26;
            }
            else {
                if ((key >= 48) && (key <= 57)) {
                    return ((key - 48) + 26) + 26;
                }
                else {
                    switch (_char) {
                        case "+":
                            return 62;
                        case "/":
                            return 63;
                        default:
                            return -1;
                    }
                }
            }
        }
    };
    var $elm$bytes$Bytes$Encode$U16_fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$U16 = F2($elm$bytes$Bytes$Encode$U16_fn);
    var $elm$bytes$Bytes$Encode$unsignedInt16 = $elm$bytes$Bytes$Encode$U16;
    var $elm$bytes$Bytes$Encode$U8 = function (a) {
        return { $: 3, a: a };
    };
    var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
    var $danfishgold$base64_bytes$Encode$encodeCharacters_fn = function (a, b, c, d) {
        if ($danfishgold$base64_bytes$Encode$isValidChar(a) && $danfishgold$base64_bytes$Encode$isValidChar(b)) {
            var n2 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(b);
            var n1 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(a);
            if ("=" === d) {
                if ("=" === c) {
                    var n = (n1 << 18) | (n2 << 12);
                    var b1 = n >> 16;
                    return $elm$core$Maybe$Just($elm$bytes$Bytes$Encode$unsignedInt8(b1));
                }
                else {
                    if ($danfishgold$base64_bytes$Encode$isValidChar(c)) {
                        var n3 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(c);
                        var n = ((n1 << 18) | (n2 << 12)) | (n3 << 6);
                        var combined = n >> 8;
                        return $elm$core$Maybe$Just($elm$bytes$Bytes$Encode$U16_fn(1, combined));
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }
            }
            else {
                if ($danfishgold$base64_bytes$Encode$isValidChar(c) && $danfishgold$base64_bytes$Encode$isValidChar(d)) {
                    var n4 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(d);
                    var n3 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(c);
                    var n = ((n1 << 18) | (n2 << 12)) | ((n3 << 6) | n4);
                    var combined = n >> 8;
                    var b3 = n;
                    return $elm$core$Maybe$Just($elm$bytes$Bytes$Encode$sequence(_List_fromArray([
                        $elm$bytes$Bytes$Encode$U16_fn(1, combined),
                        $elm$bytes$Bytes$Encode$unsignedInt8(b3)
                    ])));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $danfishgold$base64_bytes$Encode$encodeCharacters = F4($danfishgold$base64_bytes$Encode$encodeCharacters_fn);
    var $danfishgold$base64_bytes$Encode$encodeChunks_fn = function (input, accum) {
        encodeChunks: while (true) {
            var _v0 = $elm$core$String$toList($elm$core$String$left_fn(4, input));
            _v0$4: while (true) {
                if (!_v0.b) {
                    return $elm$core$Maybe$Just(accum);
                }
                else {
                    if (_v0.b.b) {
                        if (_v0.b.b.b) {
                            if (_v0.b.b.b.b) {
                                if (!_v0.b.b.b.b.b) {
                                    var a = _v0.a;
                                    var _v1 = _v0.b;
                                    var b = _v1.a;
                                    var _v2 = _v1.b;
                                    var c = _v2.a;
                                    var _v3 = _v2.b;
                                    var d = _v3.a;
                                    var _v4 = $danfishgold$base64_bytes$Encode$encodeCharacters_fn(a, b, c, d);
                                    if (!_v4.$) {
                                        var enc = _v4.a;
                                        var $temp$input = $elm$core$String$dropLeft_fn(4, input), $temp$accum = _List_Cons(enc, accum);
                                        input = $temp$input;
                                        accum = $temp$accum;
                                        continue encodeChunks;
                                    }
                                    else {
                                        return $elm$core$Maybe$Nothing;
                                    }
                                }
                                else {
                                    break _v0$4;
                                }
                            }
                            else {
                                var a = _v0.a;
                                var _v5 = _v0.b;
                                var b = _v5.a;
                                var _v6 = _v5.b;
                                var c = _v6.a;
                                var _v7 = $danfishgold$base64_bytes$Encode$encodeCharacters_fn(a, b, c, "=");
                                if (_v7.$ === 1) {
                                    return $elm$core$Maybe$Nothing;
                                }
                                else {
                                    var enc = _v7.a;
                                    return $elm$core$Maybe$Just(_List_Cons(enc, accum));
                                }
                            }
                        }
                        else {
                            var a = _v0.a;
                            var _v8 = _v0.b;
                            var b = _v8.a;
                            var _v9 = $danfishgold$base64_bytes$Encode$encodeCharacters_fn(a, b, "=", "=");
                            if (_v9.$ === 1) {
                                return $elm$core$Maybe$Nothing;
                            }
                            else {
                                var enc = _v9.a;
                                return $elm$core$Maybe$Just(_List_Cons(enc, accum));
                            }
                        }
                    }
                    else {
                        break _v0$4;
                    }
                }
            }
            return $elm$core$Maybe$Nothing;
        }
    }, $danfishgold$base64_bytes$Encode$encodeChunks = F2($danfishgold$base64_bytes$Encode$encodeChunks_fn);
    var $danfishgold$base64_bytes$Encode$encoder = function (string) {
        return $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence), $danfishgold$base64_bytes$Encode$encodeChunks_fn(string, _List_Nil));
    };
    var $danfishgold$base64_bytes$Encode$toBytes = function (string) {
        return $elm$core$Maybe$map_fn($elm$bytes$Bytes$Encode$encode, $danfishgold$base64_bytes$Encode$encoder(string));
    };
    var $danfishgold$base64_bytes$Base64$toBytes = $danfishgold$base64_bytes$Encode$toBytes;
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $dillonkearns$elm_pages$RequestsAndPending$bodyDecoder = _Json_andThen_fn(function (bodyKind) {
        return _Json_decodeField_fn("body", function () {
            switch (bodyKind) {
                case "bytes":
                    return _Json_andThen_fn(function (base64String) {
                        return $elm$core$Maybe$withDefault_fn($elm$json$Json$Decode$fail("Couldn't parse base64 string into Bytes."), $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$RequestsAndPending$BytesBody, $elm$json$Json$Decode$succeed), $danfishgold$base64_bytes$Base64$toBytes(base64String)));
                    }, $elm$json$Json$Decode$string);
                case "string":
                    return _Json_map1_fn($dillonkearns$elm_pages$RequestsAndPending$StringBody, $elm$json$Json$Decode$string);
                case "json":
                    return _Json_map1_fn($dillonkearns$elm_pages$RequestsAndPending$JsonBody, $elm$json$Json$Decode$value);
                case "whatever":
                    return $elm$json$Json$Decode$succeed($dillonkearns$elm_pages$RequestsAndPending$WhateverBody);
                default:
                    return $elm$json$Json$Decode$fail("Unexpected bodyKind.");
            }
        }());
    }, _Json_decodeField_fn("bodyKind", $elm$json$Json$Decode$string));
    var $dillonkearns$elm_pages$RequestsAndPending$RawResponse_fn = function (statusCode, statusText, headers, url) {
        return { jo: headers, _: statusCode, aj: statusText, kG: url };
    }, $dillonkearns$elm_pages$RequestsAndPending$RawResponse = F4($dillonkearns$elm_pages$RequestsAndPending$RawResponse_fn);
    var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
    var $elm$json$Json$Decode$dict = function (decoder) {
        return _Json_map1_fn($elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
    };
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $dillonkearns$elm_pages$RequestsAndPending$responseDecoder = _Json_map4_fn($dillonkearns$elm_pages$RequestsAndPending$RawResponse, _Json_decodeField_fn("statusCode", $elm$json$Json$Decode$int), _Json_decodeField_fn("statusText", $elm$json$Json$Decode$string), _Json_decodeField_fn("headers", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string)), _Json_decodeField_fn("url", $elm$json$Json$Decode$string));
    var $dillonkearns$elm_pages$RequestsAndPending$decoder = _Json_map2_fn($dillonkearns$elm_pages$RequestsAndPending$Response, $elm$json$Json$Decode$maybe($dillonkearns$elm_pages$RequestsAndPending$responseDecoder), $dillonkearns$elm_pages$RequestsAndPending$bodyDecoder);
    var $dillonkearns$elm_pages$RequestsAndPending$NetworkError = 0;
    var $dillonkearns$elm_pages$RequestsAndPending$Timeout = 1;
    var $dillonkearns$elm_pages$RequestsAndPending$errorDecoder = _Json_andThen_fn(function (errorCode) {
        switch (errorCode) {
            case "NetworkError":
                return $elm$json$Json$Decode$succeed(0);
            case "Timeout":
                return $elm$json$Json$Decode$succeed(1);
            default:
                return $elm$json$Json$Decode$fail("Unhandled error code.");
        }
    }, $elm$json$Json$Decode$string);
    var $elm$core$Result$toMaybe = function (result) {
        if (!result.$) {
            var v = result.a;
            return $elm$core$Maybe$Just(v);
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $dillonkearns$elm_pages$RequestsAndPending$get_fn = function (key, requestsAndPending) {
        return $elm$core$Result$toMaybe(_Json_run_fn(_Json_decodeField_fn(key, _Json_decodeField_fn("response", $elm$json$Json$Decode$oneOf(_List_fromArray([
            _Json_map1_fn($elm$core$Result$Err, _Json_decodeField_fn("elm-pages-internal-error", $dillonkearns$elm_pages$RequestsAndPending$errorDecoder)),
            _Json_map1_fn($elm$core$Result$Ok, $dillonkearns$elm_pages$RequestsAndPending$decoder)
        ])))), requestsAndPending));
    }, $dillonkearns$elm_pages$RequestsAndPending$get = F2($dillonkearns$elm_pages$RequestsAndPending$get_fn);
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn = function (typeName, otherFields) {
        return $elm$json$Json$Encode$object(_List_Cons(_Utils_Tuple2("type", $elm$json$Json$Encode$string(typeName)), otherFields));
    }, $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType = F2($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn);
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode = function (body) {
        switch (body.$) {
            case 0:
                return $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn("empty", _List_Nil);
            case 1:
                var content = body.b;
                return $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn("string", _List_fromArray([
                    _Utils_Tuple2("content", $elm$json$Json$Encode$string(content))
                ]));
            case 2:
                var content = body.a;
                return $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn("json", _List_fromArray([
                    _Utils_Tuple2("content", content)
                ]));
            default:
                var content = body.b;
                return $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType_fn("bytes", _List_fromArray([
                    _Utils_Tuple2("content", $elm$json$Json$Encode$string($elm$core$Maybe$withDefault_fn("", $danfishgold$base64_bytes$Base64$fromBytes(content))))
                ]));
        }
    };
    var $elm$core$Bitwise$xor = _Bitwise_xor;
    var $robinheghan$fnv1a$FNV1a$hasher_fn = function (_byte, hashValue) {
        var mixed = _byte ^ hashValue;
        return ((((mixed + (mixed << 1)) + (mixed << 4)) + (mixed << 7)) + (mixed << 8)) + (mixed << 24);
    }, $robinheghan$fnv1a$FNV1a$hasher = F2($robinheghan$fnv1a$FNV1a$hasher_fn);
    var $robinheghan$fnv1a$FNV1a$utf32ToUtf8_fn = function (_char, acc) {
        var _byte = $elm$core$Char$toCode(_char);
        return (_byte < 128) ? $robinheghan$fnv1a$FNV1a$hasher_fn(_byte, acc) : ((_byte < 2048) ? $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & _byte), $robinheghan$fnv1a$FNV1a$hasher_fn(192 | (_byte >>> 6), acc)) : ((_byte < 65536) ? $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & _byte), $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & (_byte >>> 6)), $robinheghan$fnv1a$FNV1a$hasher_fn(224 | (_byte >>> 12), acc))) : $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & _byte), $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & (_byte >>> 6)), $robinheghan$fnv1a$FNV1a$hasher_fn(128 | (63 & (_byte >>> 12)), $robinheghan$fnv1a$FNV1a$hasher_fn(240 | (_byte >>> 18), acc))))));
    }, $robinheghan$fnv1a$FNV1a$utf32ToUtf8 = F2($robinheghan$fnv1a$FNV1a$utf32ToUtf8_fn);
    var $robinheghan$fnv1a$FNV1a$hashWithSeed_fn = function (str, seed) {
        return _String_foldl_fn($robinheghan$fnv1a$FNV1a$utf32ToUtf8, seed, str) >>> 0;
    }, $robinheghan$fnv1a$FNV1a$hashWithSeed = F2($robinheghan$fnv1a$FNV1a$hashWithSeed_fn);
    var $robinheghan$fnv1a$FNV1a$initialSeed = 2166136261;
    var $robinheghan$fnv1a$FNV1a$hash = function (str) {
        return $robinheghan$fnv1a$FNV1a$hashWithSeed_fn(str, $robinheghan$fnv1a$FNV1a$initialSeed);
    };
    var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader = function (_v0) {
        var name = _v0.a;
        var value = _v0.b;
        return $elm$json$Json$Encode$string(name + (": " + value));
    };
    var $elm$json$Json$Encode$list_fn = function (func, entries) {
        return _Json_wrap($elm$core$List$foldl_fn(_Json_addEntry(func), _Json_emptyArray(0), entries));
    }, $elm$json$Json$Encode$list = F2($elm$json$Json$Encode$list_fn);
    var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hash = function (requestDetails) {
        return $elm$core$String$fromInt($robinheghan$fnv1a$FNV1a$hash(_Json_encode_fn(0, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("method", $elm$json$Json$Encode$string(requestDetails.gi)),
            _Utils_Tuple2("url", $elm$json$Json$Encode$string(requestDetails.kG)),
            _Utils_Tuple2("headers", $elm$json$Json$Encode$list_fn($dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader, requestDetails.jo)),
            _Utils_Tuple2("body", $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode(requestDetails.iL))
        ])))));
    };
    var $dillonkearns$elm_pages$BackendTask$mapError_fn = function (mapFn, requestInfo) {
        if (requestInfo.$ === 1) {
            var value = requestInfo.a;
            return $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute($elm$core$Result$mapError_fn(mapFn, value));
        }
        else {
            var urls = requestInfo.a;
            var lookupFn = requestInfo.b;
            return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn(urls, A2($dillonkearns$elm_pages$BackendTask$mapLookupFnError, mapFn, lookupFn));
        }
    }, $dillonkearns$elm_pages$BackendTask$mapError = F2($dillonkearns$elm_pages$BackendTask$mapError_fn);
    var $dillonkearns$elm_pages$BackendTask$mapLookupFnError_fn = function (fn, lookupFn, maybeMock, requests) {
        return $dillonkearns$elm_pages$BackendTask$mapError_fn(fn, A2(lookupFn, maybeMock, requests));
    }, $dillonkearns$elm_pages$BackendTask$mapLookupFnError_fn_unwrapped = function (fn, lookupFn, maybeMock, requests) {
        return $dillonkearns$elm_pages$BackendTask$mapError_fn(fn, lookupFn(maybeMock, requests));
    }, $dillonkearns$elm_pages$BackendTask$mapLookupFnError = F4($dillonkearns$elm_pages$BackendTask$mapLookupFnError_fn);
    var $dillonkearns$elm_pages$FatalError$recoverable_fn = function (info, value) {
        return {
            jd: $dillonkearns$elm_pages$FatalError$build(info),
            gu: value
        };
    }, $dillonkearns$elm_pages$FatalError$recoverable = F2($dillonkearns$elm_pages$FatalError$recoverable_fn);
    var $dillonkearns$elm_pages$BackendTask$Http$toResultThing = function (_v0) {
        toResultThing: while (true) {
            var expect = _v0.a;
            var body = _v0.b;
            var maybeResponse = _v0.c;
            var _v1 = _Utils_Tuple3(expect, body, maybeResponse);
            _v1$5: while (true) {
                switch (_v1.a.$) {
                    case 4:
                        if (!_v1.c.$) {
                            var toExpect = _v1.a.a;
                            var rawResponse = _v1.c.a;
                            var asMetadata = { jo: rawResponse.jo, _: rawResponse._, aj: rawResponse.aj, kG: rawResponse.kG };
                            var $temp$_v0 = _Utils_Tuple3(toExpect(asMetadata), body, maybeResponse);
                            _v0 = $temp$_v0;
                            continue toResultThing;
                        }
                        else {
                            break _v1$5;
                        }
                    case 0:
                        if (_v1.b.$ === 2) {
                            var decoder = _v1.a.a;
                            var json = _v1.b.a;
                            return $elm$core$Result$mapError_fn(function (error) {
                                return $dillonkearns$elm_pages$BackendTask$Http$BadBody_fn($elm$core$Maybe$Just(error), $elm$json$Json$Decode$errorToString(error));
                            }, _Json_run_fn(decoder, json));
                        }
                        else {
                            break _v1$5;
                        }
                    case 1:
                        if (_v1.b.$ === 1) {
                            var mapStringFn = _v1.a.a;
                            var string = _v1.b.a;
                            return $elm$core$Result$Ok(mapStringFn(string));
                        }
                        else {
                            break _v1$5;
                        }
                    case 2:
                        if (!_v1.b.$) {
                            var bytesDecoder = _v1.a.a;
                            var rawBytes = _v1.b.a;
                            return $elm$core$Result$fromMaybe_fn($dillonkearns$elm_pages$BackendTask$Http$BadBody_fn($elm$core$Maybe$Nothing, "Bytes decoding failed."), $elm$bytes$Bytes$Decode$decode_fn(bytesDecoder, rawBytes));
                        }
                        else {
                            break _v1$5;
                        }
                    default:
                        if (_v1.b.$ === 3) {
                            var whateverValue = _v1.a.a;
                            var _v2 = _v1.b;
                            return $elm$core$Result$Ok(whateverValue);
                        }
                        else {
                            break _v1$5;
                        }
                }
            }
            return $elm$core$Result$Err($dillonkearns$elm_pages$BackendTask$Http$BadBody_fn($elm$core$Maybe$Nothing, "Unexpected combination, internal error"));
        }
    };
    var $dillonkearns$elm_pages$BackendTask$Http$requestRaw_fn = function (request__, expect) {
        var request_ = {
            iL: request__.iL,
            et: request__.et,
            hf: _List_Nil,
            hh: $elm$core$Dict$empty,
            jo: _List_Cons(_Utils_Tuple2("elm-pages-internal", $dillonkearns$elm_pages$BackendTask$Http$expectToString(expect)), request__.jo),
            gi: request__.gi,
            kb: false,
            kG: request__.kG
        };
        return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request_fn(_List_fromArray([request_]), F2(function (maybeMockResolver, rawResponseDict) {
            return $dillonkearns$elm_pages$BackendTask$mapError_fn(function (error) {
                return $dillonkearns$elm_pages$FatalError$recoverable_fn($dillonkearns$elm_pages$BackendTask$Http$errorToString(error), error);
            }, $dillonkearns$elm_pages$BackendTask$fromResult($elm$core$Result$andThen_fn(function (_v4) {
                var maybeResponse = _v4.a;
                var body = _v4.b;
                var maybeBadResponse = function () {
                    if (!maybeResponse.$) {
                        var response = maybeResponse.a;
                        if (!((response._ >= 200) && (response._ < 300))) {
                            switch (body.$) {
                                case 1:
                                    var s = body.a;
                                    return $elm$core$Maybe$Just($dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn({ jo: response.jo, _: response._, aj: response.aj, kG: response.kG }, s));
                                case 0:
                                    var bytes = body.a;
                                    return $elm$core$Maybe$Just($dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn({ jo: response.jo, _: response._, aj: response.aj, kG: response.kG }, $elm$core$Maybe$withDefault_fn("", $danfishgold$base64_bytes$Base64$fromBytes(bytes))));
                                case 2:
                                    var value = body.a;
                                    return $elm$core$Maybe$Just($dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn({ jo: response.jo, _: response._, aj: response.aj, kG: response.kG }, _Json_encode_fn(0, value)));
                                default:
                                    return $elm$core$Maybe$Just($dillonkearns$elm_pages$BackendTask$Http$BadStatus_fn({ jo: response.jo, _: response._, aj: response.aj, kG: response.kG }, ""));
                            }
                        }
                        else {
                            return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                if (!maybeBadResponse.$) {
                    var badResponse = maybeBadResponse.a;
                    return $elm$core$Result$Err(badResponse);
                }
                else {
                    return $dillonkearns$elm_pages$BackendTask$Http$toResultThing(_Utils_Tuple3(expect, body, maybeResponse));
                }
            }, function (maybeResponse) {
                if (maybeResponse.$ === 1) {
                    return $elm$core$Result$Err($dillonkearns$elm_pages$BackendTask$Http$BadBody_fn($elm$core$Maybe$Nothing, "INTERNAL ERROR - expected request " + request_.kG));
                }
                else {
                    if (!maybeResponse.a.$) {
                        var rawResponse = maybeResponse.a.a;
                        return $elm$core$Result$Ok(rawResponse);
                    }
                    else {
                        if (!maybeResponse.a.a) {
                            var _v2 = maybeResponse.a.a;
                            return $elm$core$Result$Err($dillonkearns$elm_pages$BackendTask$Http$NetworkError);
                        }
                        else {
                            var _v3 = maybeResponse.a.a;
                            return $elm$core$Result$Err($dillonkearns$elm_pages$BackendTask$Http$Timeout);
                        }
                    }
                }
            }(function () {
                if (!maybeMockResolver.$) {
                    var mockResolver = maybeMockResolver.a;
                    return $elm$core$Maybe$map_fn($elm$core$Result$Ok, mockResolver(request_));
                }
                else {
                    return $dillonkearns$elm_pages$RequestsAndPending$get_fn($dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(request_), rawResponseDict);
                }
            }()))));
        }));
    }, $dillonkearns$elm_pages$BackendTask$Http$requestRaw = F2($dillonkearns$elm_pages$BackendTask$Http$requestRaw_fn);
    var $dillonkearns$elm_pages$BackendTask$Http$request_fn = function (request__, expect) {
        var request_ = {
            iL: request__.iL,
            et: $elm$core$Maybe$Just($dillonkearns$elm_pages$BackendTask$Http$encodeOptions({ cC: $elm$core$Maybe$Nothing, cD: $elm$core$Maybe$Nothing, kh: request__.kh, kD: request__.kD })),
            hf: _List_Nil,
            hh: $elm$core$Dict$empty,
            jo: request__.jo,
            gi: request__.gi,
            kb: false,
            kG: request__.kG
        };
        return $dillonkearns$elm_pages$BackendTask$Http$requestRaw_fn(request_, expect);
    }, $dillonkearns$elm_pages$BackendTask$Http$request = F2($dillonkearns$elm_pages$BackendTask$Http$request_fn);
    var $dillonkearns$elm_pages$BackendTask$Internal$Request$request = function (params) {
        var expect = params.jb;
        var body = params.iL;
        var name = params.jM;
        return $dillonkearns$elm_pages$BackendTask$onError_fn(function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$Internal$Request$request(params);
        }, $dillonkearns$elm_pages$BackendTask$Http$request_fn({ iL: body, jo: _List_Nil, gi: "GET", kh: $elm$core$Maybe$Nothing, kD: $elm$core$Maybe$Nothing, kG: "elm-pages-internal://" + name }, expect));
    };
    var $dillonkearns$elm_pages$BackendTask$Internal$Glob$run_fn = function (fileStats, rawInput, captures, _v0) {
        var pattern = _v0.a;
        var applyCapture = _v0.b;
        return {
            d1: A3(applyCapture, fileStats, rawInput, $elm$core$List$reverse(captures)).a,
            gr: pattern
        };
    }, $dillonkearns$elm_pages$BackendTask$Internal$Glob$run = F4($dillonkearns$elm_pages$BackendTask$Internal$Glob$run_fn);
    var $dillonkearns$elm_pages$BackendTask$Internal$Glob$toPattern = function (_v0) {
        var pattern = _v0.a;
        return pattern;
    };
    var $dillonkearns$elm_pages$BackendTask$Glob$toBackendTaskWithOptions_fn = function (options, glob) {
        var pattern = $dillonkearns$elm_pages$BackendTask$Internal$Glob$toPattern(glob);
        return $dillonkearns$elm_pages$BackendTask$onError_fn(function (_v1) {
            return $dillonkearns$elm_pages$BackendTask$succeed(_List_Nil);
        }, $dillonkearns$elm_pages$BackendTask$Internal$Request$request({
            iL: $dillonkearns$elm_pages$BackendTask$Http$jsonBody($elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("pattern", $elm$json$Json$Encode$string(_String_startsWith_fn("./", pattern) ? $elm$core$String$dropLeft_fn(2, pattern) : pattern)),
                _Utils_Tuple2("options", $dillonkearns$elm_pages$BackendTask$Glob$encodeOptions(options))
            ]))),
            jb: $dillonkearns$elm_pages$BackendTask$Http$expectJson(_Json_map1_fn(function (rawGlob) {
                return $elm$core$List$map_fn(function (_v0) {
                    var captures = _v0.g5;
                    var fullPath = _v0.cT;
                    var fileStats = _v0.hq;
                    return $dillonkearns$elm_pages$BackendTask$Internal$Glob$run_fn(fileStats, fullPath, captures, glob).d1;
                }, rawGlob);
            }, $elm$json$Json$Decode$list(_Json_map3_fn(F3(function (fileStats, fullPath, captures) {
                return { g5: captures, hq: fileStats, cT: fullPath };
            }), _Json_decodeField_fn("fileStats", $elm$json$Json$Decode$maybe($dillonkearns$elm_pages$BackendTask$Glob$fileStatsDecoder)), _Json_decodeField_fn("fullPath", $elm$json$Json$Decode$string), _Json_decodeField_fn("captures", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)))))),
            jM: "glob"
        }));
    }, $dillonkearns$elm_pages$BackendTask$Glob$toBackendTaskWithOptions = F2($dillonkearns$elm_pages$BackendTask$Glob$toBackendTaskWithOptions_fn);
    var $dillonkearns$elm_pages$BackendTask$Glob$toBackendTask = function (glob) {
        return $dillonkearns$elm_pages$BackendTask$Glob$toBackendTaskWithOptions_fn($dillonkearns$elm_pages$BackendTask$Glob$defaultOptions, glob);
    };
    var $dillonkearns$elm_pages$BackendTask$Glob$wildcard = $dillonkearns$elm_pages$BackendTask$Internal$Glob$Glob_fn("*", F3(function (_v0, _v1, captures) {
        if (captures.b) {
            var first = captures.a;
            var rest = captures.b;
            return _Utils_Tuple2(first, rest);
        }
        else {
            return _Utils_Tuple2("ERROR", _List_Nil);
        }
    }));
    var $author$project$Route$Article$Slug_$pages = $dillonkearns$elm_pages$BackendTask$Glob$toBackendTask($dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal(".md"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$wildcard, $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal("content/blog/"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0, $dillonkearns$elm_pages$BackendTask$Glob$succeed(F2(function (_v0, slug) {
        return { cl: slug };
    })))))));
    var $author$project$Route$Article$Slug_$view_fn = function (app, shared) {
        return {
            iL: _List_fromArray([
                $elm$html$Html$h2_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$text("New Page")
                ]))
            ]),
            dz: "Article.Slug_"
        };
    }, $author$project$Route$Article$Slug_$view = F2($author$project$Route$Article$Slug_$view_fn);
    var $author$project$Route$Article$Slug_$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$Article$Slug_$view }, $author$project$RouteBuilder$preRender({
        hc: function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        },
        bi: $author$project$Route$Article$Slug_$head,
        j4: $author$project$Route$Article$Slug_$pages
    }));
    var $author$project$Route$Blog$head = function (app) {
        return $dillonkearns$elm_pages$Head$Seo$website($dillonkearns$elm_pages$Head$Seo$summary($author$project$Shared$seo));
    };
    var $author$project$Route$Blog$pages = $dillonkearns$elm_pages$BackendTask$Glob$toBackendTask($dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal(".md"), $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$wildcard, $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal("content/blog/"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0, $dillonkearns$elm_pages$BackendTask$Glob$succeed(function (_v0) {
        return {};
    }))))));
    var $author$project$Route$Blog$view_fn = function (app, shared) {
        return { iL: _List_Nil, dz: "Blog" };
    }, $author$project$Route$Blog$view = F2($author$project$Route$Blog$view_fn);
    var $author$project$Route$Blog$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$Blog$view }, $author$project$RouteBuilder$preRender({
        hc: function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        },
        bi: $author$project$Route$Blog$head,
        j4: $author$project$Route$Blog$pages
    }));
    var $author$project$Route$Blog$Slug_$head = function (app) {
        var seo = $author$project$Shared$seo;
        return $dillonkearns$elm_pages$Head$Seo$website($dillonkearns$elm_pages$Head$Seo$summary(_Utils_update(seo, {
            i$: $author$project$BlogPost$omitAndTrim(app.hc.eX.dN),
            dz: app.hc.eX.dz
        })));
    };
    var $author$project$Route$Blog$Slug_$pages = $dillonkearns$elm_pages$BackendTask$Glob$toBackendTask($dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal(".md"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$wildcard, $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal("content/blog/"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0, $dillonkearns$elm_pages$BackendTask$Glob$succeed(F2(function (_v0, slug) {
        return { cl: slug };
    })))))));
    var $elm$html$Html$a = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "a"), $elm$html$Html$a_fn = $elm$html$Html$a.a2;
    var $elm$html$Html$article = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "article"), $elm$html$Html$article_fn = $elm$html$Html$article.a2;
    var $elm$html$Html$Attributes$stringProperty_fn = function (key, string) {
        return _VirtualDom_property_fn(key, $elm$json$Json$Encode$string(string));
    }, $elm$html$Html$Attributes$stringProperty = F2($elm$html$Html$Attributes$stringProperty_fn);
    var $elm$html$Html$Attributes$class_a0 = "className", $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty($elm$html$Html$Attributes$class_a0);
    var $elm$html$Html$Attributes$alt_a0 = "alt", $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty($elm$html$Html$Attributes$alt_a0);
    var $elm$html$Html$blockquote = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "blockquote"), $elm$html$Html$blockquote_fn = $elm$html$Html$blockquote.a2;
    var $elm$html$Html$br = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "br"), $elm$html$Html$br_fn = $elm$html$Html$br.a2;
    var $elm$html$Html$code = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "code"), $elm$html$Html$code_fn = $elm$html$Html$code.a2;
    var $elm$html$Html$div = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "div"), $elm$html$Html$div_fn = $elm$html$Html$div.a2;
    var $elm$html$Html$em = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "em"), $elm$html$Html$em_fn = $elm$html$Html$em.a2;
    var $elm$html$Html$h1 = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "h1"), $elm$html$Html$h1_fn = $elm$html$Html$h1.a2;
    var $elm$html$Html$h3 = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "h3"), $elm$html$Html$h3_fn = $elm$html$Html$h3.a2;
    var $elm$html$Html$h4 = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "h4"), $elm$html$Html$h4_fn = $elm$html$Html$h4.a2;
    var $elm$html$Html$hr = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "hr"), $elm$html$Html$hr_fn = $elm$html$Html$hr.a2;
    var $elm$html$Html$Attributes$href = function (url) {
        return $elm$html$Html$Attributes$stringProperty_fn("href", _VirtualDom_noJavaScriptUri(url));
    };
    var $elm$html$Html$img = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "img"), $elm$html$Html$img_fn = $elm$html$Html$img.a2;
    var $elm$html$Html$li = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "li"), $elm$html$Html$li_fn = $elm$html$Html$li.a2;
    var $elm$html$Html$ol = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "ol"), $elm$html$Html$ol_fn = $elm$html$Html$ol.a2;
    var $elm$html$Html$p = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "p"), $elm$html$Html$p_fn = $elm$html$Html$p.a2;
    var $elm$html$Html$pre = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "pre"), $elm$html$Html$pre_fn = $elm$html$Html$pre.a2;
    var $elm$html$Html$span = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "span"), $elm$html$Html$span_fn = $elm$html$Html$span.a2;
    var $elm$html$Html$Attributes$src = function (url) {
        return $elm$html$Html$Attributes$stringProperty_fn("src", _VirtualDom_noJavaScriptOrHtmlUri(url));
    };
    var $elm$html$Html$strong = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "strong"), $elm$html$Html$strong_fn = $elm$html$Html$strong.a2;
    var $elm$html$Html$table = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "table"), $elm$html$Html$table_fn = $elm$html$Html$table.a2;
    var $elm$html$Html$tbody = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "tbody"), $elm$html$Html$tbody_fn = $elm$html$Html$tbody.a2;
    var $elm$html$Html$td = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "td"), $elm$html$Html$td_fn = $elm$html$Html$td.a2;
    var $elm$html$Html$th = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "th"), $elm$html$Html$th_fn = $elm$html$Html$th.a2;
    var $elm$html$Html$thead = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "thead"), $elm$html$Html$thead_fn = $elm$html$Html$thead.a2;
    var $elm$html$Html$tr = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "tr"), $elm$html$Html$tr_fn = $elm$html$Html$tr.a2;
    var $elm$html$Html$ul = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "ul"), $elm$html$Html$ul_fn = $elm$html$Html$ul.a2;
    var $author$project$MarkdownRenderer$detailRenderer = {
        g2: function (children) {
            return $elm$html$Html$blockquote_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "border-l-4 border-purple-600/10 grid grid-flow-row pl-4 italic")
            ]), children);
        },
        g8: function (_v0) {
            var body = _v0.iL;
            return $elm$html$Html$div_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "relative rounded-lg bg-purple-50 border border-purple-100 shadow-sm overflow-hidden")
            ]), _List_fromArray([
                $elm$html$Html$div_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "flex items-center gap-2 px-4 py-3 border-b border-purple-100")
                ]), _List_fromArray([
                    $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "w-3 h-3 rounded-full bg-violet-300")
                    ]), _List_Nil),
                    $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "w-3 h-3 rounded-full bg-purple-300")
                    ]), _List_Nil),
                    $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "w-3 h-3 rounded-full bg-indigo-300")
                    ]), _List_Nil)
                ])),
                $elm$html$Html$pre_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "p-4 font-mono text-xs overflow-x-auto bg-gradient-to-br from-purple-50 to-violet-50 text-slate-700")
                ]), _List_fromArray([
                    $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text(body)
                    ]))
                ]))
            ]));
        },
        g9: function (txt) {
            return $elm$html$Html$code_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "bg-purple-50 border border-purple-100 px-2 py-1 rounded text-xs")
            ]), _List_fromArray([
                $elm$html$Html$text(txt)
            ]));
        },
        hg: function (children) {
            return $elm$html$Html$em_fn(_List_Nil, children);
        },
        hw: $elm$html$Html$br_fn(_List_Nil, _List_Nil),
        hx: function (_v1) {
            var children = _v1.g7;
            var level = _v1.jA;
            switch (level) {
                case 0:
                    return $elm$html$Html$h1_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-3xl mt-10 tracking-wide leading-relaxed text-stone-800")
                    ]), children);
                case 1:
                    return $elm$html$Html$h2_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-2xl mt-8 text-stone-800")
                    ]), children);
                case 2:
                    return $elm$html$Html$h3_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-xl mt-6 text-stone-700")
                    ]), children);
                default:
                    return $elm$html$Html$h4_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-lg mt-2 text-stone-700")
                    ]), children);
            }
        },
        hy: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
        hB: function (props) {
            return $elm$html$Html$img_fn(_List_fromArray([
                $elm$html$Html$Attributes$src(props.ky),
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$alt_a0, props.gY),
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "rounded-lg shadow-md")
            ]), _List_Nil);
        },
        hJ: F2(function (_v3, children) {
            var destination = _v3.fS;
            return $elm$html$Html$a_fn(_List_fromArray([
                $elm$html$Html$Attributes$href(destination),
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-blue-600 hover:underline visited:text-purple-400")
            ]), children);
        }),
        hT: F2(function (_v4, items) {
            return $elm$html$Html$ol_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "space-y-2 mt-2 pl-3 text-stone-600 text-xs")
            ]), $elm$core$List$indexedMap_fn_unwrapped(function (idx, item) {
                var _v5 = function () {
                    if (item.b) {
                        var head = item.a;
                        var tail = item.b;
                        return { cV: head, dv: tail };
                    }
                    else {
                        return {
                            cV: $elm$html$Html$text(""),
                            dv: _List_Nil
                        };
                    }
                }();
                var t = _v5.dv;
                var h = _v5.cV;
                return $elm$html$Html$li_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "relative pl-2 items-center")
                ]), _List_fromArray([
                    $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "relative grid grid-flow-col py-2 items-center justify-start group")
                    ]), _List_fromArray([
                        $elm$html$Html$span_fn(_List_fromArray([
                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "select-none absolute -left-1 -translate-x-full")
                        ]), _List_fromArray([
                            $elm$html$Html$text($elm$core$String$fromInt(idx + 1) + ".")
                        ])),
                        $elm$html$Html$span_fn(_List_Nil, _List_fromArray([h]))
                    ])),
                    $elm$html$Html$div_fn(_List_Nil, t)
                ]));
            }, items));
        }),
        hW: function (children) {
            return $elm$html$Html$p_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-xs leading-relaxed text-stone-600")
            ]), children);
        },
        h9: function (children) {
            return $elm$html$Html$span_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "line-through")
            ]), children);
        },
        ia: function (children) {
            return $elm$html$Html$strong_fn(_List_Nil, children);
        },
        ib: $elm$html$Html$table(_List_fromArray([
            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "min-w-full")
        ])),
        ic: $elm$html$Html$tbody(_List_Nil),
        id: F2(function (_v7, content) {
            return $elm$html$Html$td_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "py-2 px-4 border-b")
            ]), content);
        }),
        ie: $elm$html$Html$thead(_List_Nil),
        $8: F2(function (_v8, content) {
            return $elm$html$Html$th_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "py-2 px-4 border-b")
            ]), content);
        }),
        ig: $elm$html$Html$tr(_List_Nil),
        ii: $elm$html$Html$text,
        ik: $elm$html$Html$hr_fn(_List_fromArray([
            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "my-8 border-t border-stone-200")
        ]), _List_Nil),
        ir: function (items) {
            return $elm$html$Html$ul_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "space-y-2 mt-2 pl-3 text-stone-600 text-xs")
            ]), $elm$core$List$map_fn(function (_v9) {
                var task = _v9.a;
                var item = _v9.b;
                var _v10 = function () {
                    if (item.b) {
                        var head = item.a;
                        var tail = item.b;
                        return { cV: head, dv: tail };
                    }
                    else {
                        return {
                            cV: $elm$html$Html$text(""),
                            dv: _List_Nil
                        };
                    }
                }();
                var t = _v10.dv;
                var h = _v10.cV;
                return $elm$html$Html$li_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "relative pl-2")
                ]), _List_Cons($elm$html$Html$div_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "before:content-['\u2022'] before:font-light before:absolute before:-left-1 before:text-stone-600 grid grid-flow-col py-2 items-center justify-start group")
                ]), _List_fromArray([
                    $elm$html$Html$span_fn(_List_fromArray([
                        function () {
                            switch (task) {
                                case 0:
                                    return $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hidden");
                                case 1:
                                    return $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "mr-2 group-hover:opacity-80 transition-opacity flex items-center aspect-square h-3 border rounded-sm border-stone-400 bg-white");
                                default:
                                    return $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "mr-2 group-hover:opacity-80 transition-opacity flex items-center aspect-square h-3 border rounded-sm border-purple-400 bg-purple-600/30");
                            }
                        }()
                    ]), _List_Nil),
                    $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "")
                    ]), _List_fromArray([h]))
                ])), t));
            }, items));
        }
    };
    var $elm$html$Html$nav = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "nav"), $elm$html$Html$nav_fn = $elm$html$Html$nav.a2;
    var $author$project$BlogPost$viewPostDetail = function (_v0) {
        var around = _v0.iG;
        var post = _v0.eX;
        return $elm$html$Html$article_fn(_List_Nil, _List_fromArray([
            $elm$html$Html$h1_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-3xl mt-10 tracking-wide leading-relaxed text-stone-800")
            ]), _List_fromArray([
                $elm$html$Html$text(post.dz)
            ])),
            $elm$html$Html$div_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-xs text-stone-400 tracking-wider")
            ]), _List_fromArray([
                $elm$html$Html$text(A2($justinmimbs$date$Date$format, "yyyy\u5E74M\u6708d\u65E5", post.di))
            ])),
            function () {
                var _v1 = $elm$core$Result$andThen_fn(function (blocks) {
                    return $elm$core$Result$mapError_fn(function (_v3) {
                        return "Markdown rendering failed";
                    }, $dillonkearns$elm_markdown$Markdown$Renderer$render_fn($author$project$MarkdownRenderer$detailRenderer, blocks));
                }, $elm$core$Result$mapError_fn(function (_v2) {
                    return "Markdown parsing failed";
                }, $dillonkearns$elm_markdown$Markdown$Parser$parse(post.dN)));
                if (!_v1.$) {
                    var rendered = _v1.a;
                    return $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "gap-4 grid grid-flow-row")
                    ]), rendered);
                }
                else {
                    var error = _v1.a;
                    return $elm$html$Html$div_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-red-500")
                    ]), _List_fromArray([
                        $elm$html$Html$text(error)
                    ]));
                }
            }(),
            $elm$html$Html$nav_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "border-t border-stone-200 mt-16 pt-12 flex justify-between text-xs text-gray-500")
            ]), function () {
                var _v4 = around;
                var next = _v4.hO;
                var prev = _v4.hY;
                return _List_fromArray([
                    $elm$html$Html$a_fn(function () {
                        if (!prev.$) {
                            var slug = prev.a.cl;
                            return _List_fromArray([
                                $elm$html$Html$Attributes$href("/blog/" + slug),
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-black")
                            ]);
                        }
                        else {
                            return _List_fromArray([
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "pointer-events-none invisible")
                            ]);
                        }
                    }(), _List_fromArray([
                        $elm$html$Html$text("\u2190 \u524D\u306E\u8A18\u4E8B")
                    ])),
                    $elm$html$Html$a_fn(function () {
                        if (!next.$) {
                            var slug = next.a.cl;
                            return _List_fromArray([
                                $elm$html$Html$Attributes$href("/blog/" + slug),
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-black")
                            ]);
                        }
                        else {
                            return _List_fromArray([
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "pointer-events-none invisible")
                            ]);
                        }
                    }(), _List_fromArray([
                        $elm$html$Html$text("\u6B21\u306E\u8A18\u4E8B \u2192")
                    ]))
                ]);
            }())
        ]));
    };
    var $author$project$Route$Blog$Slug_$view_fn = function (app, _v0) {
        return {
            iL: _List_fromArray([
                $author$project$BlogPost$viewPostDetail(app.hc)
            ]),
            dz: app.hc.eX.dz
        };
    }, $author$project$Route$Blog$Slug_$view = F2($author$project$Route$Blog$Slug_$view_fn);
    var $author$project$Route$Blog$Slug_$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$Blog$Slug_$view }, $author$project$RouteBuilder$preRender({
        hc: function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        },
        bi: $author$project$Route$Blog$Slug_$head,
        j4: $author$project$Route$Blog$Slug_$pages
    }));
    var $author$project$Route$Index$head = function (_v0) {
        return $dillonkearns$elm_pages$Head$Seo$website($dillonkearns$elm_pages$Head$Seo$summary($author$project$Shared$seo));
    };
    var $author$project$Route$Index$pages = $dillonkearns$elm_pages$BackendTask$Glob$toBackendTask($dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal(".md"), $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$wildcard, $dillonkearns$elm_pages$BackendTask$Glob$match_fn($dillonkearns$elm_pages$BackendTask$Glob$literal("content/blog/"), $dillonkearns$elm_pages$BackendTask$Glob$capture_fn($dillonkearns$elm_pages$BackendTask$Glob$captureFilePath_a0, $dillonkearns$elm_pages$BackendTask$Glob$succeed(function (_v0) {
        return {};
    }))))));
    var $elm$html$Html$time = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "time"), $elm$html$Html$time_fn = $elm$html$Html$time.a2;
    var $author$project$BlogPost$viewPost = function (_v0) {
        var slug = _v0.cl;
        var post = _v0.eX;
        return $elm$html$Html$article_fn(_List_Nil, _List_fromArray([
            $elm$html$Html$time_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-xs tracking-wider text-stone-400")
            ]), _List_fromArray([
                $elm$html$Html$text(A2($justinmimbs$date$Date$format, "yyyy\u5E74M\u6708d\u65E5", post.di))
            ])),
            $elm$html$Html$h2_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "mt-1 text-base text-stone-900 tracking-wider leading-normal")
            ]), _List_fromArray([
                $elm$html$Html$a_fn(_List_fromArray([
                    $elm$html$Html$Attributes$href("/blog/" + slug),
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-stone-600")
                ]), _List_fromArray([
                    $elm$html$Html$text(post.dz)
                ]))
            ])),
            $elm$html$Html$p_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "mt-2 text-xs leading-relaxed text-stone-600")
            ]), _List_fromArray([
                $elm$html$Html$text($author$project$BlogPost$omitAndTrim(post.dN))
            ])),
            $elm$html$Html$div_fn(_List_fromArray([
                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "mt-4 text-xs")
            ]), _List_fromArray([
                $elm$html$Html$a_fn(_List_fromArray([
                    $elm$html$Html$Attributes$href("/blog/" + slug),
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-stone-400 transition-colors duration-500 hover:text-stone-800")
                ]), _List_fromArray([
                    $elm$html$Html$text("\u7D9A\u304D\u3092\u8AAD\u3080 \u2192")
                ]))
            ]))
        ]));
    };
    var $author$project$Route$Index$view_fn = function (app, _v0) {
        return {
            iL: $elm$core$List$map_fn($author$project$BlogPost$viewPost, app.hc.eq),
            dz: $author$project$Shared$title
        };
    }, $author$project$Route$Index$view = F2($author$project$Route$Index$view_fn);
    var $author$project$Route$Index$route = $author$project$RouteBuilder$buildNoState_fn({ E: $author$project$Route$Index$view }, $author$project$RouteBuilder$preRender({
        hc: function (_v0) {
            return $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString(""));
        },
        bi: $author$project$Route$Index$head,
        j4: $author$project$Route$Index$pages
    }));
    var $author$project$Main$action_fn = function (requestPayload, maybeRoute) {
        if (maybeRoute.$ === 1) {
            return $dillonkearns$elm_pages$BackendTask$succeed($dillonkearns$elm_pages$Server$Response$plainText("TODO"));
        }
        else {
            var justRoute = maybeRoute.a;
            switch (justRoute.$) {
                case 0:
                    var routeParams = justRoute.a;
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataArticle__Slug_), A2($author$project$Route$Article$Slug_$route.fs, requestPayload, routeParams));
                case 1:
                    var routeParams = justRoute.a;
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataBlog__Slug_), A2($author$project$Route$Blog$Slug_$route.fs, requestPayload, routeParams));
                case 2:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataAbout), A2($author$project$Route$About$route.fs, requestPayload, {}));
                case 3:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataArticle), A2($author$project$Route$Article$route.fs, requestPayload, {}));
                case 4:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataBlog), A2($author$project$Route$Blog$route.fs, requestPayload, {}));
                default:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$ActionDataIndex), A2($author$project$Route$Index$route.fs, requestPayload, {}));
            }
        }
    }, $author$project$Main$action = F2($author$project$Main$action_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadCompleteNew = function (a) {
        return { $: 8, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$LinkClicked = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$UrlChanged = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Msg$UserMsg = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg = function (a) {
        return { $: 2, a: a };
    };
    var $elm$browser$Browser$External = function (a) {
        return { $: 1, a: a };
    };
    var $elm$browser$Browser$Internal = function (a) {
        return { $: 0, a: a };
    };
    var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
    var $elm$url$Url$Http = 0;
    var $elm$url$Url$Https = 1;
    var $elm$url$Url$Url_fn = function (protocol, host, port_, path, query, fragment) {
        return { aW: fragment, eG: host, e: path, eW: port_, e$: protocol, a6: query };
    }, $elm$url$Url$Url = F6($elm$url$Url$Url_fn);
    var $elm$core$String$indexes = _String_indexes;
    var $elm$url$Url$chompBeforePath_fn = function (protocol, path, params, frag, str) {
        if ($elm$core$String$isEmpty(str) || _String_contains_fn("@", str)) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v0 = _String_indexes_fn(":", str);
            if (!_v0.b) {
                return $elm$core$Maybe$Just($elm$url$Url$Url_fn(protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
            }
            else {
                if (!_v0.b.b) {
                    var i = _v0.a;
                    var _v1 = $elm$core$String$toInt($elm$core$String$dropLeft_fn(i + 1, str));
                    if (_v1.$ === 1) {
                        return $elm$core$Maybe$Nothing;
                    }
                    else {
                        var port_ = _v1;
                        return $elm$core$Maybe$Just($elm$url$Url$Url_fn(protocol, $elm$core$String$left_fn(i, str), port_, path, params, frag));
                    }
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
        }
    }, $elm$url$Url$chompBeforePath = F5($elm$url$Url$chompBeforePath_fn);
    var $elm$url$Url$chompBeforeQuery_fn = function (protocol, params, frag, str) {
        if ($elm$core$String$isEmpty(str)) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v0 = _String_indexes_fn("/", str);
            if (!_v0.b) {
                return $elm$url$Url$chompBeforePath_fn(protocol, "/", params, frag, str);
            }
            else {
                var i = _v0.a;
                return $elm$url$Url$chompBeforePath_fn(protocol, $elm$core$String$dropLeft_fn(i, str), params, frag, $elm$core$String$left_fn(i, str));
            }
        }
    }, $elm$url$Url$chompBeforeQuery = F4($elm$url$Url$chompBeforeQuery_fn);
    var $elm$url$Url$chompBeforeFragment_fn = function (protocol, frag, str) {
        if ($elm$core$String$isEmpty(str)) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v0 = _String_indexes_fn("?", str);
            if (!_v0.b) {
                return $elm$url$Url$chompBeforeQuery_fn(protocol, $elm$core$Maybe$Nothing, frag, str);
            }
            else {
                var i = _v0.a;
                return $elm$url$Url$chompBeforeQuery_fn(protocol, $elm$core$Maybe$Just($elm$core$String$dropLeft_fn(i + 1, str)), frag, $elm$core$String$left_fn(i, str));
            }
        }
    }, $elm$url$Url$chompBeforeFragment = F3($elm$url$Url$chompBeforeFragment_fn);
    var $elm$url$Url$chompAfterProtocol_fn = function (protocol, str) {
        if ($elm$core$String$isEmpty(str)) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v0 = _String_indexes_fn("#", str);
            if (!_v0.b) {
                return $elm$url$Url$chompBeforeFragment_fn(protocol, $elm$core$Maybe$Nothing, str);
            }
            else {
                var i = _v0.a;
                return $elm$url$Url$chompBeforeFragment_fn(protocol, $elm$core$Maybe$Just($elm$core$String$dropLeft_fn(i + 1, str)), $elm$core$String$left_fn(i, str));
            }
        }
    }, $elm$url$Url$chompAfterProtocol = F2($elm$url$Url$chompAfterProtocol_fn);
    var $elm$url$Url$fromString = function (str) {
        return _String_startsWith_fn("http://", str) ? $elm$url$Url$chompAfterProtocol_fn(0, $elm$core$String$dropLeft_fn(7, str)) : (_String_startsWith_fn("https://", str) ? $elm$url$Url$chompAfterProtocol_fn(1, $elm$core$String$dropLeft_fn(8, str)) : $elm$core$Maybe$Nothing);
    };
    var $elm$core$Basics$never = function (_v0) {
        never: while (true) {
            var nvr = _v0;
            var $temp$_v0 = nvr;
            _v0 = $temp$_v0;
            continue never;
        }
    };
    var $elm$core$Task$Perform = $elm$core$Basics$identity;
    var $elm$core$Task$succeed = _Scheduler_succeed;
    var $elm$core$Task$init = $elm$core$Task$succeed(0);
    var $elm$core$Task$andThen = _Scheduler_andThen;
    var $elm$core$Task$map_fn = function (func, taskA) {
        return _Scheduler_andThen_fn(function (a) {
            return $elm$core$Task$succeed(func(a));
        }, taskA);
    }, $elm$core$Task$map = F2($elm$core$Task$map_fn);
    var $elm$core$Task$map2_fn = function (func, taskA, taskB) {
        return _Scheduler_andThen_fn(function (a) {
            return _Scheduler_andThen_fn(function (b) {
                return $elm$core$Task$succeed(A2(func, a, b));
            }, taskB);
        }, taskA);
    }, $elm$core$Task$map2_fn_unwrapped = function (func, taskA, taskB) {
        return _Scheduler_andThen_fn(function (a) {
            return _Scheduler_andThen_fn(function (b) {
                return $elm$core$Task$succeed(func(a, b));
            }, taskB);
        }, taskA);
    }, $elm$core$Task$map2 = F3($elm$core$Task$map2_fn);
    var $elm$core$Task$sequence = function (tasks) {
        return $elm$core$List$foldr_fn($elm$core$Task$map2($elm$core$List$cons), $elm$core$Task$succeed(_List_Nil), tasks);
    };
    var $elm$core$Platform$sendToApp = _Platform_sendToApp;
    var $elm$core$Task$spawnCmd_fn = function (router, _v0) {
        var task = _v0;
        return _Scheduler_spawn(_Scheduler_andThen_fn($elm$core$Platform$sendToApp(router), task));
    }, $elm$core$Task$spawnCmd = F2($elm$core$Task$spawnCmd_fn);
    var $elm$core$Task$onEffects_fn = function (router, commands, state) {
        return $elm$core$Task$map_fn(function (_v0) {
            return 0;
        }, $elm$core$Task$sequence($elm$core$List$map_fn($elm$core$Task$spawnCmd(router), commands)));
    }, $elm$core$Task$onEffects = F3($elm$core$Task$onEffects_fn);
    var $elm$core$Task$onSelfMsg_fn = function (_v0, _v1, _v2) {
        return $elm$core$Task$succeed(0);
    }, $elm$core$Task$onSelfMsg = F3($elm$core$Task$onSelfMsg_fn);
    var $elm$core$Task$cmdMap_fn = function (tagger, _v0) {
        var task = _v0;
        return $elm$core$Task$map_fn(tagger, task);
    }, $elm$core$Task$cmdMap = F2($elm$core$Task$cmdMap_fn);
    _Platform_effectManagers["Task"] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
    var $elm$core$Task$command = _Platform_leaf("Task");
    var $elm$core$Task$perform_fn = function (toMessage, task) {
        return $elm$core$Task$command($elm$core$Task$map_fn(toMessage, task));
    }, $elm$core$Task$perform = F2($elm$core$Task$perform_fn);
    var $elm$browser$Browser$application = _Browser_application;
    var $dillonkearns$elm_pages$Pages$Flags$BrowserFlags = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect = { $: 1 };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$NotFound = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$OkPage_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$OkPage = F3($dillonkearns$elm_pages$Pages$Internal$Platform$OkPage_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd = function (a) {
        return { $: 9, a: a };
    };
    var $vito$elm_ansi$Ansi$Cyan = { $: 6 };
    var $dillonkearns$elm_pages$TerminalText$cyan = function (inner) {
        return $dillonkearns$elm_pages$TerminalText$Style_fn(_Utils_update($dillonkearns$elm_pages$TerminalText$blankStyle, {
            aC: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan)
        }), inner);
    };
    var $elm$core$String$toUpper = _String_toUpper;
    var $dillonkearns$elm_pages$BuildError$banner = function (title) {
        return _List_fromArray([
            $dillonkearns$elm_pages$TerminalText$cyan("-- " + ($elm$core$String$toUpper(title) + " ----------------------------------------------------- elm-pages")),
            $dillonkearns$elm_pages$TerminalText$text("\n\n")
        ]);
    };
    var $dillonkearns$elm_pages$BuildError$errorToString = function (error) {
        return $dillonkearns$elm_pages$TerminalText$toString(_Utils_ap($dillonkearns$elm_pages$BuildError$banner(error.dz), error.c5));
    };
    var $dillonkearns$elm_pages$QueryParams$addToParametersHelp_fn = function (value, maybeList) {
        if (maybeList.$ === 1) {
            return $elm$core$Maybe$Just(_List_fromArray([value]));
        }
        else {
            var list = maybeList.a;
            return $elm$core$Maybe$Just(_List_Cons(value, list));
        }
    }, $dillonkearns$elm_pages$QueryParams$addToParametersHelp = F2($dillonkearns$elm_pages$QueryParams$addToParametersHelp_fn);
    var $dillonkearns$elm_pages$QueryParams$addParam_fn = function (segment, dict) {
        var _v0 = $elm$core$String$split_fn("=", segment);
        if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
            var rawKey = _v0.a;
            var _v1 = _v0.b;
            var rawValue = _v1.a;
            var _v2 = $elm$url$Url$percentDecode(rawKey);
            if (_v2.$ === 1) {
                return dict;
            }
            else {
                var key = _v2.a;
                var _v3 = $elm$url$Url$percentDecode(rawValue);
                if (_v3.$ === 1) {
                    return dict;
                }
                else {
                    var value = _v3.a;
                    return $elm$core$Dict$update_fn(key, $dillonkearns$elm_pages$QueryParams$addToParametersHelp(value), dict);
                }
            }
        }
        else {
            return dict;
        }
    }, $dillonkearns$elm_pages$QueryParams$addParam = F2($dillonkearns$elm_pages$QueryParams$addParam_fn);
    var $dillonkearns$elm_pages$QueryParams$fromString = function (query) {
        return $elm$core$List$foldr_fn($dillonkearns$elm_pages$QueryParams$addParam, $elm$core$Dict$empty, $elm$core$String$split_fn("&", query));
    };
    var $elm$html$Html$Attributes$id_a0 = "id", $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty($elm$html$Html$Attributes$id_a0);
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName = function (moduleContext) {
        return $elm$core$String$join_fn("/", _List_Cons("src", moduleContext.c6)) + ".elm";
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString = function (fields) {
        return "{ " + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (_v0) {
            var key = _v0.a;
            var value = _v0.b;
            return key + (" = " + value);
        }, fields)) + " }");
    };
    var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
    var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView_fn = function (moduleContext, routes) {
        if (!routes.b) {
            return $elm$html$Html$div_fn(_List_Nil, _List_fromArray([
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$text("But this Page module has no pre-rendered routes! If you want to pre-render this page, add these "),
                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$text("RouteParams")
                ])),
                $elm$html$Html$text(" to the module's "),
                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$text("routes")
                ])),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$code_fn(_List_fromArray([
                    _VirtualDom_style_fn("border-bottom", "dotted 2px"),
                    _VirtualDom_style_fn("font-weight", "bold")
                ]), _List_fromArray([
                    $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.jE))
                ]))
            ]));
        }
        else {
            return $elm$html$Html$div_fn(_List_Nil, _List_fromArray([
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$text(" but these RouteParams were not present "),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$code_fn(_List_fromArray([
                    _VirtualDom_style_fn("border-bottom", "dotted 2px"),
                    _VirtualDom_style_fn("font-weight", "bold")
                ]), _List_fromArray([
                    $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.jE))
                ])),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$text("The following RouteParams are pre-rendered:"),
                $elm$html$Html$ul_fn(_List_fromArray([
                    _VirtualDom_style_fn("padding-top", "30px")
                ]), $elm$core$List$map_fn(function (record) {
                    return $elm$html$Html$li_fn(_List_fromArray([
                        _VirtualDom_style_fn("list-style", "inside")
                    ]), _List_fromArray([
                        $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                            $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(record))
                        ]))
                    ]));
                }, routes)),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                $elm$html$Html$p_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$text("Try changing "),
                    $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text("routes")
                    ])),
                    $elm$html$Html$text(" in "),
                    $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
                    ])),
                    $elm$html$Html$text(" to make sure it includes these "),
                    $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text("RouteParams")
                    ])),
                    $elm$html$Html$text(".")
                ]))
            ]));
        }
    }, $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView = F2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView_fn);
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString = function (segment) {
        if (!segment.$) {
            var string = segment.a;
            return string;
        }
        else {
            var name = segment.a;
            return ":" + name;
        }
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_ = function (segments) {
        return "/" + $elm$core$String$join_fn("/", $elm$core$List$map_fn($dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString, segments));
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$view = function (routePattern) {
        return $elm$html$Html$span_fn(_List_Nil, function () {
            var _v0 = routePattern.aF;
            if (_v0.$ === 1) {
                return _List_fromArray([
                    $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.aL))
                    ]))
                ]);
            }
            else {
                switch (_v0.a.$) {
                    case 0:
                        var optionalName = _v0.a.a;
                        return _List_fromArray([
                            $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.aL))
                            ])),
                            $elm$html$Html$text(" or "),
                            $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.aL) + ("/:" + optionalName))
                            ]))
                        ]);
                    case 1:
                        var _v1 = _v0.a;
                        return _List_fromArray([
                            $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.aL))
                            ]))
                        ]);
                    default:
                        var _v2 = _v0.a;
                        return _List_fromArray([
                            $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.aL))
                            ]))
                        ]);
                }
            }
        }());
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document_fn = function (pathPatterns, payload) {
        return {
            iL: _List_fromArray([
                $elm$html$Html$div_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$id_a0, "not-found-reason"),
                    _VirtualDom_style_fn("padding", "30px")
                ]), function () {
                    var _v0 = payload.e4;
                    switch (_v0.$) {
                        case 0:
                            return _List_fromArray([
                                $elm$html$Html$text("No route found for "),
                                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                    $elm$html$Html$text($dillonkearns$elm_pages$UrlPath$toAbsolute(payload.e))
                                ])),
                                $elm$html$Html$text(" Did you mean to go to one of these routes:"),
                                $elm$html$Html$ul_fn(_List_fromArray([
                                    _VirtualDom_style_fn("padding-top", "30px")
                                ]), $elm$core$List$map_fn(function (route) {
                                    return $elm$html$Html$li_fn(_List_fromArray([
                                        _VirtualDom_style_fn("list-style", "inside")
                                    ]), _List_fromArray([
                                        $dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(route)
                                    ]));
                                }, pathPatterns))
                            ]);
                        case 1:
                            var moduleContext = _v0.a;
                            var routes = _v0.b;
                            return _List_fromArray([
                                $elm$html$Html$h1_fn(_List_Nil, _List_fromArray([
                                    $elm$html$Html$text("Page Not Found")
                                ])),
                                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                    $elm$html$Html$text($dillonkearns$elm_pages$UrlPath$toAbsolute(payload.e))
                                ])),
                                $elm$html$Html$text(" successfully matched the route "),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                    $dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(moduleContext.dn)
                                ])),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$text(" from the Route Module "),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$br_fn(_List_Nil, _List_Nil),
                                $elm$html$Html$code_fn(_List_Nil, _List_fromArray([
                                    $elm$html$Html$text($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
                                ])),
                                $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView_fn(moduleContext, routes)
                            ]);
                        default:
                            return _List_fromArray([
                                $elm$html$Html$text("Page not found"),
                                $elm$html$Html$text("TODO")
                            ]);
                    }
                }())
            ]),
            dz: "Page not found"
        };
    }, $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document = F2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document_fn);
    var $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a0 = $dillonkearns$elm_pages$Pages$Internal$String$chopStart("/"), $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a1 = $dillonkearns$elm_pages$Pages$Internal$String$chopEnd("/"), $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes = A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a0, $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a1);
    var $dillonkearns$elm_pages$Pages$ContentCache$pathForUrl = function (_v0) {
        var basePath = _v0.iI;
        var currentUrl = _v0.iY;
        return $elm$core$List$drop_fn($elm$core$List$length(basePath), $elm$core$List$filter_fn($elm$core$Basics$neq(""), $elm$core$String$split_fn("/", $elm$core$Basics$composeR_fn($dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a0, $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a1, currentUrl.e))));
    };
    var $elm$core$Tuple$second = function (_v0) {
        var y = _v0.b;
        return y;
    };
    var $elm$core$Dict$map_fn = function (func, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, A2(func, key, value), $elm$core$Dict$map_fn(func, left), $elm$core$Dict$map_fn(func, right));
        }
    }, $elm$core$Dict$map_fn_unwrapped = function (func, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, func(key, value), $elm$core$Dict$map_fn_unwrapped(func, left), $elm$core$Dict$map_fn_unwrapped(func, right));
        }
    }, $elm$core$Dict$map = F2($elm$core$Dict$map_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState = function (inFlightFetchers) {
        return $elm$core$Dict$map_fn_unwrapped(function (_v0, _v1) {
            var fetcherState = _v1.b;
            return fetcherState;
        }, inFlightFetchers);
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn = function (config, model) {
        var _v0 = model.bn;
        if (!_v0.$) {
            var info = _v0.a;
            return $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document_fn(config.j6, info);
        }
        else {
            var _v1 = model.p;
            if (!_v1.$) {
                var pageData = _v1.a;
                var urls = { iI: config.iI, iY: model.kG };
                var currentUrl = model.kG;
                return A8(config.E, model.S, $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState(model.J), $elm$core$Maybe$map_fn($elm$core$Tuple$second, model.aa), {
                    e: $dillonkearns$elm_pages$UrlPath$join($dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls)),
                    ki: config.kH(_Utils_update(currentUrl, { e: model.b6 }))
                }, $elm$core$Maybe$Nothing, pageData.M, pageData.p, pageData.bz).E(pageData.ab);
            }
            else {
                var error = _v1.a;
                return {
                    iL: _List_fromArray([
                        $elm$html$Html$div_fn(_List_Nil, _List_fromArray([
                            $elm$html$Html$text(error)
                        ]))
                    ]),
                    dz: "Page Data Error"
                };
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$mainView = F2($dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn);
    var $elm$json$Json$Encode$null = _Json_encodeNull;
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError_fn = function (path, error) {
        if (!error.$) {
            var decodeErrorMessage = error.a;
            return {
                jd: true,
                c5: _List_fromArray([
                    $dillonkearns$elm_pages$TerminalText$text(decodeErrorMessage)
                ]),
                e: path,
                dz: "Static Http Decoding Error"
            };
        }
        else {
            var decodeErrorMessage = error.a;
            return {
                jd: true,
                c5: _List_fromArray([
                    $dillonkearns$elm_pages$TerminalText$text("I ran into a call to `BackendTask.fail` with message: " + decodeErrorMessage)
                ]),
                e: path,
                dz: "Called Static Http Fail"
            };
        }
    }, $dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError = F2($dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath = function (urls) {
        return $dillonkearns$elm_pages$UrlPath$join($elm$core$List$drop_fn($elm$core$List$length(urls.iI), $elm$core$List$filter_fn($elm$core$Basics$neq(""), $elm$core$String$split_fn("/", $elm$core$Basics$composeR_fn($dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a0, $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes_a1, urls.iY.e)))));
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$init_fn = function (config, flags, url, key) {
        var pageDataResult = $elm$core$Result$fromMaybe_fn($dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError_fn(url.e, $dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError("Bytes decode error")), $elm$core$Maybe$andThen_fn(function (justBytes) {
            var _v3 = $elm$bytes$Bytes$Decode$decode_fn(config.i_, justBytes);
            _v3$3: while (true) {
                if (!_v3.$) {
                    switch (_v3.a.$) {
                        case 0:
                            var _v4 = _v3.a;
                            return $elm$core$Maybe$Nothing;
                        case 1:
                            var _v5 = _v3.a;
                            var pageData = _v5.a;
                            var shared = _v5.b;
                            var actionData = _v5.c;
                            return $elm$core$Maybe$Just($dillonkearns$elm_pages$Pages$Internal$Platform$OkPage_fn(shared, pageData, actionData));
                        case 3:
                            var notFound = _v3.a.a;
                            return $elm$core$Maybe$Just($dillonkearns$elm_pages$Pages$Internal$Platform$NotFound(notFound));
                        default:
                            break _v3$3;
                    }
                }
                else {
                    break _v3$3;
                }
            }
            return $elm$core$Maybe$Nothing;
        }, $elm$core$Maybe$andThen_fn($danfishgold$base64_bytes$Base64$toBytes, $elm$core$Result$toMaybe(_Json_run_fn(_Json_decodeField_fn("pageDataBase64", $elm$json$Json$Decode$string), flags)))));
        if (!pageDataResult.$) {
            if (!pageDataResult.a.$) {
                var _v1 = pageDataResult.a;
                var sharedData = _v1.a;
                var pageData = _v1.b;
                var actionData = _v1.c;
                var userFlags = $dillonkearns$elm_pages$Pages$Flags$BrowserFlags($elm$core$Result$withDefault_fn($elm$json$Json$Encode$null, _Json_run_fn(_Json_decodeField_fn("userFlags", $elm$json$Json$Decode$value), flags)));
                var urls = { iI: config.iI, iY: url };
                var pagePath = $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath(urls);
                var _v2 = A5(config.bL, userFlags, sharedData, pageData, actionData, $elm$core$Maybe$Just({
                    az: config.kH(url),
                    ah: $elm$core$Maybe$Just({
                        aW: url.aW,
                        eG: url.eG,
                        e: pagePath,
                        eW: url.eW,
                        e$: url.e$,
                        a6: $elm$core$Maybe$withDefault_fn($elm$core$Dict$empty, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$QueryParams$fromString, url.a6))
                    }),
                    e: { aW: url.aW, e: pagePath, a6: url.a6 }
                }));
                var userModel = _v2.a;
                var userCmd = _v2.b;
                var cmd = $dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd(userCmd);
                var initialModel = {
                    bA: "",
                    b6: url.e,
                    J: $elm$core$Dict$empty,
                    jz: key,
                    aA: 0,
                    bn: $elm$core$Maybe$Nothing,
                    p: $elm$core$Result$Ok({ bz: actionData, p: pageData, M: sharedData, ab: userModel }),
                    S: $elm$core$Dict$empty,
                    bQ: $elm$core$Maybe$Nothing,
                    aI: false,
                    aa: $elm$core$Maybe$Nothing,
                    kG: url,
                    ee: flags
                };
                return _Utils_Tuple2(_Utils_update(initialModel, {
                    bA: $dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn(config, initialModel).dz
                }), cmd);
            }
            else {
                var info = pageDataResult.a.a;
                return _Utils_Tuple2({
                    bA: "Page Not Found",
                    b6: url.e,
                    J: $elm$core$Dict$empty,
                    jz: key,
                    aA: 0,
                    bn: $elm$core$Maybe$Just(info),
                    p: $elm$core$Result$Err("Not found"),
                    S: $elm$core$Dict$empty,
                    bQ: $elm$core$Maybe$Nothing,
                    aI: false,
                    aa: $elm$core$Maybe$Nothing,
                    kG: url,
                    ee: flags
                }, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
            }
        }
        else {
            var error = pageDataResult.a;
            return _Utils_Tuple2({
                bA: "Error",
                b6: url.e,
                J: $elm$core$Dict$empty,
                jz: key,
                aA: 0,
                bn: $elm$core$Maybe$Nothing,
                p: $elm$core$Result$Err($dillonkearns$elm_pages$BuildError$errorToString(error)),
                S: $elm$core$Dict$empty,
                bQ: $elm$core$Maybe$Nothing,
                aI: false,
                aa: $elm$core$Maybe$Nothing,
                kG: url,
                ee: flags
            }, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$init = F4($dillonkearns$elm_pages$Pages$Internal$Platform$init_fn);
    var $elm$core$Platform$Sub$map = _Platform_map;
    var $dillonkearns$elm_form$Form$Get = 0;
    var $dillonkearns$elm_pages$Pages$Internal$Platform$PageScrollComplete = { $: 7 };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew_fn = function (a, b, c, d) {
        return { $: 4, a: a, b: b, c: c, d: d };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew = F4($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData = function (fields) {
        return $elm$core$String$join_fn("&", $elm$core$List$map_fn(function (_v0) {
            var name = _v0.a;
            var value = _v0.b;
            return $elm$url$Url$percentEncode(name) + ("=" + $elm$url$Url$percentEncode(value));
        }, fields));
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$appendFormQueryParams = function (fields) {
        return _Utils_ap($elm$core$Maybe$withDefault_fn("/", $elm$core$Maybe$map_fn(function ($) {
            return $.e;
        }, $elm$url$Url$fromString(fields.fs))), function () {
            var _v0 = fields.gi;
            if (!_v0) {
                return "?" + $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData(fields.f$);
            }
            else {
                return "";
            }
        }());
    };
    var $elm$core$Platform$Cmd$batch = _Platform_batch;
    var $elm$http$Http$Cancel = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$State_fn = function (reqs, subs) {
        return { e7: reqs, fj: subs };
    }, $elm$http$Http$State = F2($elm$http$Http$State_fn);
    var $elm$http$Http$init = $elm$core$Task$succeed($elm$http$Http$State_fn($elm$core$Dict$empty, _List_Nil));
    var $elm$http$Http$BadStatus__fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $elm$http$Http$BadStatus_ = F2($elm$http$Http$BadStatus__fn);
    var $elm$http$Http$BadUrl_ = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$GoodStatus__fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $elm$http$Http$GoodStatus_ = F2($elm$http$Http$GoodStatus__fn);
    var $elm$http$Http$NetworkError_ = { $: 2 };
    var $elm$http$Http$Receiving = function (a) {
        return { $: 1, a: a };
    };
    var $elm$http$Http$Sending = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$Timeout_ = { $: 1 };
    var $elm$core$Maybe$isJust = function (maybe) {
        if (!maybe.$) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
    var $elm$core$Process$kill = _Scheduler_kill;
    var $elm$core$Process$spawn = _Scheduler_spawn;
    var $elm$http$Http$updateReqs_fn = function (router, cmds, reqs) {
        updateReqs: while (true) {
            if (!cmds.b) {
                return $elm$core$Task$succeed(reqs);
            }
            else {
                var cmd = cmds.a;
                var otherCmds = cmds.b;
                if (!cmd.$) {
                    var tracker = cmd.a;
                    var _v2 = $elm$core$Dict$get_fn(tracker, reqs);
                    if (_v2.$ === 1) {
                        var $temp$cmds = otherCmds;
                        cmds = $temp$cmds;
                        continue updateReqs;
                    }
                    else {
                        var pid = _v2.a;
                        return _Scheduler_andThen_fn(function (_v3) {
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, $elm$core$Dict$remove_fn(tracker, reqs));
                        }, $elm$core$Process$kill(pid));
                    }
                }
                else {
                    var req = cmd.a;
                    return _Scheduler_andThen_fn(function (pid) {
                        var _v4 = req.gN;
                        if (_v4.$ === 1) {
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, reqs);
                        }
                        else {
                            var tracker = _v4.a;
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, $elm$core$Dict$insert_fn(tracker, pid, reqs));
                        }
                    }, $elm$core$Process$spawn(_Http_toTask_fn(router, $elm$core$Platform$sendToApp(router), req)));
                }
            }
        }
    }, $elm$http$Http$updateReqs = F3($elm$http$Http$updateReqs_fn);
    var $elm$http$Http$onEffects_fn = function (router, cmds, subs, state) {
        return _Scheduler_andThen_fn(function (reqs) {
            return $elm$core$Task$succeed($elm$http$Http$State_fn(reqs, subs));
        }, $elm$http$Http$updateReqs_fn(router, cmds, state.e7));
    }, $elm$http$Http$onEffects = F4($elm$http$Http$onEffects_fn);
    var $elm$http$Http$maybeSend_fn = function (router, desiredTracker, progress, _v0) {
        var actualTracker = _v0.a;
        var toMsg = _v0.b;
        return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(_Platform_sendToApp_fn(router, toMsg(progress))) : $elm$core$Maybe$Nothing;
    }, $elm$http$Http$maybeSend = F4($elm$http$Http$maybeSend_fn);
    var $elm$http$Http$onSelfMsg_fn = function (router, _v0, state) {
        var tracker = _v0.a;
        var progress = _v0.b;
        return _Scheduler_andThen_fn(function (_v1) {
            return $elm$core$Task$succeed(state);
        }, $elm$core$Task$sequence($elm$core$List$filterMap_fn(A3($elm$http$Http$maybeSend, router, tracker, progress), state.fj)));
    }, $elm$http$Http$onSelfMsg = F3($elm$http$Http$onSelfMsg_fn);
    var $elm$http$Http$Request = function (a) {
        return { $: 1, a: a };
    };
    var $elm$http$Http$cmdMap_fn = function (func, cmd) {
        if (!cmd.$) {
            var tracker = cmd.a;
            return $elm$http$Http$Cancel(tracker);
        }
        else {
            var r = cmd.a;
            return $elm$http$Http$Request({
                iB: r.iB,
                iL: r.iL,
                jb: _Http_mapExpect_fn(func, r.jb),
                jo: r.jo,
                gi: r.gi,
                gL: r.gL,
                gN: r.gN,
                kG: r.kG
            });
        }
    }, $elm$http$Http$cmdMap = F2($elm$http$Http$cmdMap_fn);
    var $elm$http$Http$MySub_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$http$Http$MySub = F2($elm$http$Http$MySub_fn);
    var $elm$http$Http$subMap_fn = function (func, _v0) {
        var tracker = _v0.a;
        var toMsg = _v0.b;
        return $elm$http$Http$MySub_fn(tracker, A2($elm$core$Basics$composeR, toMsg, func));
    }, $elm$http$Http$subMap = F2($elm$http$Http$subMap_fn);
    _Platform_effectManagers["Http"] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
    var $elm$http$Http$command = _Platform_leaf("Http");
    var $elm$http$Http$subscription = _Platform_leaf("Http");
    var $elm$http$Http$cancel = function (tracker) {
        return $elm$http$Http$command($elm$http$Http$Cancel(tracker));
    };
    var $elm$http$Http$BadBody = function (a) {
        return { $: 4, a: a };
    };
    var $elm$http$Http$BadUrl = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$NetworkError = { $: 2 };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$ProcessFetchResponse_fn = function (a, b, c) {
        return { $: 9, a: a, b: b, c: c };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$ProcessFetchResponse = F3($dillonkearns$elm_pages$Pages$Internal$Platform$ProcessFetchResponse_fn);
    var $elm$http$Http$Timeout = { $: 1 };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$chopEnd_fn = function (needle, string) {
        chopEnd: while (true) {
            if (_String_endsWith_fn(needle, string)) {
                var $temp$string = $elm$core$String$dropRight_fn($elm$core$String$length(needle), string);
                string = $temp$string;
                continue chopEnd;
            }
            else {
                return string;
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$chopEnd = F2($dillonkearns$elm_pages$Pages$Internal$Platform$chopEnd_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$chopStart_fn = function (needle, string) {
        chopStart: while (true) {
            if (_String_startsWith_fn(needle, string)) {
                var $temp$string = $elm$core$String$dropLeft_fn($elm$core$String$length(needle), string);
                string = $temp$string;
                continue chopStart;
            }
            else {
                return string;
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$chopStart = F2($dillonkearns$elm_pages$Pages$Internal$Platform$chopStart_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a0 = $dillonkearns$elm_pages$Pages$Internal$Platform$chopStart("/"), $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a1 = $dillonkearns$elm_pages$Pages$Internal$Platform$chopEnd("/"), $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes = A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a0, $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a1);
    var $elm$http$Http$emptyBody = _Http_emptyBody;
    var $elm$http$Http$expectBytesResponse_fn = function (toMsg, toResult) {
        return _Http_expect_fn("arraybuffer", _Http_toDataView, A2($elm$core$Basics$composeR, toResult, toMsg));
    }, $elm$http$Http$expectBytesResponse = F2($elm$http$Http$expectBytesResponse_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$methodToString = function (method) {
        if (!method) {
            return "GET";
        }
        else {
            return "POST";
        }
    };
    var $elm$http$Http$request = function (r) {
        return $elm$http$Http$command($elm$http$Http$Request({ iB: false, iL: r.iL, jb: r.jb, jo: r.jo, gi: r.gi, gL: r.gL, gN: r.gN, kG: r.kG }));
    };
    var $elm$http$Http$stringBody = _Http_pair;
    var $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn = function (transitionKey, toMsg, config, url, details) {
        var formMethod = $elm$core$Maybe$withDefault_fn(0, $elm$core$Maybe$map_fn(function ($) {
            return $.gi;
        }, details));
        return $elm$http$Http$request({
            iL: function () {
                if (formMethod === 1) {
                    var urlEncodedFields = $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, function ($) {
                        return $.f$;
                    }, $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData), details);
                    return $elm$core$Maybe$withDefault_fn($elm$http$Http$emptyBody, $elm$core$Maybe$map_fn(function (encoded) {
                        return _Http_pair_fn("application/x-www-form-urlencoded", encoded);
                    }, urlEncodedFields));
                }
                else {
                    return $elm$http$Http$emptyBody;
                }
            }(),
            jb: $elm$http$Http$expectBytesResponse_fn(function (response) {
                return $dillonkearns$elm_pages$Pages$Internal$Platform$ProcessFetchResponse_fn(transitionKey, response, toMsg);
            }, function (response) {
                switch (response.$) {
                    case 0:
                        var url_ = response.a;
                        return $elm$core$Result$Err($elm$http$Http$BadUrl(url_));
                    case 1:
                        return $elm$core$Result$Err($elm$http$Http$Timeout);
                    case 2:
                        return $elm$core$Result$Err($elm$http$Http$NetworkError);
                    case 3:
                        var body = response.b;
                        return $elm$core$Result$map_fn(function (okResponse) {
                            return _Utils_Tuple2(url, okResponse);
                        }, $elm$core$Result$mapError_fn($elm$http$Http$BadBody, $elm$core$Result$fromMaybe_fn("Decoding error", $elm$bytes$Bytes$Decode$decode_fn(config.i_, body))));
                    default:
                        var body = response.b;
                        return $elm$core$Result$map_fn(function (okResponse) {
                            return _Utils_Tuple2(url, okResponse);
                        }, $elm$core$Result$mapError_fn($elm$http$Http$BadBody, $elm$core$Result$fromMaybe_fn("Decoding error", $elm$bytes$Bytes$Decode$decode_fn(config.i_, body))));
                }
            }),
            jo: _List_Nil,
            gi: $elm$core$Maybe$withDefault_fn("GET", $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, function ($) {
                return $.gi;
            }, $dillonkearns$elm_pages$Pages$Internal$Platform$methodToString), details)),
            gL: $elm$core$Maybe$Nothing,
            gN: $elm$core$Maybe$Just($elm$core$String$fromInt(transitionKey)),
            kG: "/" + ($elm$core$String$join_fn("/", function (l) {
                return _Utils_ap(l, _List_fromArray(["content.dat"]));
            }($elm$core$List$filter_fn($elm$core$Basics$neq(""), $elm$core$String$split_fn("/", $elm$core$Basics$composeR_fn($dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a0, $dillonkearns$elm_pages$Pages$Internal$Platform$chopForwardSlashes_a1, $elm$core$Maybe$withDefault_fn(url, $elm$core$Maybe$andThen_fn($elm$url$Url$fromString, $elm$core$Maybe$map_fn(function ($) {
                return $.fs;
            }, details))).e))))) + (function () {
                if (formMethod === 1) {
                    return "/";
                }
                else {
                    return $elm$core$Maybe$withDefault_fn("", $elm$core$Maybe$map_fn(function (encoded) {
                        return "?" + encoded;
                    }, $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, function ($) {
                        return $.f$;
                    }, $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData), details)));
                }
            }() + function () {
                if (formMethod === 1) {
                    return "";
                }
                else {
                    return $elm$core$Maybe$withDefault_fn("", $elm$core$Maybe$map_fn(function (encoded) {
                        return "?" + encoded;
                    }, url.a6));
                }
            }()))
        });
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData = F5($dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn);
    var $elm$browser$Browser$Navigation$load = _Browser_load;
    var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
    var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
    var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
    var $elm$browser$Browser$Dom$setViewport = _Browser_setViewport;
    var $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$BadStatus = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$FetcherComplete_fn = function (a, b, c, d) {
        return { $: 5, a: a, b: b, c: c, d: d };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$FetcherComplete = F4($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherComplete_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$FetcherStarted_fn = function (a, b, c, d) {
        return { $: 6, a: a, b: b, c: c, d: d };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$FetcherStarted = F4($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherStarted_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$cancelStaleFetchers = function (model) {
        return $elm$core$Platform$Cmd$batch($elm$core$List$filterMap_fn(function (_v0) {
            var _v1 = _v0.b;
            var id = _v1.a;
            var fetcher = _v1.b;
            var _v2 = fetcher.N;
            switch (_v2.$) {
                case 1:
                    return $elm$core$Maybe$Just($elm$http$Http$cancel($elm$core$String$fromInt(id)));
                case 0:
                    return $elm$core$Maybe$Nothing;
                default:
                    return $elm$core$Maybe$Nothing;
            }
        }, $elm$core$Dict$toList(model.J)));
    };
    var $elm$http$Http$Header_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$http$Http$Header = F2($elm$http$Http$Header_fn);
    var $elm$http$Http$header = $elm$http$Http$Header;
    var $elm$time$Time$Name = function (a) {
        return { $: 0, a: a };
    };
    var $elm$time$Time$Offset = function (a) {
        return { $: 1, a: a };
    };
    var $elm$time$Time$customZone = $elm$time$Time$Zone;
    var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher_fn = function (fetcherKey, transitionId, options, model) {
        var formData = {
            fs: $elm$core$Maybe$withDefault_fn(model.kG.e, options.kG),
            f$: options.f$,
            f5: $elm$core$Maybe$Nothing,
            gi: 0
        };
        var encodedBody = $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData(options.f$);
        return $elm$core$Platform$Cmd$batch(_List_fromArray([
            $dillonkearns$elm_pages$Pages$Internal$Platform$cancelStaleFetchers(model),
            $elm$core$Task$perform_fn($elm$core$Basics$identity, $elm$core$Task$map_fn(A3($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherStarted, fetcherKey, transitionId, formData), $elm$time$Time$now)),
            $elm$http$Http$request({
                iL: _Http_pair_fn("application/x-www-form-urlencoded", encodedBody),
                jb: $elm$http$Http$expectBytesResponse_fn(A3($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherComplete, false, fetcherKey, model.aA), function (bytes) {
                    switch (bytes.$) {
                        case 4:
                            var bytesBody = bytes.b;
                            return $elm$core$Result$Ok(_Utils_Tuple2($elm$core$Maybe$Just(options.bd($elm$core$Result$Ok(bytesBody))), $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse($elm$core$Maybe$Nothing)));
                        case 0:
                            var string = bytes.a;
                            return $elm$core$Result$Err($elm$http$Http$BadUrl(string));
                        case 1:
                            return $elm$core$Result$Err($elm$http$Http$Timeout);
                        case 2:
                            return $elm$core$Result$Err($elm$http$Http$NetworkError);
                        default:
                            var metadata = bytes.a;
                            return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata._));
                    }
                }),
                jo: $elm$core$List$map_fn(function (_v1) {
                    var name = _v1.a;
                    var value = _v1.b;
                    return $elm$http$Http$Header_fn(name, value);
                }, options.jo),
                gi: "POST",
                gL: $elm$core$Maybe$Nothing,
                gN: $elm$core$Maybe$Nothing,
                kG: $elm$core$Maybe$withDefault_fn($dillonkearns$elm_pages$UrlPath$toAbsolute($dillonkearns$elm_pages$UrlPath$join(_List_fromArray([model.kG.e, "content.dat"]))), options.kG)
            })
        ]));
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher = F4($dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$RedirectResponse = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher2_fn = function (config, fromPageReload, fetcherKey, transitionId, formData, model) {
        var encodedBody = $dillonkearns$elm_pages$Pages$Internal$Platform$encodeFormData(formData.f$);
        return $elm$core$Platform$Cmd$batch(_List_fromArray([
            $dillonkearns$elm_pages$Pages$Internal$Platform$cancelStaleFetchers(model),
            function () {
                var _v0 = $elm$core$Dict$get_fn(fetcherKey, model.J);
                if (!_v0.$) {
                    var _v1 = _v0.a;
                    var inFlightId = _v1.a;
                    return $elm$http$Http$cancel($elm$core$String$fromInt(inFlightId));
                }
                else {
                    return $elm$core$Platform$Cmd$none;
                }
            }(),
            $elm$core$Task$perform_fn($elm$core$Basics$identity, $elm$core$Task$map_fn(A3($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherStarted, fetcherKey, transitionId, formData), $elm$time$Time$now)),
            $elm$http$Http$request({
                iL: _Http_pair_fn("application/x-www-form-urlencoded", encodedBody),
                jb: $elm$http$Http$expectBytesResponse_fn(A3($dillonkearns$elm_pages$Pages$Internal$Platform$FetcherComplete, fromPageReload, fetcherKey, model.aA), function (bytes) {
                    switch (bytes.$) {
                        case 4:
                            var bytesBody = bytes.b;
                            var decodedAction = function () {
                                var _v3 = $elm$bytes$Bytes$Decode$decode_fn(config.i_, bytesBody);
                                _v3$4: while (true) {
                                    if (!_v3.$) {
                                        switch (_v3.a.$) {
                                            case 2:
                                                var redirectTo = _v3.a.a;
                                                return $dillonkearns$elm_pages$Pages$Internal$Platform$RedirectResponse(redirectTo);
                                            case 0:
                                                var _v4 = _v3.a;
                                                var maybeAction = _v4.b;
                                                return $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse(maybeAction);
                                            case 1:
                                                var _v5 = _v3.a;
                                                var maybeAction = _v5.c;
                                                return $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse(maybeAction);
                                            case 3:
                                                return $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse($elm$core$Maybe$Nothing);
                                            default:
                                                break _v3$4;
                                        }
                                    }
                                    else {
                                        break _v3$4;
                                    }
                                }
                                return $dillonkearns$elm_pages$Pages$Internal$Platform$ActionResponse($elm$core$Maybe$Nothing);
                            }();
                            return $elm$core$Result$Ok(_Utils_Tuple2($elm$core$Maybe$Nothing, decodedAction));
                        case 0:
                            var string = bytes.a;
                            return $elm$core$Result$Err($elm$http$Http$BadUrl(string));
                        case 1:
                            return $elm$core$Result$Err($elm$http$Http$Timeout);
                        case 2:
                            return $elm$core$Result$Err($elm$http$Http$NetworkError);
                        default:
                            var metadata = bytes.a;
                            return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata._));
                    }
                }),
                jo: _List_Nil,
                gi: $dillonkearns$elm_pages$Pages$Internal$Platform$methodToString(formData.gi),
                gL: $elm$core$Maybe$Nothing,
                gN: $elm$core$Maybe$Just($elm$core$String$fromInt(transitionId)),
                kG: $elm$core$Maybe$withDefault_fn("/", $elm$core$Maybe$map_fn(function (_v6) {
                    var path = _v6.e;
                    return $dillonkearns$elm_pages$UrlPath$toAbsolute($dillonkearns$elm_pages$UrlPath$join(_List_fromArray([path, "content.dat"])));
                }, $elm$url$Url$fromString(formData.fs)))
            })
        ]));
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher2 = F6($dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher2_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$urlFromAction_fn = function (currentUrl, fetchInfo) {
        return $elm$core$Maybe$withDefault_fn(currentUrl, $elm$core$Maybe$andThen_fn($elm$url$Url$fromString, $elm$core$Maybe$map_fn(function ($) {
            return $.fs;
        }, fetchInfo)));
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$urlFromAction = F2($dillonkearns$elm_pages$Pages$Internal$Platform$urlFromAction_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$perform_fn = function (config, model, effect) {
        switch (effect.$) {
            case 1:
                return $elm$core$Platform$Cmd$none;
            case 11:
                var cmd = effect.a;
                return cmd;
            case 8:
                var effects = effect.a;
                return $elm$core$Platform$Cmd$batch($elm$core$List$map_fn(A2($dillonkearns$elm_pages$Pages$Internal$Platform$perform, config, model), effects));
            case 0:
                return $elm$core$Task$perform_fn(function (_v1) {
                    return $dillonkearns$elm_pages$Pages$Internal$Platform$PageScrollComplete;
                }, _Browser_setViewport_fn(0, 0));
            case 2:
                var url = effect.a;
                return $elm$browser$Browser$Navigation$load(url);
            case 3:
                var url = effect.a;
                return $elm$core$Maybe$withDefault_fn($elm$core$Platform$Cmd$none, $elm$core$Maybe$map_fn(function (key) {
                    return _Browser_pushUrl_fn(key, url);
                }, model.jz));
            case 4:
                var url = effect.a;
                return $elm$core$Maybe$withDefault_fn($elm$core$Platform$Cmd$none, $elm$core$Maybe$map_fn(function (key) {
                    return _Browser_replaceUrl_fn(key, url);
                }, model.jz));
            case 5:
                var transitionKey = effect.a;
                var maybeRequestInfo = effect.b;
                var url = effect.c;
                var toMsg = effect.d;
                return $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn(transitionKey, toMsg, config, url, maybeRequestInfo);
            case 6:
                var fields = effect.a;
                if (!fields.gi) {
                    return $elm$core$Maybe$withDefault_fn($elm$core$Platform$Cmd$none, $elm$core$Maybe$map_fn(function (key) {
                        return _Browser_pushUrl_fn(key, $dillonkearns$elm_pages$Pages$Internal$Platform$appendFormQueryParams(fields));
                    }, model.jz));
                }
                else {
                    var urlToSubmitTo = model.kG;
                    return $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn(-1, A3($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew, false, model.kG, $elm$core$Maybe$Nothing), config, urlToSubmitTo, $elm$core$Maybe$Just(fields));
                }
            case 7:
                var fetcherKey = effect.a;
                var transitionId = effect.b;
                var formData = effect.c;
                return $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher2_fn(config, false, fetcherKey, transitionId, formData, model);
            case 9:
                var cmd = effect.a;
                var _v2 = model.jz;
                if (!_v2.$) {
                    var key = _v2.a;
                    var prepare = F2(function (toMsg, info) {
                        return $dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew_fn(false, model.kG, $elm$core$Maybe$Just(toMsg($elm$core$Result$map_fn($elm$core$Tuple$first, info))), info);
                    });
                    return A2(config.j7, {
                        je: function (fetchInfo) {
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn(-1, prepare(fetchInfo.fm), config, $dillonkearns$elm_pages$Pages$Internal$Platform$urlFromAction_fn(model.kG, fetchInfo.hc), fetchInfo.hc);
                        },
                        jj: A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$Pages$Internal$Msg$UserMsg, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg),
                        jz: key,
                        km: function (_v3) {
                            var options = _v3;
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$startFetcher_fn("TODO", -1, options, model);
                        },
                        ks: function (_v4) {
                            return $elm$core$Platform$Cmd$none;
                        },
                        kA: function (fetchInfo) {
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$fetchRouteData_fn(-1, prepare(fetchInfo.fm), config, $elm$core$Maybe$withDefault_fn(model.kG, $elm$url$Url$fromString(fetchInfo.it.fs)), $elm$core$Maybe$Just(fetchInfo.it));
                        }
                    }, cmd);
                }
                else {
                    return $elm$core$Platform$Cmd$none;
                }
            default:
                var transitionKey = effect.a;
                return $elm$http$Http$cancel($elm$core$String$fromInt(transitionKey));
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$perform = F3($dillonkearns$elm_pages$Pages$Internal$Platform$perform_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$Batch = function (a) {
        return { $: 8, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserPushUrl = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserReplaceUrl = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Reloading = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$RunCmd = function (a) {
        return { $: 11, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$ScrollToTop = { $: 0 };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$Submit = function (a) {
        return { $: 6, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$SubmitFetcher_fn = function (a, b, c) {
        return { $: 7, a: a, b: b, c: c };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$SubmitFetcher = F3($dillonkearns$elm_pages$Pages$Internal$Platform$SubmitFetcher_fn);
    var $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Submitting = { $: 0 };
    var $dillonkearns$elm_pages$Pages$Navigation$Submitting = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Complete = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$clearLoadingFetchersAfterDataLoad_fn = function (completedTransitionId, model) {
        return _Utils_update(model, {
            J: $elm$core$Dict$map_fn_unwrapped(function (_v0, _v1) {
                var transitionId = _v1.a;
                var fetcherState = _v1.b;
                var _v2 = _Utils_Tuple2(_Utils_cmp(transitionId, completedTransitionId) > 0, fetcherState.N);
                if ((!_v2.a) && (_v2.b.$ === 1)) {
                    var actionData = _v2.b.a;
                    return _Utils_Tuple2(transitionId, _Utils_update(fetcherState, {
                        N: $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Complete(actionData)
                    }));
                }
                else {
                    return _Utils_Tuple2(transitionId, fetcherState);
                }
            }, model.J)
        });
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$clearLoadingFetchersAfterDataLoad = F2($dillonkearns$elm_pages$Pages$Internal$Platform$clearLoadingFetchersAfterDataLoad_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn = function (path, _v0) {
        var url = _v0.kG;
        return _Utils_update(url, { e: path });
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath = F2($dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn);
    var $elm$url$Url$addPort_fn = function (maybePort, starter) {
        if (maybePort.$ === 1) {
            return starter;
        }
        else {
            var port_ = maybePort.a;
            return starter + (":" + $elm$core$String$fromInt(port_));
        }
    }, $elm$url$Url$addPort = F2($elm$url$Url$addPort_fn);
    var $elm$url$Url$addPrefixed_fn = function (prefix, maybeSegment, starter) {
        if (maybeSegment.$ === 1) {
            return starter;
        }
        else {
            var segment = maybeSegment.a;
            return _Utils_ap(starter, _Utils_ap(prefix, segment));
        }
    }, $elm$url$Url$addPrefixed = F3($elm$url$Url$addPrefixed_fn);
    var $elm$url$Url$toString = function (url) {
        var http = function () {
            var _v0 = url.e$;
            if (!_v0) {
                return "http://";
            }
            else {
                return "https://";
            }
        }();
        return $elm$url$Url$addPrefixed_fn("#", url.aW, $elm$url$Url$addPrefixed_fn("?", url.a6, _Utils_ap($elm$url$Url$addPort_fn(url.eW, _Utils_ap(http, url.eG)), url.e)));
    };
    var $dillonkearns$elm_pages$UrlPath$toSegments = function (path) {
        return $elm$core$List$filter_fn($elm$core$Basics$neq(""), $elm$core$String$split_fn("/", path));
    };
    var $dillonkearns$elm_pages$UrlPath$fromString = function (path) {
        return $dillonkearns$elm_pages$UrlPath$toSegments(path);
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath = function (urls) {
        return $dillonkearns$elm_pages$UrlPath$fromString(urls.e);
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg_fn = function (config, userMsg, _v0) {
        var model = _v0.a;
        var effect = _v0.b;
        var _v1 = model.p;
        if (!_v1.$) {
            var pageData = _v1.a;
            var _v2 = A8(config.ba, model.S, $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState(model.J), $elm$core$Maybe$map_fn($elm$core$Tuple$second, model.aa), pageData.M, pageData.p, model.jz, userMsg, pageData.ab);
            var userModel = _v2.a;
            var userCmd = _v2.b;
            var updatedPageData = $elm$core$Result$Ok(_Utils_update(pageData, { ab: userModel }));
            return _Utils_Tuple2(_Utils_update(model, { p: updatedPageData }), $dillonkearns$elm_pages$Pages$Internal$Platform$Batch(_List_fromArray([
                effect,
                $dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd(userCmd)
            ])));
        }
        else {
            return _Utils_Tuple2(model, effect);
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg = F3($dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$loadDataAndUpdateUrl_fn = function (_v0, maybeUserMsg, urlWithoutRedirectResolution, newUrl, redirectPending, config, model) {
        var newPageData = _v0.a;
        var newSharedData = _v0.b;
        var newActionData = _v0.c;
        var _v1 = model.p;
        if (!_v1.$) {
            var previousPageData = _v1.a;
            var onActionMsg = $elm$core$Maybe$andThen_fn(config.j_, newActionData);
            var _v2 = A8(config.ba, model.S, $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState(model.J), $elm$core$Maybe$map_fn($elm$core$Tuple$second, model.aa), newSharedData, newPageData, model.jz, config.hS({
                aW: urlWithoutRedirectResolution.aW,
                eG: model.kG.eG,
                az: config.kH(urlWithoutRedirectResolution),
                e: $dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath(urlWithoutRedirectResolution),
                eW: model.kG.eW,
                e$: model.kG.e$,
                a6: urlWithoutRedirectResolution.a6
            }), previousPageData.ab);
            var userModel = _v2.a;
            var updatedPageData = { bz: newActionData, p: newPageData, M: newSharedData, ab: userModel };
            var updatedModel = (model.aI || redirectPending) ? _Utils_update(model, {
                p: $elm$core$Result$Ok(updatedPageData),
                S: $elm$core$Dict$empty,
                bQ: $elm$core$Maybe$Nothing,
                aI: false,
                aa: $elm$core$Maybe$Nothing,
                kG: newUrl
            }) : _Utils_update(model, {
                J: $elm$core$Dict$empty,
                p: $elm$core$Result$Ok(updatedPageData),
                bQ: $elm$core$Maybe$Nothing,
                aI: false,
                aa: $elm$core$Maybe$Nothing,
                kG: newUrl
            });
            return function () {
                if (!onActionMsg.$) {
                    var actionMsg = onActionMsg.a;
                    return A2($dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg, config, actionMsg);
                }
                else {
                    return $elm$core$Basics$identity;
                }
            }()(function () {
                if (!maybeUserMsg.$) {
                    var userMsg = maybeUserMsg.a;
                    return A2($dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg, config, userMsg);
                }
                else {
                    return $elm$core$Basics$identity;
                }
            }()(_Utils_Tuple2(_Utils_update(updatedModel, {
                bA: $dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn(config, updatedModel).dz,
                b6: newUrl.e
            }), $dillonkearns$elm_pages$Pages$Internal$Platform$ScrollToTop)));
        }
        else {
            return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl($elm$url$Url$toString(urlWithoutRedirectResolution)));
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$loadDataAndUpdateUrl = F7($dillonkearns$elm_pages$Pages$Internal$Platform$loadDataAndUpdateUrl_fn);
    var $elm$core$Platform$Cmd$map = _Platform_map;
    var $dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg_fn = function (userMsg, config, _v0) {
        var model = _v0.a;
        var effect = _v0.b;
        var _v1 = model.p;
        if (!_v1.$) {
            var pageData = _v1.a;
            var _v2 = A8(config.ba, model.S, $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState(model.J), $elm$core$Maybe$map_fn($elm$core$Tuple$second, model.aa), pageData.M, pageData.p, model.jz, userMsg, pageData.ab);
            var userModel = _v2.a;
            var userCmd = _v2.b;
            var updatedPageData = $elm$core$Result$Ok(_Utils_update(pageData, { ab: userModel }));
            return _Utils_Tuple2(_Utils_update(model, { p: updatedPageData }), $dillonkearns$elm_pages$Pages$Internal$Platform$Batch(_List_fromArray([
                effect,
                $dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd(userCmd)
            ])));
        }
        else {
            return _Utils_Tuple2(model, effect);
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg = F3($dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$CancelRequest = function (a) {
        return { $: 10, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$FetchPageData_fn = function (a, b, c, d) {
        return { $: 5, a: a, b: b, c: c, d: d };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$FetchPageData = F4($dillonkearns$elm_pages$Pages$Internal$Platform$FetchPageData_fn);
    var $dillonkearns$elm_pages$Pages$Navigation$Load = 1;
    var $dillonkearns$elm_pages$Pages$Navigation$LoadAfterSubmit_fn = function (a, b, c) {
        return { $: 1, a: a, b: b, c: c };
    }, $dillonkearns$elm_pages$Pages$Navigation$LoadAfterSubmit = F3($dillonkearns$elm_pages$Pages$Navigation$LoadAfterSubmit_fn);
    var $dillonkearns$elm_pages$Pages$Navigation$Loading_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Navigation$Loading = F2($dillonkearns$elm_pages$Pages$Navigation$Loading_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn = function (urlToGet, toMsg, _v0) {
        var model = _v0.a;
        var effect = _v0.b;
        var cancelIfStale = function () {
            var _v5 = model.aa;
            if ((!_v5.$) && (_v5.a.b.$ === 2)) {
                var _v6 = _v5.a;
                var transitionKey = _v6.a;
                var _v7 = _v6.b;
                return $dillonkearns$elm_pages$Pages$Internal$Platform$CancelRequest(transitionKey);
            }
            else {
                return $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect;
            }
        }();
        return _Utils_Tuple2(_Utils_update(model, {
            aA: model.aA + 1,
            aa: $elm$core$Maybe$Just(_Utils_Tuple2(model.aA, function () {
                var _v1 = model.aa;
                _v1$2: while (true) {
                    if (!_v1.$) {
                        switch (_v1.a.b.$) {
                            case 1:
                                var _v2 = _v1.a;
                                var _v3 = _v2.b;
                                var submitData = _v3.a;
                                return $dillonkearns$elm_pages$Pages$Navigation$LoadAfterSubmit_fn(submitData, $dillonkearns$elm_pages$UrlPath$fromString(urlToGet.e), 1);
                            case 0:
                                var _v4 = _v1.a;
                                var submitData = _v4.b.a;
                                return $dillonkearns$elm_pages$Pages$Navigation$LoadAfterSubmit_fn(submitData, $dillonkearns$elm_pages$UrlPath$fromString(urlToGet.e), 1);
                            default:
                                break _v1$2;
                        }
                    }
                    else {
                        break _v1$2;
                    }
                }
                return $dillonkearns$elm_pages$Pages$Navigation$Loading_fn($dillonkearns$elm_pages$UrlPath$fromString(urlToGet.e), 1);
            }()))
        }), $dillonkearns$elm_pages$Pages$Internal$Platform$Batch(_List_fromArray([
            $dillonkearns$elm_pages$Pages$Internal$Platform$FetchPageData_fn(model.aA, $elm$core$Maybe$Nothing, urlToGet, toMsg),
            cancelIfStale,
            effect
        ])));
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad = F3($dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn);
    var $dillonkearns$elm_form$Form$initSingle = { f$: $elm$core$Dict$empty, ag: false };
    var $dillonkearns$elm_form$Form$setSubmitAttempted_fn = function (fieldId, pageFormState) {
        return $elm$core$Dict$update_fn(fieldId, function (maybeForm) {
            if (!maybeForm.$) {
                var formState = maybeForm.a;
                return $elm$core$Maybe$Just(_Utils_update(formState, { ag: true }));
            }
            else {
                return $elm$core$Maybe$Just(_Utils_update($dillonkearns$elm_form$Form$initSingle, { ag: true }));
            }
        }, pageFormState);
    }, $dillonkearns$elm_form$Form$setSubmitAttempted = F2($dillonkearns$elm_form$Form$setSubmitAttempted_fn);
    var $dillonkearns$elm_form$Form$Validation$Blurred = 3;
    var $dillonkearns$elm_form$Form$Validation$Changed = 2;
    var $dillonkearns$elm_form$Form$Validation$Focused = 1;
    var $dillonkearns$elm_form$Form$Validation$NotVisited = 0;
    var $dillonkearns$elm_form$Form$statusRank = function (status) {
        switch (status) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return 3;
        }
    };
    var $dillonkearns$elm_form$Form$increaseStatusTo_fn = function (increaseTo, currentStatus) {
        return (_Utils_cmp($dillonkearns$elm_form$Form$statusRank(increaseTo), $dillonkearns$elm_form$Form$statusRank(currentStatus)) > 0) ? increaseTo : currentStatus;
    }, $dillonkearns$elm_form$Form$increaseStatusTo = F2($dillonkearns$elm_form$Form$increaseStatusTo_fn);
    var $dillonkearns$elm_form$Form$updateForm_fn = function (fieldEvent, formState) {
        return _Utils_update(formState, {
            f$: $elm$core$Dict$update_fn(fieldEvent.jM, function (previousValue_) {
                var previousValue = $elm$core$Maybe$withDefault_fn({ N: 0, is: fieldEvent.is }, previousValue_);
                return $elm$core$Maybe$Just(function () {
                    var _v0 = fieldEvent.i9;
                    switch (_v0.$) {
                        case 0:
                            var newValue = _v0.a;
                            return _Utils_update(previousValue, {
                                N: $dillonkearns$elm_form$Form$increaseStatusTo_fn(2, previousValue.N),
                                is: newValue
                            });
                        case 1:
                            return _Utils_update(previousValue, {
                                N: $dillonkearns$elm_form$Form$increaseStatusTo_fn(1, previousValue.N)
                            });
                        default:
                            return _Utils_update(previousValue, {
                                N: $dillonkearns$elm_form$Form$increaseStatusTo_fn(3, previousValue.N)
                            });
                    }
                }());
            }, formState.f$)
        });
    }, $dillonkearns$elm_form$Form$updateForm = F2($dillonkearns$elm_form$Form$updateForm_fn);
    var $dillonkearns$elm_form$Form$updateInternal_fn = function (fieldEvent, pageFormState) {
        return $elm$core$Dict$update_fn(fieldEvent.ht, function (previousValue_) {
            var previousValue = $elm$core$Maybe$withDefault_fn($dillonkearns$elm_form$Form$initSingle, previousValue_);
            return $elm$core$Maybe$Just($dillonkearns$elm_form$Form$updateForm_fn(fieldEvent, previousValue));
        }, pageFormState);
    }, $dillonkearns$elm_form$Form$updateInternal = F2($dillonkearns$elm_form$Form$updateInternal_fn);
    var $dillonkearns$elm_form$Form$update_fn = function (formMsg, formModel) {
        switch (formMsg.$) {
            case 2:
                var myMsg = formMsg.a;
                return _Utils_Tuple2(formModel, $elm$core$Task$perform_fn($elm$core$Basics$identity, $elm$core$Task$succeed(myMsg)));
            case 1:
                var value = formMsg.a;
                return _Utils_Tuple2($dillonkearns$elm_form$Form$updateInternal_fn(value, formModel), $elm$core$Platform$Cmd$none);
            default:
                var formData = formMsg.a;
                var maybeMsg = formMsg.b;
                return _Utils_Tuple2($dillonkearns$elm_form$Form$setSubmitAttempted_fn($elm$core$Maybe$withDefault_fn("form", formData.f5), formModel), $elm$core$Maybe$withDefault_fn($elm$core$Platform$Cmd$none, $elm$core$Maybe$map_fn(function (userMsg) {
                    return $elm$core$Task$perform_fn($elm$core$Basics$identity, $elm$core$Task$succeed(userMsg));
                }, maybeMsg)));
        }
    }, $dillonkearns$elm_form$Form$update = F2($dillonkearns$elm_form$Form$update_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$update_fn = function (config, appMsg, model) {
        update: while (true) {
            switch (appMsg.$) {
                case 3:
                    var formMsg = appMsg.a;
                    var _v1 = $dillonkearns$elm_form$Form$update_fn(formMsg, model.S);
                    var newModel = _v1.a;
                    var formCmd = _v1.b;
                    return _Utils_Tuple2(_Utils_update(model, { S: newModel }), $dillonkearns$elm_pages$Pages$Internal$Platform$RunCmd(formCmd));
                case 0:
                    var urlRequest = appMsg.a;
                    if (!urlRequest.$) {
                        var url = urlRequest.a;
                        var navigatingToSamePage = _Utils_eq(url.e, model.kG.e) && (_Utils_eq(url.a6, model.kG.a6) && (!_Utils_eq(url.aW, $elm$core$Maybe$Nothing)));
                        return navigatingToSamePage ? _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl($elm$url$Url$toString(url))) : _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserPushUrl($elm$url$Url$toString(url)));
                    }
                    else {
                        var href = urlRequest.a;
                        return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl(href));
                    }
                case 1:
                    var url = appMsg.a;
                    var _v3 = model.bQ;
                    if (!_v3.$) {
                        var _v4 = _v3.a;
                        var newPageData = _v4.a;
                        var newSharedData = _v4.b;
                        var newActionData = _v4.c;
                        return $dillonkearns$elm_pages$Pages$Internal$Platform$loadDataAndUpdateUrl_fn(_Utils_Tuple3(newPageData, newSharedData, newActionData), $elm$core$Maybe$Nothing, url, url, false, config, model);
                    }
                    else {
                        return (_Utils_eq(model.kG.e, url.e) && _Utils_eq(model.kG.a6, url.a6)) ? (_Utils_eq(url.aW, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(_Utils_update(model, { kG: url }), $dillonkearns$elm_pages$Pages$Internal$Platform$ScrollToTop) : _Utils_Tuple2(_Utils_update(model, { kG: url }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect)) : $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn(url, A3($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew, true, url, $elm$core$Maybe$Nothing), _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect));
                    }
                case 5:
                    var fetcherKey = appMsg.b;
                    var userMsgResult = appMsg.d;
                    if (!userMsgResult.$) {
                        var _v6 = userMsgResult.a;
                        var userMsg = _v6.a;
                        var actionOrRedirect = _v6.b;
                        if (!actionOrRedirect.$) {
                            var maybeFetcherDoneActionData = actionOrRedirect.a;
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn($dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn(model.kG.e, model), A3($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew, false, model.kG, $elm$core$Maybe$Nothing), function () {
                                if (!userMsg.$) {
                                    var justUserMsg = userMsg.a;
                                    return A2($dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg, justUserMsg, config);
                                }
                                else {
                                    return $elm$core$Basics$identity;
                                }
                            }()(_Utils_Tuple2(_Utils_update(model, {
                                J: $elm$core$Dict$update_fn(fetcherKey, $elm$core$Maybe$map(function (_v8) {
                                    var transitionId = _v8.a;
                                    var fetcherState = _v8.b;
                                    return _Utils_Tuple2(transitionId, _Utils_update(fetcherState, {
                                        N: $elm$core$Maybe$withDefault_fn($dillonkearns$elm_pages$Pages$ConcurrentSubmission$Submitting, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Pages$ConcurrentSubmission$Reloading, maybeFetcherDoneActionData))
                                    }));
                                }), model.J)
                            }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect)));
                        }
                        else {
                            var redirectTo = actionOrRedirect.a;
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn($dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn(redirectTo, model), A3($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew, false, model.kG, $elm$core$Maybe$Nothing), _Utils_Tuple2(_Utils_update(model, {
                                J: $elm$core$Dict$remove_fn(fetcherKey, model.J),
                                aI: true
                            }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect));
                        }
                    }
                    else {
                        return $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn($dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn(model.kG.e, model), A3($dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrlNew, false, model.kG, $elm$core$Maybe$Nothing), _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect));
                    }
                case 9:
                    var transitionId = appMsg.a;
                    var response = appMsg.b;
                    var toMsg = appMsg.c;
                    if ((!response.$) && (response.a.b.$ === 2)) {
                        var _v11 = response.a;
                        var redirectTo = _v11.b.a;
                        var isAbsoluteUrl = !_Utils_eq($elm$url$Url$fromString(redirectTo), $elm$core$Maybe$Nothing);
                        return isAbsoluteUrl ? _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl(redirectTo)) : $dillonkearns$elm_pages$Pages$Internal$Platform$startNewGetLoad_fn($dillonkearns$elm_pages$Pages$Internal$Platform$currentUrlWithPath_fn(redirectTo, model), toMsg, _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect));
                    }
                    else {
                        var $temp$appMsg = toMsg(response), $temp$model = $dillonkearns$elm_pages$Pages$Internal$Platform$clearLoadingFetchersAfterDataLoad_fn(transitionId, model);
                        appMsg = $temp$appMsg;
                        model = $temp$model;
                        continue update;
                    }
                case 2:
                    var userMsg_ = appMsg.a;
                    switch (userMsg_.$) {
                        case 0:
                            var userMsg = userMsg_.a;
                            return $dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg_fn(userMsg, config, _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect));
                        case 1:
                            var fields = userMsg_.a;
                            if (fields.fr) {
                                var payload = {
                                    fs: fields.fs,
                                    f$: fields.f$,
                                    f5: $elm$core$Maybe$Just(fields.f5),
                                    gi: fields.gi
                                };
                                return fields.fq ? function () {
                                    var _v13 = fields.eO;
                                    if (!_v13.$) {
                                        var justUserMsg = _v13.a;
                                        return A2($dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg, justUserMsg, config);
                                    }
                                    else {
                                        return $elm$core$Basics$identity;
                                    }
                                }()(_Utils_Tuple2(_Utils_update(model, { aA: model.aA + 1 }), $dillonkearns$elm_pages$Pages$Internal$Platform$SubmitFetcher_fn(fields.f5, model.aA, payload))) : function () {
                                    var _v14 = fields.eO;
                                    if (!_v14.$) {
                                        var justUserMsg = _v14.a;
                                        return A2($dillonkearns$elm_pages$Pages$Internal$Platform$performUserMsg, justUserMsg, config);
                                    }
                                    else {
                                        return $elm$core$Basics$identity;
                                    }
                                }()(_Utils_Tuple2(_Utils_update(model, {
                                    aa: $elm$core$Maybe$Just(_Utils_Tuple2(-1, $dillonkearns$elm_pages$Pages$Navigation$Submitting(payload)))
                                }), $dillonkearns$elm_pages$Pages$Internal$Platform$Submit(payload)));
                            }
                            else {
                                return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                            }
                        case 2:
                            var formMsg = userMsg_.a;
                            var _v15 = $dillonkearns$elm_form$Form$update_fn(formMsg, model.S);
                            var formModel = _v15.a;
                            var formCmd = _v15.b;
                            return _Utils_Tuple2(_Utils_update(model, { S: formModel }), $dillonkearns$elm_pages$Pages$Internal$Platform$RunCmd(_Platform_map_fn($dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, formCmd)));
                        default:
                            return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                    }
                case 4:
                    var scrollToTopWhenDone = appMsg.a;
                    var urlWithoutRedirectResolution = appMsg.b;
                    var maybeUserMsg = appMsg.c;
                    var updateResult = appMsg.d;
                    var _v16 = $elm$core$Result$map2_fn($elm$core$Tuple$pair, $elm$core$Result$mapError_fn(function (_v17) {
                        return "Http error";
                    }, updateResult), model.p);
                    if (!_v16.$) {
                        var _v18 = _v16.a;
                        var _v19 = _v18.a;
                        var newUrl = _v19.a;
                        var newData = _v19.b;
                        var previousPageData = _v18.b;
                        var redirectPending = !_Utils_eq(newUrl, urlWithoutRedirectResolution);
                        if (redirectPending) {
                            return _Utils_Tuple2(_Utils_update(model, {
                                bQ: function () {
                                    switch (newData.$) {
                                        case 0:
                                            var pageData = newData.a;
                                            var actionData = newData.b;
                                            return $elm$core$Maybe$Just(_Utils_Tuple3(pageData, previousPageData.M, actionData));
                                        case 1:
                                            var pageData = newData.a;
                                            var sharedData = newData.b;
                                            var actionData = newData.c;
                                            return $elm$core$Maybe$Just(_Utils_Tuple3(pageData, sharedData, actionData));
                                        default:
                                            return $elm$core$Maybe$Nothing;
                                    }
                                }(),
                                aI: true
                            }), $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserReplaceUrl(newUrl.e));
                        }
                        else {
                            var stayingOnSamePath = _Utils_eq(newUrl.e, model.kG.e);
                            var _v21 = function () {
                                switch (newData.$) {
                                    case 0:
                                        var pageData = newData.a;
                                        var actionData = newData.b;
                                        return _Utils_Tuple3(pageData, previousPageData.M, actionData);
                                    case 1:
                                        var pageData = newData.a;
                                        var sharedData = newData.b;
                                        var actionData = newData.c;
                                        return _Utils_Tuple3(pageData, sharedData, actionData);
                                    default:
                                        return _Utils_Tuple3(previousPageData.p, previousPageData.M, previousPageData.bz);
                                }
                            }();
                            var newPageData = _v21.a;
                            var newSharedData = _v21.b;
                            var newActionData = _v21.c;
                            var onActionMsg = $elm$core$Maybe$andThen_fn(config.j_, newActionData);
                            var _v23 = stayingOnSamePath ? _Utils_Tuple2(previousPageData.ab, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect) : $elm$core$Tuple$mapSecond_fn($dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd, A8(config.ba, model.S, $dillonkearns$elm_pages$Pages$Internal$Platform$toFetcherState(model.J), $elm$core$Maybe$map_fn($elm$core$Tuple$second, model.aa), newSharedData, newPageData, model.jz, config.hS({
                                aW: urlWithoutRedirectResolution.aW,
                                eG: model.kG.eG,
                                az: config.kH(urlWithoutRedirectResolution),
                                e: $dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath(urlWithoutRedirectResolution),
                                eW: model.kG.eW,
                                e$: model.kG.e$,
                                a6: urlWithoutRedirectResolution.a6
                            }), previousPageData.ab));
                            var userModel = _v23.a;
                            var userEffect = _v23.b;
                            var updatedPageData = { bz: newActionData, p: newPageData, M: newSharedData, ab: userModel };
                            var updatedModel = (model.aI || redirectPending) ? _Utils_update(model, {
                                p: $elm$core$Result$Ok(updatedPageData),
                                S: $elm$core$Dict$empty,
                                aI: false,
                                aa: $elm$core$Maybe$Nothing,
                                kG: newUrl
                            }) : _Utils_update(model, {
                                p: $elm$core$Result$Ok(updatedPageData),
                                aI: false,
                                aa: $elm$core$Maybe$Nothing,
                                kG: newUrl
                            });
                            return function () {
                                if (!onActionMsg.$) {
                                    var actionMsg = onActionMsg.a;
                                    return A2($dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg, config, actionMsg);
                                }
                                else {
                                    return $elm$core$Basics$identity;
                                }
                            }()(function () {
                                if (!maybeUserMsg.$) {
                                    var userMsg = maybeUserMsg.a;
                                    return A2($dillonkearns$elm_pages$Pages$Internal$Platform$withUserMsg, config, userMsg);
                                }
                                else {
                                    return $elm$core$Basics$identity;
                                }
                            }()(_Utils_Tuple2(_Utils_update(updatedModel, {
                                bA: $dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn(config, updatedModel).dz,
                                b6: newUrl.e
                            }), ((!stayingOnSamePath) && scrollToTopWhenDone) ? $dillonkearns$elm_pages$Pages$Internal$Platform$Batch(_List_fromArray([$dillonkearns$elm_pages$Pages$Internal$Platform$ScrollToTop, userEffect])) : userEffect)));
                        }
                    }
                    else {
                        return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$BrowserLoadUrl($elm$url$Url$toString(urlWithoutRedirectResolution)));
                    }
                case 7:
                    return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                case 8:
                    var pageDataBytes = appMsg.a;
                    return $elm$core$Result$withDefault_fn(function () {
                        var pageDataResult = function () {
                            var _v32 = $elm$bytes$Bytes$Decode$decode_fn(config.i_, pageDataBytes);
                            _v32$3: while (true) {
                                if (!_v32.$) {
                                    switch (_v32.a.$) {
                                        case 0:
                                            var _v33 = _v32.a;
                                            return $elm$core$Maybe$Nothing;
                                        case 1:
                                            var _v34 = _v32.a;
                                            var pageData = _v34.a;
                                            var shared = _v34.b;
                                            var actionData = _v34.c;
                                            return $elm$core$Maybe$Just($dillonkearns$elm_pages$Pages$Internal$Platform$OkPage_fn(shared, pageData, actionData));
                                        case 3:
                                            var notFound = _v32.a.a;
                                            return $elm$core$Maybe$Just($dillonkearns$elm_pages$Pages$Internal$Platform$NotFound(notFound));
                                        default:
                                            break _v32$3;
                                    }
                                }
                                else {
                                    break _v32$3;
                                }
                            }
                            return $elm$core$Maybe$Nothing;
                        }();
                        if ((!pageDataResult.$) && (!pageDataResult.a.$)) {
                            var _v30 = pageDataResult.a;
                            var sharedData = _v30.a;
                            var pageData = _v30.b;
                            var actionData = _v30.c;
                            var userFlags = $dillonkearns$elm_pages$Pages$Flags$BrowserFlags($elm$core$Result$withDefault_fn($elm$json$Json$Encode$null, _Json_run_fn(_Json_decodeField_fn("userFlags", $elm$json$Json$Decode$value), model.ee)));
                            var urls = { iI: config.iI, iY: model.kG };
                            var pagePath = $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath(urls);
                            var _v31 = A5(config.bL, userFlags, sharedData, pageData, actionData, $elm$core$Maybe$Just({
                                az: config.kH(model.kG),
                                ah: $elm$core$Maybe$Just({
                                    aW: model.kG.aW,
                                    eG: model.kG.eG,
                                    e: pagePath,
                                    eW: model.kG.eW,
                                    e$: model.kG.e$,
                                    a6: $elm$core$Maybe$withDefault_fn($elm$core$Dict$empty, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$QueryParams$fromString, model.kG.a6))
                                }),
                                e: { aW: model.kG.aW, e: pagePath, a6: model.kG.a6 }
                            }));
                            var userModel = _v31.a;
                            var userCmd = _v31.b;
                            var cmd = $dillonkearns$elm_pages$Pages$Internal$Platform$UserCmd(userCmd);
                            return _Utils_Tuple2(_Utils_update(model, {
                                bn: $elm$core$Maybe$Nothing,
                                p: $elm$core$Result$Ok({ bz: actionData, p: pageData, M: sharedData, ab: userModel })
                            }), cmd);
                        }
                        else {
                            return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                        }
                    }(), $elm$core$Result$map_fn(function (pageData) {
                        var newThing = $elm$bytes$Bytes$Decode$decode_fn(config.i_, pageDataBytes);
                        _v26$3: while (true) {
                            if (!newThing.$) {
                                switch (newThing.a.$) {
                                    case 0:
                                        var _v27 = newThing.a;
                                        var newPageData = _v27.a;
                                        var newActionData = _v27.b;
                                        return _Utils_Tuple2(_Utils_update(model, {
                                            bn: $elm$core$Maybe$Nothing,
                                            p: $elm$core$Result$Ok({ bz: newActionData, p: newPageData, M: pageData.M, ab: pageData.ab })
                                        }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                                    case 1:
                                        var _v28 = newThing.a;
                                        var newPageData = _v28.a;
                                        var newSharedData = _v28.b;
                                        var newActionData = _v28.c;
                                        return _Utils_Tuple2(_Utils_update(model, {
                                            bn: $elm$core$Maybe$Nothing,
                                            p: $elm$core$Result$Ok({ bz: newActionData, p: newPageData, M: newSharedData, ab: pageData.ab })
                                        }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                                    case 3:
                                        var info = newThing.a.a;
                                        return _Utils_Tuple2(_Utils_update(model, {
                                            bn: $elm$core$Maybe$Just(info)
                                        }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                                    default:
                                        break _v26$3;
                                }
                            }
                            else {
                                break _v26$3;
                            }
                        }
                        return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
                    }, model.p));
                default:
                    var fetcherKey = appMsg.a;
                    var transitionId = appMsg.b;
                    var fetcherData = appMsg.c;
                    var initiatedAt = appMsg.d;
                    return _Utils_Tuple2(_Utils_update(model, {
                        J: $elm$core$Dict$insert_fn(fetcherKey, _Utils_Tuple2(transitionId, { dY: initiatedAt, ea: fetcherData, N: $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Submitting }), model.J)
                    }), $dillonkearns$elm_pages$Pages$Internal$Platform$NoEffect);
            }
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$update = F3($dillonkearns$elm_pages$Pages$Internal$Platform$update_fn);
    var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
    var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
    var $elm$virtual_dom$VirtualDom$attribute_fn = function (key, value) {
        return _VirtualDom_attribute_fn(_VirtualDom_noOnOrFormAction(key), _VirtualDom_noJavaScriptOrHtmlUri(value));
    }, $elm$virtual_dom$VirtualDom$attribute = F2($elm$virtual_dom$VirtualDom$attribute_fn);
    var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
    var $dillonkearns$elm_pages$Pages$Internal$Platform$onViewChangeElement = function (currentUrl) {
        return $elm$html$Html$div_fn(_List_fromArray([
            $elm$virtual_dom$VirtualDom$attribute_fn("data-url", $elm$url$Url$toString(currentUrl)),
            $elm$virtual_dom$VirtualDom$attribute_fn("display", "none")
        ]), _List_Nil);
    };
    var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
    var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
    var $dillonkearns$elm_pages$AriaLiveAnnouncer$mainView = function (title) {
        return $elm$html$Html$div_fn(_List_fromArray([
            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$id_a0, "elm-pages-announcer"),
            $elm$virtual_dom$VirtualDom$attribute_fn("aria-live", "assertive"),
            $elm$virtual_dom$VirtualDom$attribute_fn("aria-atomic", "true"),
            _VirtualDom_style_fn("position", "absolute"),
            _VirtualDom_style_fn("top", "0"),
            _VirtualDom_style_fn("width", "1px"),
            _VirtualDom_style_fn("height", "1px"),
            _VirtualDom_style_fn("padding", "0"),
            _VirtualDom_style_fn("overflow", "hidden"),
            _VirtualDom_style_fn("clip", "rect(0, 0, 0, 0)"),
            _VirtualDom_style_fn("whiteSpace", "nowrap"),
            _VirtualDom_style_fn("border", "0")
        ]), _List_fromArray([
            $elm$html$Html$text("Navigated to " + title)
        ]));
    };
    var $dillonkearns$elm_pages$AriaLiveAnnouncer$view = function (title) {
        return _VirtualDom_lazy_fn($dillonkearns$elm_pages$AriaLiveAnnouncer$mainView, title);
    };
    var $dillonkearns$elm_pages$Pages$Internal$Platform$view_fn = function (config, model) {
        var _v0 = $dillonkearns$elm_pages$Pages$Internal$Platform$mainView_fn(config, model);
        var body = _v0.iL;
        var title = _v0.dz;
        return {
            iL: _Utils_ap(_List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$Platform$onViewChangeElement(model.kG),
                $dillonkearns$elm_pages$AriaLiveAnnouncer$view(model.bA)
            ]), $elm$core$List$map_fn($elm$html$Html$map($dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg), body)),
            dz: title
        };
    }, $dillonkearns$elm_pages$Pages$Internal$Platform$view = F2($dillonkearns$elm_pages$Pages$Internal$Platform$view_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Platform$application = function (config) {
        return $elm$browser$Browser$application({
            bL: F3(function (flags, url, key) {
                var _v0 = $dillonkearns$elm_pages$Pages$Internal$Platform$init_fn(config, flags, url, $elm$core$Maybe$Just(key));
                var model = _v0.a;
                var effect = _v0.b;
                return _Utils_Tuple2(model, $dillonkearns$elm_pages$Pages$Internal$Platform$perform_fn(config, model, effect));
            }),
            j$: $dillonkearns$elm_pages$Pages$Internal$Platform$UrlChanged,
            j0: $dillonkearns$elm_pages$Pages$Internal$Platform$LinkClicked,
            bV: function (model) {
                var _v1 = model.p;
                if (!_v1.$) {
                    var pageData = _v1.a;
                    var urls = { iY: model.kG };
                    return $elm$core$Platform$Sub$batch(_List_fromArray([
                        _Platform_map_fn(A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$Pages$Internal$Msg$UserMsg, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg), A3(config.bV, config.kH(model.kG), $dillonkearns$elm_pages$UrlPath$join(config.kj(config.kH(urls.iY))), pageData.ab)),
                        _Platform_map_fn($dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadCompleteNew, config.jr)
                    ]));
                }
                else {
                    return _Platform_map_fn($dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadCompleteNew, config.jr);
                }
            },
            ba: F2(function (msg, model) {
                return $elm$core$Tuple$mapSecond_fn(A2($dillonkearns$elm_pages$Pages$Internal$Platform$perform, config, model), $dillonkearns$elm_pages$Pages$Internal$Platform$update_fn(config, msg, model));
            }),
            E: $dillonkearns$elm_pages$Pages$Internal$Platform$view(config)
        });
    };
    var $author$project$Route$baseUrl = "/neco8.log";
    var $author$project$Route$baseUrlAsPath = $elm$core$List$filter_fn(function (item) {
        return !$elm$core$String$isEmpty(item);
    }, $elm$core$String$split_fn("/", $author$project$Route$baseUrl));
    var $author$project$Main$DataAbout = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Main$DataArticle = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Main$DataArticle__Slug_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Main$DataBlog = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Main$DataBlog__Slug_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Main$DataIndex = function (a) {
        return { $: 5, a: a };
    };
    var $elm$bytes$Bytes$Decode$fail = _Bytes_decodeFailure;
    var $lamdera$codecs$Lamdera$Wire3$succeedDecode = $elm$bytes$Bytes$Decode$succeed;
    var $author$project$Route$About$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Article$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Article$Slug_$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Blog$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $elm$bytes$Bytes$Decode$andThen_fn = function (callback, _v0) {
        var decodeA = _v0;
        return F2(function (bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var newOffset = _v1.a;
            var a = _v1.b;
            var _v2 = callback(a);
            var decodeB = _v2;
            return A2(decodeB, bites, newOffset);
        });
    }, $elm$bytes$Bytes$Decode$andThen = F2($elm$bytes$Bytes$Decode$andThen_fn);
    var $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn = function (d, d2) {
        return $elm$bytes$Bytes$Decode$andThen_fn(function (v) {
            return $elm$bytes$Bytes$Decode$map_fn(v, d);
        }, d2);
    }, $lamdera$codecs$Lamdera$Wire3$andMapDecode = F2($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn);
    var $lamdera$codecs$Lamdera$Wire3$failDecode = $elm$bytes$Bytes$Decode$fail;
    var $lamdera$codecs$Lamdera$Wire3$decodeMaybe = function (decVal) {
        return $elm$bytes$Bytes$Decode$andThen_fn(function (c) {
            switch (c) {
                case 0:
                    return $lamdera$codecs$Lamdera$Wire3$succeedDecode($elm$core$Maybe$Nothing);
                case 1:
                    return $elm$bytes$Bytes$Decode$map_fn($elm$core$Maybe$Just, decVal);
                default:
                    return $lamdera$codecs$Lamdera$Wire3$failDecode;
            }
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    };
    var $lamdera$codecs$Lamdera$Wire3$endianness = 0;
    var $elm$bytes$Bytes$Decode$float64 = function (endianness) {
        return _Bytes_read_f64(!endianness);
    };
    var $lamdera$codecs$Lamdera$Wire3$decodeFloat64 = $elm$bytes$Bytes$Decode$float64($lamdera$codecs$Lamdera$Wire3$endianness);
    var $lamdera$codecs$Lamdera$Wire3$identityFloatToInt = $elm$core$Basics$floor;
    var $lamdera$codecs$Lamdera$Wire3$intDivBy_fn = function (b, a) {
        var v = a / b;
        return (v < 0) ? (-$elm$core$Basics$floor(-v)) : $elm$core$Basics$floor(v);
    }, $lamdera$codecs$Lamdera$Wire3$intDivBy = F2($lamdera$codecs$Lamdera$Wire3$intDivBy_fn);
    var $lamdera$codecs$Lamdera$Wire3$unsignedToSigned = function (i) {
        return (_Basics_modBy_fn(2, i) === 1) ? $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(-2, i + 1) : $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(2, i);
    };
    var $lamdera$codecs$Lamdera$Wire3$decodeInt64 = function () {
        var d = $lamdera$codecs$Lamdera$Wire3$andMapDecode($elm$bytes$Bytes$Decode$unsignedInt8);
        return $elm$bytes$Bytes$Decode$andThen_fn(function (n0) {
            return (n0 <= 215) ? $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$unsignedToSigned, $elm$bytes$Bytes$Decode$succeed(n0)) : ((n0 < 252) ? $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$unsignedToSigned, d($elm$bytes$Bytes$Decode$succeed(function (b0) {
                return (((n0 - 216) * 256) + b0) + 216;
            }))) : ((n0 === 252) ? $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$unsignedToSigned, d(d($elm$bytes$Bytes$Decode$succeed(F2(function (b0, b1) {
                return (b0 * 256) + b1;
            }))))) : ((n0 === 253) ? $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$unsignedToSigned, d(d(d($elm$bytes$Bytes$Decode$succeed(F3(function (b0, b1, b2) {
                return (((b0 * 256) + b1) * 256) + b2;
            })))))) : ((n0 === 254) ? $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$unsignedToSigned, d(d(d(d($elm$bytes$Bytes$Decode$succeed(F4(function (b0, b1, b2, b3) {
                return (((((b0 * 256) + b1) * 256) + b2) * 256) + b3;
            }))))))) : $elm$bytes$Bytes$Decode$map_fn($lamdera$codecs$Lamdera$Wire3$identityFloatToInt, $lamdera$codecs$Lamdera$Wire3$decodeFloat64)))));
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    }();
    var $elm$bytes$Bytes$Decode$string = function (n) {
        return _Bytes_read_string(n);
    };
    var $lamdera$codecs$Lamdera$Wire3$decodeString = $elm$bytes$Bytes$Decode$andThen_fn($elm$bytes$Bytes$Decode$string, $lamdera$codecs$Lamdera$Wire3$decodeInt64);
    var $lamdera$codecs$Lamdera$Wire3$decodeList = function (decoder) {
        var listStep = function (_v0) {
            var n = _v0.a;
            var xs = _v0.b;
            return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done(xs)) : $elm$bytes$Bytes$Decode$map_fn(function (x) {
                return $elm$bytes$Bytes$Decode$Loop(_Utils_Tuple2(n - 1, _List_Cons(x, xs)));
            }, decoder);
        };
        return $elm$bytes$Bytes$Decode$andThen_fn(function (len) {
            return $elm$bytes$Bytes$Decode$map_fn($elm$core$List$reverse, $elm$bytes$Bytes$Decode$loop_fn(_Utils_Tuple2(len, _List_Nil), listStep));
        }, $lamdera$codecs$Lamdera$Wire3$decodeInt64);
    };
    var $lamdera$codecs$Lamdera$Wire3$andThenDecode = $elm$bytes$Bytes$Decode$andThen;
    var $lamdera$codecs$Lamdera$Wire3$decodeInt = $lamdera$codecs$Lamdera$Wire3$decodeInt64;
    var $justinmimbs$date$Date$w3_decode_RataDie = $lamdera$codecs$Lamdera$Wire3$decodeInt;
    var $justinmimbs$date$Date$w3_decode_Date = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        if (!w3v) {
            return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($justinmimbs$date$Date$w3_decode_RataDie, $lamdera$codecs$Lamdera$Wire3$succeedDecode($elm$core$Basics$identity));
        }
        else {
            return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $author$project$BlogPost$w3_decode_BlogPost = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodeString), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($justinmimbs$date$Date$w3_decode_Date, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F4(function (content0, published0, tags0, title0) {
        return { dN: content0, di: published0, gJ: tags0, dz: title0 };
    }))))));
    var $author$project$Route$Blog$Slug_$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$BlogPost$w3_decode_BlogPost, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$BlogPost$w3_decode_BlogPost, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (post0, slug0) {
        return { eX: post0, cl: slug0 };
    }))))), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$BlogPost$w3_decode_BlogPost, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (post0, slug0) {
        return { eX: post0, cl: slug0 };
    }))))), $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (next0, prev0) {
        return { hO: next0, hY: prev0 };
    })))), $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (around0, post0) {
        return { iG: around0, eX: post0 };
    }))));
    var $author$project$Route$Index$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$BlogPost$w3_decode_BlogPost, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (post0, slug0) {
        return { eX: post0, cl: slug0 };
    }))))), $lamdera$codecs$Lamdera$Wire3$succeedDecode(function (blogPosts0) {
        return { eq: blogPosts0 };
    }));
    var $author$project$Main$byteDecodePageData = function (route) {
        if (route.$ === 1) {
            return $elm$bytes$Bytes$Decode$fail;
        }
        else {
            var route0 = route.a;
            switch (route0.$) {
                case 0:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataArticle__Slug_, $author$project$Route$Article$Slug_$w3_decode_Data);
                case 1:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataBlog__Slug_, $author$project$Route$Blog$Slug_$w3_decode_Data);
                case 2:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataAbout, $author$project$Route$About$w3_decode_Data);
                case 3:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataArticle, $author$project$Route$Article$w3_decode_Data);
                case 4:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataBlog, $author$project$Route$Blog$w3_decode_Data);
                default:
                    return $elm$bytes$Bytes$Decode$map_fn($author$project$Main$DataIndex, $author$project$Route$Index$w3_decode_Data);
            }
        }
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength = function (s) {
        return $elm$bytes$Bytes$Encode$sequence(s);
    };
    var $author$project$Route$About$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Article$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Article$Slug_$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Blog$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn = function (encVal, s) {
        if (s.$ === 1) {
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(0)
            ]));
        }
        else {
            var v = s.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(1),
                encVal(v)
            ]));
        }
    }, $lamdera$codecs$Lamdera$Wire3$encodeMaybe = F2($lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn);
    var $elm$bytes$Bytes$Encode$F64_fn = function (a, b) {
        return { $: 7, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$F64 = F2($elm$bytes$Bytes$Encode$F64_fn);
    var $elm$bytes$Bytes$Encode$float64 = $elm$bytes$Bytes$Encode$F64;
    var $lamdera$codecs$Lamdera$Wire3$encodeFloat64 = function (f) {
        return $elm$bytes$Bytes$Encode$F64_fn($lamdera$codecs$Lamdera$Wire3$endianness, f);
    };
    var $lamdera$codecs$Lamdera$Wire3$signedToUnsigned = function (i) {
        return (i < 0) ? (((-2) * i) - 1) : (2 * i);
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeInt64 = function (i) {
        var n = $lamdera$codecs$Lamdera$Wire3$signedToUnsigned(i);
        var n0 = _Basics_modBy_fn(256, n);
        var n1 = _Basics_modBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, n));
        var n2 = _Basics_modBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, n)));
        var n3 = _Basics_modBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, n))));
        var ei = function (e) {
            return $elm$bytes$Bytes$Encode$sequence($elm$core$List$map_fn($elm$bytes$Bytes$Encode$unsignedInt8, e));
        };
        return (n <= 215) ? ei(_List_fromArray([n])) : ((n <= 9431) ? ei(_List_fromArray([
            216 + $lamdera$codecs$Lamdera$Wire3$intDivBy_fn(256, n - 216),
            _Basics_modBy_fn(256, n - 216)
        ])) : ((_Utils_cmp(n, 256 * 256) < 0) ? ei(_List_fromArray([252, n1, n0])) : ((_Utils_cmp(n, (256 * 256) * 256) < 0) ? ei(_List_fromArray([253, n2, n1, n0])) : ((_Utils_cmp(n, ((256 * 256) * 256) * 256) < 0) ? ei(_List_fromArray([254, n3, n2, n1, n0])) : $elm$bytes$Bytes$Encode$sequence(_List_fromArray([
            $elm$bytes$Bytes$Encode$unsignedInt8(255),
            $lamdera$codecs$Lamdera$Wire3$encodeFloat64(i)
        ]))))));
    };
    var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
    var $elm$bytes$Bytes$Encode$Utf8_fn = function (a, b) {
        return { $: 9, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$Utf8 = F2($elm$bytes$Bytes$Encode$Utf8_fn);
    var $elm$bytes$Bytes$Encode$string = function (str) {
        return $elm$bytes$Bytes$Encode$Utf8_fn(_Bytes_getStringWidth(str), str);
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeString = function (s) {
        return $elm$bytes$Bytes$Encode$sequence(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeInt64($elm$bytes$Bytes$Encode$getStringWidth(s)),
            $elm$bytes$Bytes$Encode$string(s)
        ]));
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeList_fn = function (enc, s) {
        return $elm$bytes$Bytes$Encode$sequence(_List_Cons($lamdera$codecs$Lamdera$Wire3$encodeInt64($elm$core$List$length(s)), $elm$core$List$map_fn(enc, s)));
    }, $lamdera$codecs$Lamdera$Wire3$encodeList = F2($lamdera$codecs$Lamdera$Wire3$encodeList_fn);
    var $lamdera$codecs$Lamdera$Wire3$encodeInt = $lamdera$codecs$Lamdera$Wire3$encodeInt64;
    var $justinmimbs$date$Date$w3_encode_RataDie = $lamdera$codecs$Lamdera$Wire3$encodeInt;
    var $justinmimbs$date$Date$w3_encode_Date = function (w3v) {
        var v0 = w3v;
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $elm$bytes$Bytes$Encode$unsignedInt8(0),
            $justinmimbs$date$Date$w3_encode_RataDie(v0)
        ]));
    };
    var $author$project$BlogPost$w3_encode_BlogPost = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.dN),
            $justinmimbs$date$Date$w3_encode_Date(w3_rec_var0.di),
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($lamdera$codecs$Lamdera$Wire3$encodeString, w3_rec_var0.gJ),
            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.dz)
        ]));
    };
    var $author$project$Route$Blog$Slug_$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            function (w3_rec_var1) {
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn(function (w3_rec_var2) {
                        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                            $author$project$BlogPost$w3_encode_BlogPost(w3_rec_var2.eX),
                            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var2.cl)
                        ]));
                    }, w3_rec_var1.hO),
                    $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn(function (w3_rec_var2) {
                        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                            $author$project$BlogPost$w3_encode_BlogPost(w3_rec_var2.eX),
                            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var2.cl)
                        ]));
                    }, w3_rec_var1.hY)
                ]));
            }(w3_rec_var0.iG),
            $author$project$BlogPost$w3_encode_BlogPost(w3_rec_var0.eX)
        ]));
    };
    var $author$project$Route$Index$w3_encode_Data = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn(function (w3_rec_var1) {
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $author$project$BlogPost$w3_encode_BlogPost(w3_rec_var1.eX),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var1.cl)
                ]));
            }, w3_rec_var0.eq)
        ]));
    };
    var $author$project$ErrorPage$w3_encode_ErrorPage = function (w3v) {
        if (w3v.$ === 1) {
            var v0 = w3v.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(0),
                $lamdera$codecs$Lamdera$Wire3$encodeString(v0)
            ]));
        }
        else {
            return $elm$bytes$Bytes$Encode$unsignedInt8(1);
        }
    };
    var $author$project$Main$byteEncodePageData = function (pageData) {
        switch (pageData.$) {
            case 7:
                var thisPageData = pageData.a;
                return $author$project$ErrorPage$w3_encode_ErrorPage(thisPageData);
            case 6:
                return $elm$bytes$Bytes$Encode$unsignedInt8(0);
            case 0:
                var thisPageData = pageData.a;
                return $author$project$Route$Article$Slug_$w3_encode_Data(thisPageData);
            case 1:
                var thisPageData = pageData.a;
                return $author$project$Route$Blog$Slug_$w3_encode_Data(thisPageData);
            case 2:
                var thisPageData = pageData.a;
                return $author$project$Route$About$w3_encode_Data(thisPageData);
            case 3:
                var thisPageData = pageData.a;
                return $author$project$Route$Article$w3_encode_Data(thisPageData);
            case 4:
                var thisPageData = pageData.a;
                return $author$project$Route$Blog$w3_encode_Data(thisPageData);
            default:
                var thisPageData = pageData.a;
                return $author$project$Route$Index$w3_encode_Data(thisPageData);
        }
    };
    var $author$project$Main$Data404NotFoundPage____ = { $: 6 };
    var $dillonkearns$elm_pages$Server$Response$mapError_fn = function (mapFn, pageServerResponse) {
        switch (pageServerResponse.$) {
            case 0:
                var response = pageServerResponse.a;
                var data = pageServerResponse.b;
                return $dillonkearns$elm_pages$PageServerResponse$RenderPage_fn(response, data);
            case 1:
                var serverResponse = pageServerResponse.a;
                return $dillonkearns$elm_pages$PageServerResponse$ServerResponse(serverResponse);
            default:
                var error = pageServerResponse.a;
                var response = pageServerResponse.b;
                return $dillonkearns$elm_pages$PageServerResponse$ErrorPage_fn(mapFn(error), response);
        }
    }, $dillonkearns$elm_pages$Server$Response$mapError = F2($dillonkearns$elm_pages$Server$Response$mapError_fn);
    var $dillonkearns$elm_pages$Server$Response$withStatusCode_fn = function (statusCode, serverResponse) {
        switch (serverResponse.$) {
            case 0:
                var response = serverResponse.a;
                var data = serverResponse.b;
                return $dillonkearns$elm_pages$PageServerResponse$RenderPage_fn(_Utils_update(response, { _: statusCode }), data);
            case 1:
                var response = serverResponse.a;
                return $dillonkearns$elm_pages$PageServerResponse$ServerResponse(_Utils_update(response, { _: statusCode }));
            default:
                var error = serverResponse.a;
                return $elm$core$Basics$never(error);
        }
    }, $dillonkearns$elm_pages$Server$Response$withStatusCode = F2($dillonkearns$elm_pages$Server$Response$withStatusCode_fn);
    var $author$project$Main$dataForRoute_fn = function (requestPayload, maybeRoute) {
        if (maybeRoute.$ === 1) {
            return $dillonkearns$elm_pages$BackendTask$succeed($dillonkearns$elm_pages$Server$Response$mapError_fn($elm$core$Basics$never, $dillonkearns$elm_pages$Server$Response$withStatusCode_fn(404, $dillonkearns$elm_pages$Server$Response$render($author$project$Main$Data404NotFoundPage____))));
        }
        else {
            var justRoute = maybeRoute.a;
            switch (justRoute.$) {
                case 0:
                    var routeParams = justRoute.a;
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataArticle__Slug_), A2($author$project$Route$Article$Slug_$route.hc, requestPayload, routeParams));
                case 1:
                    var routeParams = justRoute.a;
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataBlog__Slug_), A2($author$project$Route$Blog$Slug_$route.hc, requestPayload, routeParams));
                case 2:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataAbout), A2($author$project$Route$About$route.hc, requestPayload, {}));
                case 3:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataArticle), A2($author$project$Route$Article$route.hc, requestPayload, {}));
                case 4:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataBlog), A2($author$project$Route$Blog$route.hc, requestPayload, {}));
                default:
                    return $dillonkearns$elm_pages$BackendTask$map_fn($dillonkearns$elm_pages$Server$Response$map($author$project$Main$DataIndex), A2($author$project$Route$Index$route.hc, requestPayload, {}));
            }
        }
    }, $author$project$Main$dataForRoute = F2($author$project$Main$dataForRoute_fn);
    var $lamdera$codecs$Lamdera$Wire3$decodeResult_fn = function (decErr, decVal) {
        return $elm$bytes$Bytes$Decode$andThen_fn(function (c) {
            switch (c) {
                case 0:
                    return $elm$bytes$Bytes$Decode$map_fn($elm$core$Result$Ok, decVal);
                case 1:
                    return $elm$bytes$Bytes$Decode$map_fn($elm$core$Result$Err, decErr);
                default:
                    return $lamdera$codecs$Lamdera$Wire3$failDecode;
            }
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    }, $lamdera$codecs$Lamdera$Wire3$decodeResult = F2($lamdera$codecs$Lamdera$Wire3$decodeResult_fn);
    var $lamdera$codecs$Lamdera$Wire3$decodeBool = $elm$bytes$Bytes$Decode$andThen_fn(function (s) {
        switch (s) {
            case 0:
                return $elm$bytes$Bytes$Decode$succeed(false);
            case 1:
                return $elm$bytes$Bytes$Decode$succeed(true);
            default:
                return $elm$bytes$Bytes$Decode$fail;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $lamdera$codecs$Lamdera$Wire3$decodePair_fn = function (c_a, c_b) {
        return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(c_b, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(c_a, $elm$bytes$Bytes$Decode$succeed(F2(function (a, b) {
            return _Utils_Tuple2(a, b);
        }))));
    }, $lamdera$codecs$Lamdera$Wire3$decodePair = F2($lamdera$codecs$Lamdera$Wire3$decodePair_fn);
    var $lamdera$codecs$Lamdera$Wire3$decodeDict_fn = function (decKey, decValue) {
        return $elm$bytes$Bytes$Decode$map_fn($elm$core$Dict$fromList, $lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodePair_fn(decKey, decValue)));
    }, $lamdera$codecs$Lamdera$Wire3$decodeDict = F2($lamdera$codecs$Lamdera$Wire3$decodeDict_fn);
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$BytesBody_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$BytesBody = F2($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$BytesBody_fn);
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody = { $: 0 };
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody = F2($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody_fn);
    var $elm$bytes$Bytes$Decode$bytes = function (n) {
        return _Bytes_read_bytes(n);
    };
    var $lamdera$codecs$Lamdera$Wire3$decodeBytes = $elm$bytes$Bytes$Decode$andThen_fn($elm$bytes$Bytes$Decode$bytes, $lamdera$codecs$Lamdera$Wire3$decodeInt);
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$w3_decode_Body = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeBytes, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$BytesBody)));
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody);
            case 2:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$failDecode, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$JsonBody));
            case 3:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody)));
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$Pages$StaticHttp$Request$w3_decode_Request = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeBool, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodePair_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$decodeString)), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeDict_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$decodeString), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodeString), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe($lamdera$codecs$Lamdera$Wire3$failDecode), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$w3_decode_Body, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F8(function (body0, cacheOptions0, dir0, env0, headers0, method0, quiet0, url0) {
        return { iL: body0, et: cacheOptions0, hf: dir0, hh: env0, jo: headers0, gi: method0, kb: quiet0, kG: url0 };
    }))))))))));
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_decode_RawRequest_fn = function (w3_x_c_error, w3_x_c_value) {
        return $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
            switch (w3v) {
                case 0:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeResult_fn(w3_x_c_error, w3_x_c_value), $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute));
                case 1:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$failDecode, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($dillonkearns$elm_pages$Pages$StaticHttp$Request$w3_decode_Request), $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$StaticHttpRequest$Request)));
                default:
                    return $lamdera$codecs$Lamdera$Wire3$failDecode;
            }
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    }, $dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_decode_RawRequest = F2($dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_decode_RawRequest_fn);
    var $dillonkearns$elm_pages$BackendTask$w3_decode_BackendTask_fn = function (w3_x_c_error, w3_x_c_value) {
        return $dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_decode_RawRequest_fn(w3_x_c_error, w3_x_c_value);
    }, $dillonkearns$elm_pages$BackendTask$w3_decode_BackendTask = F2($dillonkearns$elm_pages$BackendTask$w3_decode_BackendTask_fn);
    var $dillonkearns$elm_pages$Pages$Internal$FatalError$w3_decode_FatalError = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        if (!w3v) {
            return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (body0, title0) {
                return { iL: body0, dz: title0 };
            })))), $lamdera$codecs$Lamdera$Wire3$succeedDecode($elm$core$Basics$identity));
        }
        else {
            return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$FatalError$w3_decode_FatalError = $dillonkearns$elm_pages$Pages$Internal$FatalError$w3_decode_FatalError;
    var $author$project$Route$About$w3_decode_RouteParams = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$About$w3_decode_ActionData = $dillonkearns$elm_pages$BackendTask$w3_decode_BackendTask_fn($dillonkearns$elm_pages$FatalError$w3_decode_FatalError, $lamdera$codecs$Lamdera$Wire3$decodeList($author$project$Route$About$w3_decode_RouteParams));
    var $author$project$Route$Article$w3_decode_ActionData = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Article$Slug_$w3_decode_ActionData = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Blog$w3_decode_ActionData = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Blog$Slug_$w3_decode_ActionData = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Route$Index$w3_decode_ActionData = $lamdera$codecs$Lamdera$Wire3$succeedDecode({});
    var $author$project$Main$w3_decode_ActionData = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$About$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataAbout));
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Article$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataArticle));
            case 2:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Article$Slug_$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataArticle__Slug_));
            case 3:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Blog$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataBlog));
            case 4:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Blog$Slug_$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataBlog__Slug_));
            case 5:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Index$w3_decode_ActionData, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$ActionDataIndex));
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $lamdera$codecs$Lamdera$Wire3$decodeUnit = $elm$bytes$Bytes$Decode$succeed(0), $lamdera$codecs$Lamdera$Wire3$decodeUnit_fn = $lamdera$codecs$Lamdera$Wire3$decodeUnit.f;
    var $author$project$Shared$w3_decode_Data = $lamdera$codecs$Lamdera$Wire3$decodeUnit;
    var $author$project$ErrorPage$InternalError = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$ErrorPage$NotFound = { $: 0 };
    var $author$project$ErrorPage$w3_decode_ErrorPage = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$ErrorPage$InternalError));
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$ErrorPage$NotFound);
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $author$project$Main$w3_decode_PageData = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$Data404NotFoundPage____);
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$About$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataAbout));
            case 2:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Article$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataArticle));
            case 3:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Article$Slug_$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataArticle__Slug_));
            case 4:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Blog$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataBlog));
            case 5:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Blog$Slug_$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataBlog__Slug_));
            case 6:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$ErrorPage$w3_decode_ErrorPage, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataErrorPage____));
            case 7:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($author$project$Route$Index$w3_decode_Data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($author$project$Main$DataIndex));
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$Action = function (a) {
        return { $: 4, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$HotUpdate_fn = function (a, b, c) {
        return { $: 1, a: a, b: b, c: c };
    }, $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$HotUpdate = F3($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$HotUpdate_fn);
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$NotFound = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$Redirect = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$RenderPage_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$RenderPage = F2($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$RenderPage_fn);
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute = { $: 0 };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback = F2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback_fn);
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute = function (a) {
        return { $: 3, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_Record = $lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodePair_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$decodeString));
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat = { $: 2 };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat = { $: 1 };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_Ending = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional));
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat);
            case 2:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat);
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment = function (a) {
        return { $: 0, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_Segment = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment));
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment));
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_RoutePattern = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_Segment), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe($dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_Ending), $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (ending0, segments0) {
        return { aF: ending0, aL: segments0 };
    }))));
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_ModuleContext = $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_decode_RoutePattern, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodeString), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_Record, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F3(function (matchedRouteParams0, moduleName0, routePattern0) {
        return { jE: matchedRouteParams0, c6: moduleName0, dn: routePattern0 };
    })))));
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_NotFoundReason = $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
        switch (w3v) {
            case 0:
                return $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute);
            case 1:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_Record), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_ModuleContext, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered)));
            case 2:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeList($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_Record), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_ModuleContext, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback)));
            case 3:
                return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_ModuleContext, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute));
            default:
                return $lamdera$codecs$Lamdera$Wire3$failDecode;
        }
    }, $elm$bytes$Bytes$Decode$unsignedInt8);
    var $dillonkearns$elm_pages$UrlPath$w3_decode_UrlPath = $lamdera$codecs$Lamdera$Wire3$decodeList($lamdera$codecs$Lamdera$Wire3$decodeString);
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_decode_ResponseSketch_fn = function (w3_x_c_data, w3_x_c_action, w3_x_c_shared) {
        return $elm$bytes$Bytes$Decode$andThen_fn(function (w3v) {
            switch (w3v) {
                case 0:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(w3_x_c_action, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$Action));
                case 1:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe(w3_x_c_action), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(w3_x_c_shared, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(w3_x_c_data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$HotUpdate))));
                case 2:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_decode_NotFoundReason, $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($dillonkearns$elm_pages$UrlPath$w3_decode_UrlPath, $lamdera$codecs$Lamdera$Wire3$succeedDecode(F2(function (path0, reason0) {
                        return { e: path0, e4: reason0 };
                    })))), $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$NotFound));
                case 3:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeString, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$Redirect));
                case 4:
                    return $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn($lamdera$codecs$Lamdera$Wire3$decodeMaybe(w3_x_c_action), $lamdera$codecs$Lamdera$Wire3$andMapDecode_fn(w3_x_c_data, $lamdera$codecs$Lamdera$Wire3$succeedDecode($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$RenderPage)));
                default:
                    return $lamdera$codecs$Lamdera$Wire3$failDecode;
            }
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    }, $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_decode_ResponseSketch = F3($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_decode_ResponseSketch_fn);
    var $author$project$Main$decodeResponse = $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_decode_ResponseSketch_fn($author$project$Main$w3_decode_PageData, $author$project$Main$w3_decode_ActionData, $author$project$Shared$w3_decode_Data);
    var $lamdera$codecs$Lamdera$Wire3$encodeResult_fn = function (encErr, encVal, s) {
        if (!s.$) {
            var v = s.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(0),
                encVal(v)
            ]));
        }
        else {
            var v = s.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(1),
                encErr(v)
            ]));
        }
    }, $lamdera$codecs$Lamdera$Wire3$encodeResult = F3($lamdera$codecs$Lamdera$Wire3$encodeResult_fn);
    var $lamdera$codecs$Lamdera$Wire3$failEncode = function (a) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeBool = function (b) {
        return $elm$bytes$Bytes$Encode$unsignedInt8(function () {
            if (!b) {
                return 0;
            }
            else {
                return 1;
            }
        }());
    };
    var $lamdera$codecs$Lamdera$Wire3$encodePair_fn = function (c_a, c_b, _v0) {
        var a = _v0.a;
        var b = _v0.b;
        return $elm$bytes$Bytes$Encode$sequence(_List_fromArray([
            c_a(a),
            c_b(b)
        ]));
    }, $lamdera$codecs$Lamdera$Wire3$encodePair = F3($lamdera$codecs$Lamdera$Wire3$encodePair_fn);
    var $lamdera$codecs$Lamdera$Wire3$encodeDict_fn = function (encKey, encValue, d) {
        return $lamdera$codecs$Lamdera$Wire3$encodeList_fn(A2($lamdera$codecs$Lamdera$Wire3$encodePair, encKey, encValue), $elm$core$Dict$toList(d));
    }, $lamdera$codecs$Lamdera$Wire3$encodeDict = F3($lamdera$codecs$Lamdera$Wire3$encodeDict_fn);
    var $elm$bytes$Bytes$Encode$Bytes = function (a) {
        return { $: 10, a: a };
    };
    var $elm$bytes$Bytes$Encode$bytes = $elm$bytes$Bytes$Encode$Bytes;
    var $lamdera$codecs$Lamdera$Wire3$encodeBytes = function (b) {
        return $elm$bytes$Bytes$Encode$sequence(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeInt($elm$bytes$Bytes$width(b)),
            $elm$bytes$Bytes$Encode$bytes(b)
        ]));
    };
    var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$w3_encode_Body = function (w3v) {
        switch (w3v.$) {
            case 3:
                var v0 = w3v.a;
                var v1 = w3v.b;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(0),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(v0),
                    $lamdera$codecs$Lamdera$Wire3$encodeBytes(v1)
                ]));
            case 0:
                return $elm$bytes$Bytes$Encode$unsignedInt8(1);
            case 2:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(2),
                    $lamdera$codecs$Lamdera$Wire3$failEncode(0)
                ]));
            default:
                var v0 = w3v.a;
                var v1 = w3v.b;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(3),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(v0),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(v1)
                ]));
        }
    };
    var $dillonkearns$elm_pages$Pages$StaticHttp$Request$w3_encode_Request = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$w3_encode_Body(w3_rec_var0.iL),
            $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn($lamdera$codecs$Lamdera$Wire3$failEncode, w3_rec_var0.et),
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($lamdera$codecs$Lamdera$Wire3$encodeString, w3_rec_var0.hf),
            $lamdera$codecs$Lamdera$Wire3$encodeDict_fn($lamdera$codecs$Lamdera$Wire3$encodeString, $lamdera$codecs$Lamdera$Wire3$encodeString, w3_rec_var0.hh),
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn(A2($lamdera$codecs$Lamdera$Wire3$encodePair, $lamdera$codecs$Lamdera$Wire3$encodeString, $lamdera$codecs$Lamdera$Wire3$encodeString), w3_rec_var0.jo),
            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.gi),
            $lamdera$codecs$Lamdera$Wire3$encodeBool(w3_rec_var0.kb),
            $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.kG)
        ]));
    };
    var $dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_encode_RawRequest_fn = function (w3_x_c_error, w3_x_c_value, w3v) {
        if (w3v.$ === 1) {
            var v0 = w3v.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(0),
                $lamdera$codecs$Lamdera$Wire3$encodeResult_fn(w3_x_c_error, w3_x_c_value, v0)
            ]));
        }
        else {
            var v0 = w3v.a;
            var v1 = w3v.b;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(1),
                $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$Pages$StaticHttp$Request$w3_encode_Request, v0),
                $lamdera$codecs$Lamdera$Wire3$failEncode(0)
            ]));
        }
    }, $dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_encode_RawRequest = F3($dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_encode_RawRequest_fn);
    var $dillonkearns$elm_pages$BackendTask$w3_encode_BackendTask_fn = function (w3_x_c_error, w3_x_c_value) {
        return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$w3_encode_RawRequest, w3_x_c_error, w3_x_c_value);
    }, $dillonkearns$elm_pages$BackendTask$w3_encode_BackendTask = F2($dillonkearns$elm_pages$BackendTask$w3_encode_BackendTask_fn);
    var $dillonkearns$elm_pages$Pages$Internal$FatalError$w3_encode_FatalError = function (w3v) {
        var v0 = w3v;
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $elm$bytes$Bytes$Encode$unsignedInt8(0),
            function (w3_rec_var0) {
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.iL),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(w3_rec_var0.dz)
                ]));
            }(v0)
        ]));
    };
    var $dillonkearns$elm_pages$FatalError$w3_encode_FatalError = $dillonkearns$elm_pages$Pages$Internal$FatalError$w3_encode_FatalError;
    var $author$project$Route$About$w3_encode_RouteParams = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$About$w3_encode_ActionData = $dillonkearns$elm_pages$BackendTask$w3_encode_BackendTask_fn($dillonkearns$elm_pages$FatalError$w3_encode_FatalError, $lamdera$codecs$Lamdera$Wire3$encodeList($author$project$Route$About$w3_encode_RouteParams));
    var $author$project$Route$Article$w3_encode_ActionData = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Article$Slug_$w3_encode_ActionData = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Blog$w3_encode_ActionData = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Blog$Slug_$w3_encode_ActionData = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Route$Index$w3_encode_ActionData = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_Nil);
    };
    var $author$project$Main$encodeActionData = function (actionData) {
        switch (actionData.$) {
            case 0:
                var thisActionData = actionData.a;
                return $author$project$Route$Article$Slug_$w3_encode_ActionData(thisActionData);
            case 1:
                var thisActionData = actionData.a;
                return $author$project$Route$Blog$Slug_$w3_encode_ActionData(thisActionData);
            case 2:
                var thisActionData = actionData.a;
                return $author$project$Route$About$w3_encode_ActionData(thisActionData);
            case 3:
                var thisActionData = actionData.a;
                return $author$project$Route$Article$w3_encode_ActionData(thisActionData);
            case 4:
                var thisActionData = actionData.a;
                return $author$project$Route$Blog$w3_encode_ActionData(thisActionData);
            default:
                var thisActionData = actionData.a;
                return $author$project$Route$Index$w3_encode_ActionData(thisActionData);
        }
    };
    var $author$project$Main$w3_encode_ActionData = function (w3v) {
        switch (w3v.$) {
            case 2:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(0),
                    $author$project$Route$About$w3_encode_ActionData(v0)
                ]));
            case 3:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(1),
                    $author$project$Route$Article$w3_encode_ActionData(v0)
                ]));
            case 0:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(2),
                    $author$project$Route$Article$Slug_$w3_encode_ActionData(v0)
                ]));
            case 4:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(3),
                    $author$project$Route$Blog$w3_encode_ActionData(v0)
                ]));
            case 1:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(4),
                    $author$project$Route$Blog$Slug_$w3_encode_ActionData(v0)
                ]));
            default:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(5),
                    $author$project$Route$Index$w3_encode_ActionData(v0)
                ]));
        }
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeUnit = function (_v0) {
        return $elm$bytes$Bytes$Encode$sequence(_List_Nil);
    };
    var $author$project$Shared$w3_encode_Data = $lamdera$codecs$Lamdera$Wire3$encodeUnit;
    var $author$project$Main$w3_encode_PageData = function (w3v) {
        switch (w3v.$) {
            case 6:
                return $elm$bytes$Bytes$Encode$unsignedInt8(0);
            case 2:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(1),
                    $author$project$Route$About$w3_encode_Data(v0)
                ]));
            case 3:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(2),
                    $author$project$Route$Article$w3_encode_Data(v0)
                ]));
            case 0:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(3),
                    $author$project$Route$Article$Slug_$w3_encode_Data(v0)
                ]));
            case 4:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(4),
                    $author$project$Route$Blog$w3_encode_Data(v0)
                ]));
            case 1:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(5),
                    $author$project$Route$Blog$Slug_$w3_encode_Data(v0)
                ]));
            case 7:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(6),
                    $author$project$ErrorPage$w3_encode_ErrorPage(v0)
                ]));
            default:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(7),
                    $author$project$Route$Index$w3_encode_Data(v0)
                ]));
        }
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record_a0 = A2($lamdera$codecs$Lamdera$Wire3$encodePair, $lamdera$codecs$Lamdera$Wire3$encodeString, $lamdera$codecs$Lamdera$Wire3$encodeString), $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record = $lamdera$codecs$Lamdera$Wire3$encodeList($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record_a0);
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_Ending = function (w3v) {
        switch (w3v.$) {
            case 0:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(0),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(v0)
                ]));
            case 2:
                return $elm$bytes$Bytes$Encode$unsignedInt8(1);
            default:
                return $elm$bytes$Bytes$Encode$unsignedInt8(2);
        }
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_Segment = function (w3v) {
        if (w3v.$ === 1) {
            var v0 = w3v.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(0),
                $lamdera$codecs$Lamdera$Wire3$encodeString(v0)
            ]));
        }
        else {
            var v0 = w3v.a;
            return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                $elm$bytes$Bytes$Encode$unsignedInt8(1),
                $lamdera$codecs$Lamdera$Wire3$encodeString(v0)
            ]));
        }
    };
    var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_RoutePattern = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn($dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_Ending, w3_rec_var0.aF),
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_Segment, w3_rec_var0.aL)
        ]));
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_ModuleContext = function (w3_rec_var0) {
        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record_a0, w3_rec_var0.jE),
            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($lamdera$codecs$Lamdera$Wire3$encodeString, w3_rec_var0.c6),
            $dillonkearns$elm_pages$Pages$Internal$RoutePattern$w3_encode_RoutePattern(w3_rec_var0.dn)
        ]));
    };
    var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_NotFoundReason = function (w3v) {
        switch (w3v.$) {
            case 0:
                return $elm$bytes$Bytes$Encode$unsignedInt8(0);
            case 1:
                var v0 = w3v.a;
                var v1 = w3v.b;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(1),
                    $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_ModuleContext(v0),
                    $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record, v1)
                ]));
            case 2:
                var v0 = w3v.a;
                var v1 = w3v.b;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(2),
                    $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_ModuleContext(v0),
                    $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_Record, v1)
                ]));
            default:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(3),
                    $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_ModuleContext(v0)
                ]));
        }
    };
    var $dillonkearns$elm_pages$UrlPath$w3_encode_UrlPath_a0 = $lamdera$codecs$Lamdera$Wire3$encodeString, $dillonkearns$elm_pages$UrlPath$w3_encode_UrlPath = $lamdera$codecs$Lamdera$Wire3$encodeList($dillonkearns$elm_pages$UrlPath$w3_encode_UrlPath_a0);
    var $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_encode_ResponseSketch_fn = function (w3_x_c_data, w3_x_c_action, w3_x_c_shared, w3v) {
        switch (w3v.$) {
            case 4:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(0),
                    w3_x_c_action(v0)
                ]));
            case 1:
                var v0 = w3v.a;
                var v1 = w3v.b;
                var v2 = w3v.c;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(1),
                    w3_x_c_data(v0),
                    w3_x_c_shared(v1),
                    $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn(w3_x_c_action, v2)
                ]));
            case 3:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(2),
                    function (w3_rec_var0) {
                        return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                            $lamdera$codecs$Lamdera$Wire3$encodeList_fn($dillonkearns$elm_pages$UrlPath$w3_encode_UrlPath_a0, w3_rec_var0.e),
                            $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$w3_encode_NotFoundReason(w3_rec_var0.e4)
                        ]));
                    }(v0)
                ]));
            case 2:
                var v0 = w3v.a;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(3),
                    $lamdera$codecs$Lamdera$Wire3$encodeString(v0)
                ]));
            default:
                var v0 = w3v.a;
                var v1 = w3v.b;
                return $lamdera$codecs$Lamdera$Wire3$encodeSequenceWithoutLength(_List_fromArray([
                    $elm$bytes$Bytes$Encode$unsignedInt8(4),
                    w3_x_c_data(v0),
                    $lamdera$codecs$Lamdera$Wire3$encodeMaybe_fn(w3_x_c_action, v1)
                ]));
        }
    }, $dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_encode_ResponseSketch = F4($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_encode_ResponseSketch_fn);
    var $author$project$Main$encodeResponse_a0 = $author$project$Main$w3_encode_PageData, $author$project$Main$encodeResponse_a1 = $author$project$Main$w3_encode_ActionData, $author$project$Main$encodeResponse_a2 = $author$project$Shared$w3_encode_Data, $author$project$Main$encodeResponse = A3($dillonkearns$elm_pages$Pages$Internal$ResponseSketch$w3_encode_ResponseSketch, $author$project$Main$encodeResponse_a0, $author$project$Main$encodeResponse_a1, $author$project$Main$encodeResponse_a2);
    var $author$project$Effect$Cmd = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Effect$fromCmd = $author$project$Effect$Cmd;
    var $author$project$Main$fromJsPort = _Platform_incomingPort("fromJsPort", $elm$json$Json$Decode$value);
    var $author$project$Main$stringToString = function (string) {
        return "\"" + (string + "\"");
    };
    var $author$project$Main$handleRoute = function (maybeRoute) {
        if (maybeRoute.$ === 1) {
            return $dillonkearns$elm_pages$BackendTask$succeed($elm$core$Maybe$Nothing);
        }
        else {
            var route = maybeRoute.a;
            switch (route.$) {
                case 0:
                    var routeParams = route.a;
                    return A3($author$project$Route$Article$Slug_$route.cf, {
                        c6: _List_fromArray(["Article", "Slug_"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("article"),
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment("slug")
                            ])
                        }
                    }, function (param) {
                        return _List_fromArray([
                            _Utils_Tuple2("slug", $author$project$Main$stringToString(param.cl))
                        ]);
                    }, routeParams);
                case 1:
                    var routeParams = route.a;
                    return A3($author$project$Route$Blog$Slug_$route.cf, {
                        c6: _List_fromArray(["Blog", "Slug_"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("blog"),
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment("slug")
                            ])
                        }
                    }, function (param) {
                        return _List_fromArray([
                            _Utils_Tuple2("slug", $author$project$Main$stringToString(param.cl))
                        ]);
                    }, routeParams);
                case 2:
                    return A3($author$project$Route$About$route.cf, {
                        c6: _List_fromArray(["About"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("about")
                            ])
                        }
                    }, function (param) {
                        return _List_Nil;
                    }, {});
                case 3:
                    return A3($author$project$Route$Article$route.cf, {
                        c6: _List_fromArray(["Article"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("article")
                            ])
                        }
                    }, function (param) {
                        return _List_Nil;
                    }, {});
                case 4:
                    return A3($author$project$Route$Blog$route.cf, {
                        c6: _List_fromArray(["Blog"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("blog")
                            ])
                        }
                    }, function (param) {
                        return _List_Nil;
                    }, {});
                default:
                    return A3($author$project$Route$Index$route.cf, {
                        c6: _List_fromArray(["Index"]),
                        dn: {
                            aF: $elm$core$Maybe$Nothing,
                            aL: _List_fromArray([
                                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("index")
                            ])
                        }
                    }, function (param) {
                        return _List_Nil;
                    }, {});
            }
        }
    };
    var $lamdera$codecs$Lamdera$Wire3$decodeBytes_ = _LamderaCodecs_decodeBytes;
    var $author$project$Main$hotReloadData = _Platform_incomingPort("hotReloadData", $lamdera$codecs$Lamdera$Wire3$decodeBytes_);
    var $author$project$Main$ModelAbout = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Main$ModelArticle = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Main$ModelArticle__Slug_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Main$ModelBlog = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Main$ModelBlog__Slug_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Main$ModelIndex = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$Main$MsgAbout = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Main$MsgArticle = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Main$MsgArticle__Slug_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Main$MsgBlog = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Main$MsgBlog__Slug_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Main$MsgGlobal = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$Main$MsgIndex = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$Effect$Batch = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Effect$batch = $author$project$Effect$Batch;
    var $author$project$Main$ModelErrorPage____ = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$Main$MsgErrorPage____ = function (a) {
        return { $: 8, a: a };
    };
    var $author$project$ErrorPage$init = function (errorPage) {
        return _Utils_Tuple2({ cH: 0 }, $author$project$Effect$none);
    };
    var $author$project$Effect$FetchRouteData = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$Effect$GetStargazers = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Effect$SetField = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Effect$Submit = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$Effect$SubmitFetcher = function (a) {
        return { $: 7, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Fetcher$Fetcher = $elm$core$Basics$identity;
    var $dillonkearns$elm_pages$Pages$Fetcher$map_fn = function (mapFn, _v0) {
        var fetcher = _v0;
        return {
            bd: A2($elm$core$Basics$composeR, fetcher.bd, mapFn),
            f$: fetcher.f$,
            jo: fetcher.jo,
            kG: fetcher.kG
        };
    }, $dillonkearns$elm_pages$Pages$Fetcher$map = F2($dillonkearns$elm_pages$Pages$Fetcher$map_fn);
    var $author$project$Effect$map_fn = function (fn, effect) {
        switch (effect.$) {
            case 0:
                return $author$project$Effect$None;
            case 1:
                var cmd = effect.a;
                return $author$project$Effect$Cmd(_Platform_map_fn(fn, cmd));
            case 2:
                var list = effect.a;
                return $author$project$Effect$Batch($elm$core$List$map_fn($author$project$Effect$map(fn), list));
            case 3:
                var toMsg = effect.a;
                return $author$project$Effect$GetStargazers(A2($elm$core$Basics$composeR, toMsg, fn));
            case 5:
                var fetchInfo = effect.a;
                return $author$project$Effect$FetchRouteData({
                    hc: fetchInfo.hc,
                    fm: A2($elm$core$Basics$composeR, fetchInfo.fm, fn)
                });
            case 6:
                var fetchInfo = effect.a;
                return $author$project$Effect$Submit({
                    fm: A2($elm$core$Basics$composeR, fetchInfo.fm, fn),
                    it: fetchInfo.it
                });
            case 4:
                var info = effect.a;
                return $author$project$Effect$SetField(info);
            default:
                var fetcher = effect.a;
                return $author$project$Effect$SubmitFetcher($dillonkearns$elm_pages$Pages$Fetcher$map_fn(fn, fetcher));
        }
    }, $author$project$Effect$map = F2($author$project$Effect$map_fn);
    var $elm$core$Tuple$mapBoth_fn = function (funcA, funcB, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(funcA(x), funcB(y));
    }, $elm$core$Tuple$mapBoth = F3($elm$core$Tuple$mapBoth_fn);
    var $author$project$ErrorPage$notFound = $author$project$ErrorPage$NotFound;
    var $author$project$Main$initErrorPage = function (pageData) {
        return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelErrorPage____, $author$project$Effect$map($author$project$Main$MsgErrorPage____), $author$project$ErrorPage$init(function () {
            if (pageData.$ === 7) {
                var errorPage = pageData.a;
                return errorPage;
            }
            else {
                var otherwise = pageData;
                return $author$project$ErrorPage$notFound;
            }
        }()));
    };
    var $elm$core$Maybe$map2_fn = function (func, ma, mb) {
        if (ma.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var a = ma.a;
            if (mb.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var b = mb.a;
                return $elm$core$Maybe$Just(A2(func, a, b));
            }
        }
    }, $elm$core$Maybe$map2_fn_unwrapped = function (func, ma, mb) {
        if (ma.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var a = ma.a;
            if (mb.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var b = mb.a;
                return $elm$core$Maybe$Just(func(a, b));
            }
        }
    }, $elm$core$Maybe$map2 = F3($elm$core$Maybe$map2_fn);
    var $dillonkearns$elm_pages$Pages$Fetcher$submit_fn = function (byteDecoder, options) {
        return {
            bd: function (bytesResult) {
                return $elm$core$Result$andThen_fn(function (okBytes) {
                    return $elm$core$Result$fromMaybe_fn($elm$http$Http$BadBody("Couldn't decode bytes."), $elm$bytes$Bytes$Decode$decode_fn(byteDecoder, okBytes));
                }, bytesResult);
            },
            f$: options.f$,
            jo: _List_Cons(_Utils_Tuple2("elm-pages-action-only", "true"), options.jo),
            kG: $elm$core$Maybe$Nothing
        };
    }, $dillonkearns$elm_pages$Pages$Fetcher$submit = F2($dillonkearns$elm_pages$Pages$Fetcher$submit_fn);
    var $author$project$Shared$init_fn = function (flags, maybePagePath) {
        return _Utils_Tuple2({}, $author$project$Effect$none);
    }, $author$project$Shared$init = F2($author$project$Shared$init_fn);
    var $author$project$Shared$subscriptions_fn = function (_v0, _v1) {
        return $elm$core$Platform$Sub$none;
    }, $author$project$Shared$subscriptions = F2($author$project$Shared$subscriptions_fn);
    var $author$project$Shared$update_fn = function (msg, model) {
        var globalMsg = msg;
        return _Utils_Tuple2(model, $author$project$Effect$none);
    }, $author$project$Shared$update = F2($author$project$Shared$update_fn);
    var $elm$html$Html$footer = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "footer"), $elm$html$Html$footer_fn = $elm$html$Html$footer.a2;
    var $elm$html$Html$header = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "header"), $elm$html$Html$header_fn = $elm$html$Html$header.a2;
    var $elm$html$Html$main_ = _VirtualDom_nodeNS_fn(_VirtualDom_node_a0, "main"), $elm$html$Html$main__fn = $elm$html$Html$main_.a2;
    var $author$project$Shared$view_fn = function (sharedData, page, model, toMsg, pageView) {
        return {
            iL: _List_fromArray([
                $elm$html$Html$div_fn(_List_fromArray([
                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "min-h-screen bg-stone-50 font-mincho")
                ]), _List_fromArray([
                    $elm$html$Html$header_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "py-8")
                    ]), _List_fromArray([
                        $elm$html$Html$div_fn(_List_fromArray([
                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "px-4 grid place-items-center")
                        ]), _List_fromArray([
                            $elm$html$Html$a_fn(_List_fromArray([
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "justify-center text-[160px] max-lg:text-8xl text-nowrap text-center text-stone-800"),
                                $elm$html$Html$Attributes$href("/")
                            ]), _List_fromArray([
                                $elm$html$Html$text($author$project$Shared$title)
                            ])),
                            $elm$html$Html$nav_fn(_List_fromArray([
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "w-full px-4 max-lg:mt-6 mb-20 border-y border-stone-200")
                            ]), _List_fromArray([
                                $elm$html$Html$ul_fn(_List_fromArray([
                                    $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "flex justify-center space-x-8 py-2 text-xs tracking-widest text-stone-600")
                                ]), _List_fromArray([
                                    $elm$html$Html$li_fn(_List_Nil, _List_fromArray([
                                        $elm$html$Html$a_fn(_List_fromArray([
                                            $elm$html$Html$Attributes$href("/"),
                                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-stone-900")
                                        ]), _List_fromArray([
                                            $elm$html$Html$text("\u30DB\u30FC\u30E0")
                                        ]))
                                    ])),
                                    $elm$html$Html$li_fn(_List_Nil, _List_fromArray([
                                        $elm$html$Html$a_fn(_List_fromArray([
                                            $elm$html$Html$Attributes$href("/about"),
                                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-stone-900")
                                        ]), _List_fromArray([
                                            $elm$html$Html$text("\u6982\u8981")
                                        ]))
                                    ])),
                                    $elm$html$Html$li_fn(_List_Nil, _List_fromArray([
                                        $elm$html$Html$a_fn(_List_fromArray([
                                            $elm$html$Html$Attributes$href("/blog"),
                                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "hover:text-stone-900")
                                        ]), _List_fromArray([
                                            $elm$html$Html$text("\u8A18\u9332")
                                        ]))
                                    ]))
                                ]))
                            ]))
                        ]))
                    ])),
                    $elm$html$Html$main__fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "max-w-xl mx-auto px-4 py-8 space-y-10")
                    ]), pageView.iL),
                    $elm$html$Html$footer_fn(_List_fromArray([
                        $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "py-8")
                    ]), _List_fromArray([
                        $elm$html$Html$div_fn(_List_fromArray([
                            $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "max-w-xl mx-auto px-4")
                        ]), _List_fromArray([
                            $elm$html$Html$p_fn(_List_fromArray([
                                $elm$html$Html$Attributes$stringProperty_fn($elm$html$Html$Attributes$class_a0, "text-center text-xs tracking-wide text-stone-500")
                            ]), _List_fromArray([
                                $elm$html$Html$text("\u00A9 2024 " + $author$project$Shared$title)
                            ]))
                        ]))
                    ]))
                ]))
            ]),
            dz: pageView.dz
        };
    }, $author$project$Shared$view = F5($author$project$Shared$view_fn);
    var $author$project$Shared$template = {
        hc: $dillonkearns$elm_pages$BackendTask$fail($dillonkearns$elm_pages$FatalError$fromString("")),
        bL: $author$project$Shared$init,
        hS: $elm$core$Maybe$Nothing,
        bV: $author$project$Shared$subscriptions,
        ba: $author$project$Shared$update,
        E: $author$project$Shared$view
    };
    var $author$project$Main$init_fn = function (currentGlobalModel, userFlags, sharedData, pageData, actionData, maybePagePath) {
        var _v0 = $elm$core$Maybe$withDefault_fn(A2($author$project$Shared$template.bL, userFlags, maybePagePath), $elm$core$Maybe$map_fn(function (mapUnpack) {
            return _Utils_Tuple2(mapUnpack, $author$project$Effect$none);
        }, currentGlobalModel));
        var sharedModel = _v0.a;
        var globalCmd = _v0.b;
        var _v1 = function () {
            var _v2 = $elm$core$Maybe$map2_fn($elm$core$Tuple$pair, $elm$core$Maybe$andThen_fn(function ($) {
                return $.az;
            }, maybePagePath), $elm$core$Maybe$map_fn(function ($) {
                return $.e;
            }, maybePagePath));
            if (_v2.$ === 1) {
                return $author$project$Main$initErrorPage(pageData);
            }
            else {
                var justRouteAndPath = _v2.a;
                var _v3 = _Utils_Tuple2(justRouteAndPath.a, pageData);
                _v3$6: while (true) {
                    switch (_v3.a.$) {
                        case 0:
                            if (!_v3.b.$) {
                                var routeParams = _v3.a.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelArticle__Slug_, $author$project$Effect$map($author$project$Main$MsgArticle__Slug_), A2($author$project$Route$Article$Slug_$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (!andThenUnpack.$) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: routeParams,
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Article$Slug_$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                        case 1:
                            if (_v3.b.$ === 1) {
                                var routeParams = _v3.a.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelBlog__Slug_, $author$project$Effect$map($author$project$Main$MsgBlog__Slug_), A2($author$project$Route$Blog$Slug_$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (andThenUnpack.$ === 1) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: routeParams,
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Blog$Slug_$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                        case 2:
                            if (_v3.b.$ === 2) {
                                var _v6 = _v3.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelAbout, $author$project$Effect$map($author$project$Main$MsgAbout), A2($author$project$Route$About$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (andThenUnpack.$ === 2) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: {},
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$About$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                        case 3:
                            if (_v3.b.$ === 3) {
                                var _v8 = _v3.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelArticle, $author$project$Effect$map($author$project$Main$MsgArticle), A2($author$project$Route$Article$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (andThenUnpack.$ === 3) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: {},
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Article$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                        case 4:
                            if (_v3.b.$ === 4) {
                                var _v10 = _v3.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelBlog, $author$project$Effect$map($author$project$Main$MsgBlog), A2($author$project$Route$Blog$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (andThenUnpack.$ === 4) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: {},
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Blog$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                        default:
                            if (_v3.b.$ === 5) {
                                var _v12 = _v3.a;
                                var thisPageData = _v3.b.a;
                                return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelIndex, $author$project$Effect$map($author$project$Main$MsgIndex), A2($author$project$Route$Index$route.bL, sharedModel, {
                                    fs: $elm$core$Maybe$andThen_fn(function (andThenUnpack) {
                                        if (andThenUnpack.$ === 5) {
                                            var thisActionData = andThenUnpack.a;
                                            return $elm$core$Maybe$Just(thisActionData);
                                        }
                                        else {
                                            return $elm$core$Maybe$Nothing;
                                        }
                                    }, actionData),
                                    Q: $elm$core$Dict$empty,
                                    hc: thisPageData,
                                    R: $elm$core$Maybe$Nothing,
                                    S: $elm$core$Dict$empty,
                                    e: justRouteAndPath.b.e,
                                    T: {},
                                    M: sharedData,
                                    kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Index$w3_decode_ActionData),
                                    kG: $elm$core$Maybe$andThen_fn(function ($) {
                                        return $.ah;
                                    }, maybePagePath)
                                }));
                            }
                            else {
                                break _v3$6;
                            }
                    }
                }
                return $author$project$Main$initErrorPage(pageData);
            }
        }();
        var templateModel = _v1.a;
        var templateCmd = _v1.b;
        return _Utils_Tuple2({ D: maybePagePath, g: sharedModel, n: templateModel }, $author$project$Effect$batch(_List_fromArray([
            templateCmd,
            $author$project$Effect$map_fn($author$project$Main$MsgGlobal, globalCmd)
        ])));
    }, $author$project$Main$init = F6($author$project$Main$init_fn);
    var $author$project$ErrorPage$internalError = $author$project$ErrorPage$InternalError;
    var $author$project$Main$onActionData = function (actionData) {
        switch (actionData.$) {
            case 0:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgArticle__Slug_(mapUnpack(thisActionData));
                }, $author$project$Route$Article$Slug_$route.c9);
            case 1:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgBlog__Slug_(mapUnpack(thisActionData));
                }, $author$project$Route$Blog$Slug_$route.c9);
            case 2:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgAbout(mapUnpack(thisActionData));
                }, $author$project$Route$About$route.c9);
            case 3:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgArticle(mapUnpack(thisActionData));
                }, $author$project$Route$Article$route.c9);
            case 4:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgBlog(mapUnpack(thisActionData));
                }, $author$project$Route$Blog$route.c9);
            default:
                var thisActionData = actionData.a;
                return $elm$core$Maybe$map_fn(function (mapUnpack) {
                    return $author$project$Main$MsgIndex(mapUnpack(thisActionData));
                }, $author$project$Route$Index$route.c9);
        }
    };
    var $elm$json$Json$Decode$decodeString = _Json_runOnString;
    var $elm$http$Http$expectStringResponse_fn = function (toMsg, toResult) {
        return _Http_expect_fn("", $elm$core$Basics$identity, A2($elm$core$Basics$composeR, toResult, toMsg));
    }, $elm$http$Http$expectStringResponse = F2($elm$http$Http$expectStringResponse_fn);
    var $elm$http$Http$resolve_fn = function (toResult, response) {
        switch (response.$) {
            case 0:
                var url = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadUrl(url));
            case 1:
                return $elm$core$Result$Err($elm$http$Http$Timeout);
            case 2:
                return $elm$core$Result$Err($elm$http$Http$NetworkError);
            case 3:
                var metadata = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata._));
            default:
                var body = response.b;
                return $elm$core$Result$mapError_fn($elm$http$Http$BadBody, toResult(body));
        }
    }, $elm$http$Http$resolve = F2($elm$http$Http$resolve_fn);
    var $elm$http$Http$expectJson_fn = function (toMsg, decoder) {
        return $elm$http$Http$expectStringResponse_fn(toMsg, $elm$http$Http$resolve(function (string) {
            return $elm$core$Result$mapError_fn($elm$json$Json$Decode$errorToString, _Json_runOnString_fn(decoder, string));
        }));
    }, $elm$http$Http$expectJson = F2($elm$http$Http$expectJson_fn);
    var $elm$http$Http$get = function (r) {
        return $elm$http$Http$request({ iL: $elm$http$Http$emptyBody, jb: r.jb, jo: _List_Nil, gi: "GET", gL: $elm$core$Maybe$Nothing, gN: $elm$core$Maybe$Nothing, kG: r.kG });
    };
    var $author$project$Effect$perform_fn = function (helpers, effect) {
        var key = helpers.jz;
        var fromPageMsg = helpers.jj;
        switch (effect.$) {
            case 0:
                return $elm$core$Platform$Cmd$none;
            case 1:
                var cmd = effect.a;
                return _Platform_map_fn(fromPageMsg, cmd);
            case 4:
                var info = effect.a;
                return helpers.ks(info);
            case 2:
                var list = effect.a;
                return $elm$core$Platform$Cmd$batch($elm$core$List$map_fn($author$project$Effect$perform(helpers), list));
            case 3:
                var toMsg = effect.a;
                return $elm$http$Http$get({
                    jb: $elm$http$Http$expectJson_fn(A2($elm$core$Basics$composeR, toMsg, fromPageMsg), _Json_decodeField_fn("stargazers_count", $elm$json$Json$Decode$int)),
                    kG: "https://api.github.com/repos/dillonkearns/elm-pages"
                });
            case 5:
                var fetchInfo = effect.a;
                return helpers.je(fetchInfo);
            case 6:
                var record = effect.a;
                return helpers.kA(record);
            default:
                var record = effect.a;
                return helpers.km(record);
        }
    }, $author$project$Effect$perform = F2($author$project$Effect$perform_fn);
    var $author$project$Main$routePatterns3 = _List_fromArray([
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("article"),
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment("slug")
            ])
        },
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("blog"),
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment("slug")
            ])
        },
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("about")
            ])
        },
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("article")
            ])
        },
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("blog")
            ])
        },
        {
            aF: $elm$core$Maybe$Nothing,
            aL: _List_fromArray([
                $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment("index")
            ])
        }
    ]);
    var $author$project$Route$routeToPath = function (route) {
        return $elm$core$List$concat(function () {
            switch (route.$) {
                case 0:
                    var params = route.a;
                    return _List_fromArray([
                        _List_fromArray(["article"]),
                        _List_fromArray([params.cl])
                    ]);
                case 1:
                    var params = route.a;
                    return _List_fromArray([
                        _List_fromArray(["blog"]),
                        _List_fromArray([params.cl])
                    ]);
                case 2:
                    return _List_fromArray([
                        _List_fromArray(["about"])
                    ]);
                case 3:
                    return _List_fromArray([
                        _List_fromArray(["article"])
                    ]);
                case 4:
                    return _List_fromArray([
                        _List_fromArray(["blog"])
                    ]);
                default:
                    return _List_fromArray([_List_Nil]);
            }
        }());
    };
    var $lamdera$codecs$Lamdera$Wire3$encodeBytes_ = _LamderaCodecs_encodeBytes;
    var $author$project$Main$sendPageData = _Platform_outgoingPort("sendPageData", function ($) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("binaryPageData", $lamdera$codecs$Lamdera$Wire3$encodeBytes_($.iJ)),
            _Utils_Tuple2("oldThing", $elm$core$Basics$identity($.jZ))
        ]));
    });
    var $author$project$ErrorPage$statusCode = function (error) {
        if (!error.$) {
            return 404;
        }
        else {
            return 500;
        }
    };
    var $author$project$Main$templateSubscriptions_fn = function (route, path, model) {
        if (route.$ === 1) {
            return $elm$core$Platform$Sub$none;
        }
        else {
            var justRoute = route.a;
            switch (justRoute.$) {
                case 0:
                    var routeParams = justRoute.a;
                    var _v2 = model.n;
                    if (!_v2.$) {
                        var templateModel = _v2.a;
                        return _Platform_map_fn($author$project$Main$MsgArticle__Slug_, A4($author$project$Route$Article$Slug_$route.bV, routeParams, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v2;
                        return $elm$core$Platform$Sub$none;
                    }
                case 1:
                    var routeParams = justRoute.a;
                    var _v3 = model.n;
                    if (_v3.$ === 1) {
                        var templateModel = _v3.a;
                        return _Platform_map_fn($author$project$Main$MsgBlog__Slug_, A4($author$project$Route$Blog$Slug_$route.bV, routeParams, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v3;
                        return $elm$core$Platform$Sub$none;
                    }
                case 2:
                    var _v4 = model.n;
                    if (_v4.$ === 2) {
                        var templateModel = _v4.a;
                        return _Platform_map_fn($author$project$Main$MsgAbout, A4($author$project$Route$About$route.bV, {}, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v4;
                        return $elm$core$Platform$Sub$none;
                    }
                case 3:
                    var _v5 = model.n;
                    if (_v5.$ === 3) {
                        var templateModel = _v5.a;
                        return _Platform_map_fn($author$project$Main$MsgArticle, A4($author$project$Route$Article$route.bV, {}, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v5;
                        return $elm$core$Platform$Sub$none;
                    }
                case 4:
                    var _v6 = model.n;
                    if (_v6.$ === 4) {
                        var templateModel = _v6.a;
                        return _Platform_map_fn($author$project$Main$MsgBlog, A4($author$project$Route$Blog$route.bV, {}, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v6;
                        return $elm$core$Platform$Sub$none;
                    }
                default:
                    var _v7 = model.n;
                    if (_v7.$ === 5) {
                        var templateModel = _v7.a;
                        return _Platform_map_fn($author$project$Main$MsgIndex, A4($author$project$Route$Index$route.bV, {}, path, templateModel, model.g));
                    }
                    else {
                        var otherwise = _v7;
                        return $elm$core$Platform$Sub$none;
                    }
            }
        }
    }, $author$project$Main$templateSubscriptions = F3($author$project$Main$templateSubscriptions_fn);
    var $author$project$Main$subscriptions_fn = function (route, path, model) {
        return $elm$core$Platform$Sub$batch(_List_fromArray([
            _Platform_map_fn($author$project$Main$MsgGlobal, A2($author$project$Shared$template.bV, path, model.g)),
            $author$project$Main$templateSubscriptions_fn(route, path, model)
        ]));
    }, $author$project$Main$subscriptions = F3($author$project$Main$subscriptions_fn);
    var $author$project$Main$toJsPort = _Platform_outgoingPort("toJsPort", $elm$core$Basics$identity);
    var $dillonkearns$elm_pages$Pages$Flags$PreRenderFlags = { $: 1 };
    var $author$project$Main$fooFn_fn = function (wrapModel, wrapMsg, model, triple) {
        var a = triple.a;
        var b = triple.b;
        var c = triple.c;
        return _Utils_Tuple3(wrapModel(a), $author$project$Effect$map_fn(wrapMsg, b), function () {
            if (c.$ === 1) {
                return _Utils_Tuple2(model.g, $author$project$Effect$none);
            }
            else {
                var sharedMsg = c.a;
                return A2($author$project$Shared$template.ba, sharedMsg, model.g);
            }
        }());
    }, $author$project$Main$fooFn = F4($author$project$Main$fooFn_fn);
    var $dillonkearns$elm_pages$Pages$ConcurrentSubmission$mapStatus_fn = function (mapFn, fetcherSubmitStatus) {
        switch (fetcherSubmitStatus.$) {
            case 0:
                return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Submitting;
            case 1:
                var value = fetcherSubmitStatus.a;
                return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Reloading(mapFn(value));
            default:
                var value = fetcherSubmitStatus.a;
                return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$Complete(mapFn(value));
        }
    }, $dillonkearns$elm_pages$Pages$ConcurrentSubmission$mapStatus = F2($dillonkearns$elm_pages$Pages$ConcurrentSubmission$mapStatus_fn);
    var $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map_fn = function (mapFn, fetcherState) {
        return {
            dY: fetcherState.dY,
            ea: fetcherState.ea,
            N: $dillonkearns$elm_pages$Pages$ConcurrentSubmission$mapStatus_fn(mapFn, fetcherState.N)
        };
    }, $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map = F2($dillonkearns$elm_pages$Pages$ConcurrentSubmission$map_fn);
    var $elm$core$Maybe$map3_fn = function (func, ma, mb, mc) {
        if (ma.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var a = ma.a;
            if (mb.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var b = mb.a;
                if (mc.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var c = mc.a;
                    return $elm$core$Maybe$Just(A3(func, a, b, c));
                }
            }
        }
    }, $elm$core$Maybe$map3_fn_unwrapped = function (func, ma, mb, mc) {
        if (ma.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var a = ma.a;
            if (mb.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var b = mb.a;
                if (mc.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var c = mc.a;
                    return $elm$core$Maybe$Just(func(a, b, c));
                }
            }
        }
    }, $elm$core$Maybe$map3 = F4($elm$core$Maybe$map3_fn);
    var $dillonkearns$elm_pages$Pages$PageUrl$parseQueryParams = $dillonkearns$elm_pages$QueryParams$fromString;
    var $author$project$Main$toTriple_fn = function (a, b, c) {
        return _Utils_Tuple3(a, b, c);
    }, $author$project$Main$toTriple = F3($author$project$Main$toTriple_fn);
    var $author$project$ErrorPage$update_fn = function (errorPage, msg, model) {
        return _Utils_Tuple2(_Utils_update(model, { cH: model.cH + 1 }), $author$project$Effect$none);
    }, $author$project$ErrorPage$update = F3($author$project$ErrorPage$update_fn);
    var $author$project$Main$update_fn = function (pageFormState, concurrentSubmissions, navigation, sharedData, pageData, navigationKey, msg, model) {
        switch (msg.$) {
            case 8:
                var msg_ = msg.a;
                var _v1 = function () {
                    var _v2 = _Utils_Tuple2(model.n, pageData);
                    if ((_v2.a.$ === 6) && (_v2.b.$ === 7)) {
                        var pageModel = _v2.a.a;
                        var thisPageData = _v2.b.a;
                        return $elm$core$Tuple$mapBoth_fn($author$project$Main$ModelErrorPage____, $author$project$Effect$map($author$project$Main$MsgErrorPage____), $author$project$ErrorPage$update_fn(thisPageData, msg_, pageModel));
                    }
                    else {
                        return _Utils_Tuple2(model.n, $author$project$Effect$none);
                    }
                }();
                var updatedPageModel = _v1.a;
                var pageCmd = _v1.b;
                return _Utils_Tuple2(_Utils_update(model, { n: updatedPageModel }), pageCmd);
            case 6:
                var msg_ = msg.a;
                var _v3 = A2($author$project$Shared$template.ba, msg_, model.g);
                var sharedModel = _v3.a;
                var globalCmd = _v3.b;
                return _Utils_Tuple2(_Utils_update(model, { g: sharedModel }), $author$project$Effect$map_fn($author$project$Main$MsgGlobal, globalCmd));
            case 7:
                var record = msg.a;
                var _v4 = $author$project$Main$init_fn($elm$core$Maybe$Just(model.g), $dillonkearns$elm_pages$Pages$Flags$PreRenderFlags, sharedData, pageData, $elm$core$Maybe$Nothing, $elm$core$Maybe$Just({
                    az: record.az,
                    ah: $elm$core$Maybe$Just({
                        aW: record.aW,
                        eG: record.eG,
                        e: record.e,
                        eW: record.eW,
                        e$: record.e$,
                        a6: $elm$core$Maybe$withDefault_fn($elm$core$Dict$empty, $elm$core$Maybe$map_fn($dillonkearns$elm_pages$Pages$PageUrl$parseQueryParams, record.a6))
                    }),
                    e: { aW: record.aW, e: record.e, a6: record.a6 }
                }));
                var updatedModel = _v4.a;
                var cmd = _v4.b;
                var _v5 = $author$project$Shared$template.hS;
                if (_v5.$ === 1) {
                    return _Utils_Tuple2(updatedModel, cmd);
                }
                else {
                    var thingy = _v5.a;
                    var _v6 = A2($author$project$Shared$template.ba, thingy({ aW: record.aW, e: record.e, a6: record.a6 }), model.g);
                    var updatedGlobalModel = _v6.a;
                    var globalCmd = _v6.b;
                    return _Utils_Tuple2(_Utils_update(updatedModel, { g: updatedGlobalModel }), $author$project$Effect$batch(_List_fromArray([
                        cmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, globalCmd)
                    ])));
                }
            case 0:
                var msg_ = msg.a;
                var _v7 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((!_v7.a.$) && (!_v7.b.$)) && (!_v7.c.$)) && (!_v7.c.a.a.$)) {
                    var pageModel = _v7.a.a;
                    var thisPageData = _v7.b.a;
                    var _v8 = _v7.c.a;
                    var routeParams = _v8.a.a;
                    var pageUrl = _v8.b;
                    var justPage = _v8.c;
                    var _v9 = $author$project$Main$fooFn_fn($author$project$Main$ModelArticle__Slug_, $author$project$Main$MsgArticle__Slug_, model, A4($author$project$Route$Article$Slug_$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (!mapUnpack0.$) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: routeParams,
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$Article$Slug_$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v9.a;
                    var pageCmd = _v9.b;
                    var globalModelAndCmd = _v9.c;
                    var _v11 = globalModelAndCmd;
                    var newGlobalModel = _v11.a;
                    var newGlobalCmd = _v11.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
            case 1:
                var msg_ = msg.a;
                var _v12 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((_v12.a.$ === 1) && (_v12.b.$ === 1)) && (!_v12.c.$)) && (_v12.c.a.a.$ === 1)) {
                    var pageModel = _v12.a.a;
                    var thisPageData = _v12.b.a;
                    var _v13 = _v12.c.a;
                    var routeParams = _v13.a.a;
                    var pageUrl = _v13.b;
                    var justPage = _v13.c;
                    var _v14 = $author$project$Main$fooFn_fn($author$project$Main$ModelBlog__Slug_, $author$project$Main$MsgBlog__Slug_, model, A4($author$project$Route$Blog$Slug_$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (mapUnpack0.$ === 1) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: routeParams,
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$Blog$Slug_$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v14.a;
                    var pageCmd = _v14.b;
                    var globalModelAndCmd = _v14.c;
                    var _v16 = globalModelAndCmd;
                    var newGlobalModel = _v16.a;
                    var newGlobalCmd = _v16.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
            case 2:
                var msg_ = msg.a;
                var _v17 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((_v17.a.$ === 2) && (_v17.b.$ === 2)) && (!_v17.c.$)) && (_v17.c.a.a.$ === 2)) {
                    var pageModel = _v17.a.a;
                    var thisPageData = _v17.b.a;
                    var _v18 = _v17.c.a;
                    var _v19 = _v18.a;
                    var pageUrl = _v18.b;
                    var justPage = _v18.c;
                    var _v20 = $author$project$Main$fooFn_fn($author$project$Main$ModelAbout, $author$project$Main$MsgAbout, model, A4($author$project$Route$About$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (mapUnpack0.$ === 2) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: {},
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$About$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v20.a;
                    var pageCmd = _v20.b;
                    var globalModelAndCmd = _v20.c;
                    var _v22 = globalModelAndCmd;
                    var newGlobalModel = _v22.a;
                    var newGlobalCmd = _v22.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
            case 3:
                var msg_ = msg.a;
                var _v23 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((_v23.a.$ === 3) && (_v23.b.$ === 3)) && (!_v23.c.$)) && (_v23.c.a.a.$ === 3)) {
                    var pageModel = _v23.a.a;
                    var thisPageData = _v23.b.a;
                    var _v24 = _v23.c.a;
                    var _v25 = _v24.a;
                    var pageUrl = _v24.b;
                    var justPage = _v24.c;
                    var _v26 = $author$project$Main$fooFn_fn($author$project$Main$ModelArticle, $author$project$Main$MsgArticle, model, A4($author$project$Route$Article$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (mapUnpack0.$ === 3) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: {},
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$Article$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v26.a;
                    var pageCmd = _v26.b;
                    var globalModelAndCmd = _v26.c;
                    var _v28 = globalModelAndCmd;
                    var newGlobalModel = _v28.a;
                    var newGlobalCmd = _v28.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
            case 4:
                var msg_ = msg.a;
                var _v29 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((_v29.a.$ === 4) && (_v29.b.$ === 4)) && (!_v29.c.$)) && (_v29.c.a.a.$ === 4)) {
                    var pageModel = _v29.a.a;
                    var thisPageData = _v29.b.a;
                    var _v30 = _v29.c.a;
                    var _v31 = _v30.a;
                    var pageUrl = _v30.b;
                    var justPage = _v30.c;
                    var _v32 = $author$project$Main$fooFn_fn($author$project$Main$ModelBlog, $author$project$Main$MsgBlog, model, A4($author$project$Route$Blog$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (mapUnpack0.$ === 4) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: {},
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$Blog$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v32.a;
                    var pageCmd = _v32.b;
                    var globalModelAndCmd = _v32.c;
                    var _v34 = globalModelAndCmd;
                    var newGlobalModel = _v34.a;
                    var newGlobalCmd = _v34.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
            default:
                var msg_ = msg.a;
                var _v35 = _Utils_Tuple3(model.n, pageData, $elm$core$Maybe$map3_fn($author$project$Main$toTriple, $elm$core$Maybe$andThen_fn(function ($) {
                    return $.az;
                }, model.D), $elm$core$Maybe$andThen_fn(function ($) {
                    return $.ah;
                }, model.D), $elm$core$Maybe$map_fn(function ($) {
                    return $.e;
                }, model.D)));
                if ((((_v35.a.$ === 5) && (_v35.b.$ === 5)) && (!_v35.c.$)) && (_v35.c.a.a.$ === 5)) {
                    var pageModel = _v35.a.a;
                    var thisPageData = _v35.b.a;
                    var _v36 = _v35.c.a;
                    var _v37 = _v36.a;
                    var pageUrl = _v36.b;
                    var justPage = _v36.c;
                    var _v38 = $author$project$Main$fooFn_fn($author$project$Main$ModelIndex, $author$project$Main$MsgIndex, model, A4($author$project$Route$Index$route.ba, {
                        fs: $elm$core$Maybe$Nothing,
                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(function (mapUnpack0) {
                                if (mapUnpack0.$ === 5) {
                                    var justActionData = mapUnpack0.a;
                                    return $elm$core$Maybe$Just(justActionData);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            });
                        }, concurrentSubmissions),
                        hc: thisPageData,
                        R: navigation,
                        S: pageFormState,
                        e: justPage.e,
                        T: {},
                        M: sharedData,
                        kA: function (options) {
                            return $dillonkearns$elm_pages$Pages$Fetcher$submit_fn($author$project$Route$Index$w3_decode_ActionData, options);
                        },
                        kG: $elm$core$Maybe$Just(pageUrl)
                    }, msg_, pageModel, model.g));
                    var updatedPageModel = _v38.a;
                    var pageCmd = _v38.b;
                    var globalModelAndCmd = _v38.c;
                    var _v40 = globalModelAndCmd;
                    var newGlobalModel = _v40.a;
                    var newGlobalCmd = _v40.b;
                    return _Utils_Tuple2(_Utils_update(model, { g: newGlobalModel, n: updatedPageModel }), $author$project$Effect$batch(_List_fromArray([
                        pageCmd,
                        $author$project$Effect$map_fn($author$project$Main$MsgGlobal, newGlobalCmd)
                    ])));
                }
                else {
                    return _Utils_Tuple2(model, $author$project$Effect$none);
                }
        }
    }, $author$project$Main$update = F8($author$project$Main$update_fn);
    var $author$project$Route$About = { $: 2 };
    var $author$project$Route$Article = { $: 3 };
    var $author$project$Route$Article__Slug_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Route$Blog = { $: 4 };
    var $author$project$Route$Blog__Slug_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$Route$Index = { $: 5 };
    var $author$project$Route$segmentsToRoute = function (segments) {
        _v0$6: while (true) {
            if (segments.b) {
                if (segments.b.b) {
                    if (!segments.b.b.b) {
                        switch (segments.a) {
                            case "article":
                                var _v1 = segments.b;
                                var slug = _v1.a;
                                return $elm$core$Maybe$Just($author$project$Route$Article__Slug_({ cl: slug }));
                            case "blog":
                                var _v2 = segments.b;
                                var slug = _v2.a;
                                return $elm$core$Maybe$Just($author$project$Route$Blog__Slug_({ cl: slug }));
                            default:
                                break _v0$6;
                        }
                    }
                    else {
                        break _v0$6;
                    }
                }
                else {
                    switch (segments.a) {
                        case "about":
                            return $elm$core$Maybe$Just($author$project$Route$About);
                        case "article":
                            return $elm$core$Maybe$Just($author$project$Route$Article);
                        case "blog":
                            return $elm$core$Maybe$Just($author$project$Route$Blog);
                        default:
                            break _v0$6;
                    }
                }
            }
            else {
                return $elm$core$Maybe$Just($author$project$Route$Index);
            }
        }
        return $elm$core$Maybe$Nothing;
    };
    var $author$project$Route$splitPath = function (path) {
        return $elm$core$List$filter_fn(function (item) {
            return item !== "";
        }, $elm$core$String$split_fn("/", path));
    };
    var $author$project$Route$urlToRoute = function (url) {
        return $author$project$Route$segmentsToRoute($author$project$Route$splitPath(url.e));
    };
    var $dillonkearns$elm_pages$PagesMsg$fromMsg = function (userMsg) {
        return $dillonkearns$elm_pages$Pages$Internal$Msg$UserMsg(userMsg);
    };
    var $dillonkearns$elm_pages$Pages$Internal$Msg$FormMsg = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_pages$Pages$Internal$Msg$NoOp = { $: 3 };
    var $dillonkearns$elm_pages$Pages$Internal$Msg$Submit = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_form$Internal$FieldEvent$FormFieldEvent = function (a) {
        return { $: 1, a: a };
    };
    var $dillonkearns$elm_form$Internal$FieldEvent$Submit_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $dillonkearns$elm_form$Internal$FieldEvent$Submit = F2($dillonkearns$elm_form$Internal$FieldEvent$Submit_fn);
    var $dillonkearns$elm_form$Internal$FieldEvent$UserMsg = function (a) {
        return { $: 2, a: a };
    };
    var $dillonkearns$elm_form$Form$mapMsg_fn = function (mapFn, msg) {
        switch (msg.$) {
            case 2:
                var userMsg = msg.a;
                return $dillonkearns$elm_form$Internal$FieldEvent$UserMsg(mapFn(userMsg));
            case 1:
                var fieldEvent = msg.a;
                return $dillonkearns$elm_form$Internal$FieldEvent$FormFieldEvent(fieldEvent);
            default:
                var formData = msg.a;
                var maybeMsg = msg.b;
                return $dillonkearns$elm_form$Internal$FieldEvent$Submit_fn(formData, $elm$core$Maybe$map_fn(mapFn, maybeMsg));
        }
    }, $dillonkearns$elm_form$Form$mapMsg = F2($dillonkearns$elm_form$Form$mapMsg_fn);
    var $dillonkearns$elm_pages$Pages$Internal$Msg$map_fn = function (mapFn, msg) {
        switch (msg.$) {
            case 0:
                var userMsg = msg.a;
                return $dillonkearns$elm_pages$Pages$Internal$Msg$UserMsg(mapFn(userMsg));
            case 1:
                var info = msg.a;
                return $dillonkearns$elm_pages$Pages$Internal$Msg$Submit({
                    fs: info.fs,
                    f$: info.f$,
                    f5: info.f5,
                    gi: info.gi,
                    eO: $elm$core$Maybe$map_fn(mapFn, info.eO),
                    fq: info.fq,
                    fr: info.fr
                });
            case 2:
                var value = msg.a;
                return $dillonkearns$elm_pages$Pages$Internal$Msg$FormMsg($dillonkearns$elm_form$Form$mapMsg_fn($dillonkearns$elm_pages$Pages$Internal$Msg$map(mapFn), value));
            default:
                return $dillonkearns$elm_pages$Pages$Internal$Msg$NoOp;
        }
    }, $dillonkearns$elm_pages$Pages$Internal$Msg$map = F2($dillonkearns$elm_pages$Pages$Internal$Msg$map_fn);
    var $dillonkearns$elm_pages$PagesMsg$map_fn = function (mapFn, msg) {
        return $dillonkearns$elm_pages$Pages$Internal$Msg$map_fn(mapFn, msg);
    }, $dillonkearns$elm_pages$PagesMsg$map = F2($dillonkearns$elm_pages$PagesMsg$map_fn);
    var $author$project$View$map_fn = function (fn, doc) {
        return {
            iL: $elm$core$List$map_fn($elm$html$Html$map(fn), doc.iL),
            dz: doc.dz
        };
    }, $author$project$View$map = F2($author$project$View$map_fn);
    var $author$project$Main$modelMismatchView = {
        iL: _List_fromArray([
            $elm$html$Html$text("Model mismatch")
        ]),
        dz: "Model mismatch"
    };
    var $author$project$ErrorPage$view_fn = function (error, model) {
        return {
            iL: _List_fromArray([
                $elm$html$Html$div_fn(_List_Nil, _List_fromArray([
                    $elm$html$Html$p_fn(_List_Nil, _List_fromArray([
                        $elm$html$Html$text(function () {
                            if (!error.$) {
                                return "Page not found. Maybe try another URL?";
                            }
                            else {
                                var string = error.a;
                                return "Something went wrong.\n" + string;
                            }
                        }())
                    ]))
                ]))
            ]),
            dz: function () {
                if (!error.$) {
                    return "Page Not Found";
                }
                else {
                    var string = error.a;
                    return "Unexpected Error";
                }
            }()
        };
    }, $author$project$ErrorPage$view = F2($author$project$ErrorPage$view_fn);
    var $author$project$Main$view_fn = function (pageFormState, concurrentSubmissions, navigation, page, maybePageUrl, globalData, pageData, actionData) {
        var _v0 = _Utils_Tuple2(page.ki, pageData);
        _v0$7: while (true) {
            switch (_v0.b.$) {
                case 7:
                    var data = _v0.b.a;
                    return {
                        bi: _List_Nil,
                        E: function (model) {
                            var _v1 = model.n;
                            if (_v1.$ === 6) {
                                var subModel = _v1.a;
                                return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                    return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                }, $author$project$View$map_fn(function (myMsg) {
                                    return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgErrorPage____(myMsg));
                                }, $author$project$ErrorPage$view_fn(data, subModel)));
                            }
                            else {
                                return $author$project$Main$modelMismatchView;
                            }
                        }
                    };
                case 0:
                    if ((!_v0.a.$) && (!_v0.a.a.$)) {
                        var routeParams = _v0.a.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (!thisActionData.$) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v2 = model.n;
                                if (!_v2.$) {
                                    var subModel = _v2.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgArticle__Slug_), A3($author$project$Route$Article$Slug_$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: routeParams,
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Article$Slug_$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                case 1:
                    if ((!_v0.a.$) && (_v0.a.a.$ === 1)) {
                        var routeParams = _v0.a.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (thisActionData.$ === 1) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v4 = model.n;
                                if (_v4.$ === 1) {
                                    var subModel = _v4.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgBlog__Slug_), A3($author$project$Route$Blog$Slug_$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: routeParams,
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Blog$Slug_$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                case 2:
                    if ((!_v0.a.$) && (_v0.a.a.$ === 2)) {
                        var _v6 = _v0.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (thisActionData.$ === 2) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v7 = model.n;
                                if (_v7.$ === 2) {
                                    var subModel = _v7.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgAbout), A3($author$project$Route$About$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: {},
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$About$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                case 3:
                    if ((!_v0.a.$) && (_v0.a.a.$ === 3)) {
                        var _v9 = _v0.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (thisActionData.$ === 3) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v10 = model.n;
                                if (_v10.$ === 3) {
                                    var subModel = _v10.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgArticle), A3($author$project$Route$Article$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: {},
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Article$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                case 4:
                    if ((!_v0.a.$) && (_v0.a.a.$ === 4)) {
                        var _v12 = _v0.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (thisActionData.$ === 4) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v13 = model.n;
                                if (_v13.$ === 4) {
                                    var subModel = _v13.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgBlog), A3($author$project$Route$Blog$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: {},
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Blog$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                case 5:
                    if ((!_v0.a.$) && (_v0.a.a.$ === 5)) {
                        var _v15 = _v0.a.a;
                        var data = _v0.b.a;
                        var actionDataOrNothing = function (thisActionData) {
                            if (thisActionData.$ === 5) {
                                var justActionData = thisActionData.a;
                                return $elm$core$Maybe$Just(justActionData);
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        };
                        return {
                            bi: _List_Nil,
                            E: function (model) {
                                var _v16 = model.n;
                                if (_v16.$ === 5) {
                                    var subModel = _v16.a;
                                    return A5($author$project$Shared$template.E, globalData, page, model.g, function (myMsg) {
                                        return $dillonkearns$elm_pages$PagesMsg$fromMsg($author$project$Main$MsgGlobal(myMsg));
                                    }, $author$project$View$map_fn($dillonkearns$elm_pages$PagesMsg$map($author$project$Main$MsgIndex), A3($author$project$Route$Index$route.E, model.g, subModel, {
                                        fs: $elm$core$Maybe$andThen_fn(actionDataOrNothing, actionData),
                                        Q: $elm$core$Dict$map_fn(function (mapUnpack) {
                                            return $dillonkearns$elm_pages$Pages$ConcurrentSubmission$map(actionDataOrNothing);
                                        }, concurrentSubmissions),
                                        hc: data,
                                        R: navigation,
                                        S: pageFormState,
                                        e: page.e,
                                        T: {},
                                        M: globalData,
                                        kA: $dillonkearns$elm_pages$Pages$Fetcher$submit($author$project$Route$Index$w3_decode_ActionData),
                                        kG: maybePageUrl
                                    })));
                                }
                                else {
                                    return $author$project$Main$modelMismatchView;
                                }
                            }
                        };
                    }
                    else {
                        break _v0$7;
                    }
                default:
                    break _v0$7;
            }
        }
        var otherwise = _v0;
        return {
            bi: _List_Nil,
            E: function (_v18) {
                return {
                    iL: _List_fromArray([
                        $elm$html$Html$div_fn(_List_Nil, _List_fromArray([
                            $elm$html$Html$text("This page could not be found.")
                        ]))
                    ]),
                    dz: "Page not found"
                };
            }
        };
    }, $author$project$Main$view = F8($author$project$Main$view_fn);
    var $author$project$Main$main = $dillonkearns$elm_pages$Pages$Internal$Platform$application({
        fs: $author$project$Main$action,
        iD: function (htmlToString) {
            return _List_Nil;
        },
        iI: $author$project$Route$baseUrlAsPath,
        iM: $author$project$Main$byteDecodePageData,
        iN: $author$project$Main$byteEncodePageData,
        iS: $author$project$Effect$fromCmd,
        hc: $author$project$Main$dataForRoute,
        i_: $author$project$Main$decodeResponse,
        i4: $author$project$Main$encodeActionData,
        i5: $author$project$Main$encodeResponse,
        i7: $author$project$Main$DataErrorPage____,
        i8: $author$project$ErrorPage$statusCode,
        ji: $author$project$Main$fromJsPort($elm$core$Basics$identity),
        jk: $dillonkearns$elm_pages$BackendTask$succeed(_List_Nil),
        jl: $elm$core$Maybe$Nothing,
        jm: $elm$core$Platform$Sub$none,
        cf: $author$project$Main$handleRoute,
        jr: $author$project$Main$hotReloadData($elm$core$Basics$identity),
        bL: $author$project$Main$init($elm$core$Maybe$Nothing),
        jv: $author$project$ErrorPage$internalError,
        jV: $author$project$ErrorPage$notFound,
        jW: $elm$core$Maybe$Nothing,
        j_: $author$project$Main$onActionData,
        hS: $author$project$Main$OnPageChange,
        j6: $author$project$Main$routePatterns3,
        j7: $author$project$Effect$perform,
        kj: function (route) {
            return $elm$core$Maybe$withDefault_fn(_List_Nil, $elm$core$Maybe$map_fn($author$project$Route$routeToPath, route));
        },
        kq: $author$project$Main$sendPageData,
        M: $author$project$Shared$template.hc,
        ku: $elm$core$Maybe$Nothing,
        bV: $author$project$Main$subscriptions,
        kE: $author$project$Main$toJsPort,
        ba: $author$project$Main$update,
        kH: $author$project$Route$urlToRoute,
        E: $author$project$Main$view
    });
    _Platform_export({ "Main": { "init": $author$project$Main$main($elm$json$Json$Decode$value)(0) } });
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") {
            return _Debug_internalColor(ansi, "<function>");
        }
        if (typeof value === "boolean") {
            return _Debug_ctorColor(ansi, value ? "True" : "False");
        }
        if (typeof value === "number") {
            return _Debug_numberColor(ansi, value + "");
        }
        if (value instanceof String) {
            return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        }
        if (typeof value === "string") {
            return _Debug_stringColor(ansi, "\"" + _Debug_addSlashes(value, false) + "\"");
        }
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") {
                return _Debug_internalColor(ansi, "<internals>");
            }
            if (tag[0] === "#") {
                var output = [];
                for (var k in value) {
                    if (k === "$")
                        continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") {
                return _Debug_ctorColor(ansi, "Set")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            }
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
                return _Debug_ctorColor(ansi, "Dict")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            }
            if (tag === "SeqSet_elm_builtin") {
                return _Debug_ctorColor(ansi, "SeqSet")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $lamdera$containers$SeqSet$toList(value));
            }
            if (tag === "SeqDict_elm_builtin") {
                return _Debug_ctorColor(ansi, "SeqDict")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $lamdera$containers$SeqDict$toList(value));
            }
            if (tag === "Array_elm_builtin") {
                return _Debug_ctorColor(ansi, "Array")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            }
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for (; value.b; value = value.b) {
                    output += "," + _Debug_toAnsiString(ansi, value.a);
                }
                return output + "]";
            }
            var output = "";
            for (var i in value) {
                if (i === "$")
                    continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === "\"" || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) {
            return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        }
        if (typeof File !== "undefined" && value instanceof File) {
            return _Debug_internalColor(ansi, "<" + value.name + ">");
        }
        if (typeof value === "object") {
            var output = [];
            for (var key in value) {
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) {
                return "{}";
            }
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str
            .replace(/\\/g, "\\\\")
            .replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r")
            .replace(/\v/g, "\\v")
            .replace(/\0/g, "\\0");
        if (isChar) {
            return s.replace(/\'/g, "\\'");
        }
        else {
            return s.replace(/\"/g, "\\\"");
        }
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) {
            return true;
        }
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && $elm$core$Debug$crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        if (x.$ < 0) {
            if (x.$ < -10) {
                x = $lamdera$containers$SeqDict$toList(x);
                y = $lamdera$containers$SeqDict$toList(y);
            }
            else {
                x = $elm$core$Dict$toList(x);
                y = $elm$core$Dict$toList(y);
            }
        }
        for (var key in x) {
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
                return false;
            }
        }
        return true;
    }
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = _Json_run_fn(flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2);
        var managers = {};
        var initPair = init(result.a);
        var model = (args && args["model"]) || initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        var upgradeMode = false;
        function sendToApp(msg, viewMetadata) {
            if (upgradeMode) {
                _Platform_enqueueEffects(managers, $elm$core$Platform$Cmd$none, $elm$core$Platform$Sub$none);
                return;
            }
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        if ((args && args["model"]) === undefined) {
            _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        }
        const die = function () {
            _Platform_enqueueEffects(managers, _Platform_batch(_List_Nil), _Platform_batch(_List_Nil));
            managers = null;
            model = null;
            stepper = null;
            ports = null;
            _Platform_effectsQueue = [];
        };
        return ports ? {
            ports: ports,
            gm: function () { return model; },
            eum: function () { upgradeMode = true; },
            die: die,
            fns: {}
        } : {};
    }
}(this));
